var __v="\u003cpre class=\"k-pre\"\u003e//捕獲所有鼠標輸入\nvoid \tCaptureMouse ()\n\n//釋放對鼠標的捕獲\nvoid \tReleaseMouse ()\n\n//返回正在使用 鼠標 捕獲 的設備\nstatic wxWindow * \tGetCapture ()\n\n//返回當前窗口是否正在使用 捕獲\nvirtual bool \tHasCapture () const\n\n\n\n//使用 窗口 父窗口(如果沒有父窗口 則相對 屏幕) 居中\nvoid \tCenter (int dir=wxBOTH)\t\nvoid \tCenterOnParent (int dir=wxBOTH)\n\n//... 屏幕 ...\nvoid wxTopLevelWindow::CentreOnScreen\t(\tint \tdir = wxBOTH\t)\t\n\n\t\u003cstrong\u003edir 取值\u003c/strong\u003e\n\twxHORIZONTAL\twxVERTICAL\twxBOTH\n\n\n\n//使用 當前背景色 清除背景\nvirtual void \tClearBackground ()\t \n\n//客戶區坐標 轉 屏幕坐標\nvoid \tClientToScreen (int *x, int *y) const\nwxPoint \tClientToScreen (const wxPoint \u0026pt) const\n\n//屏幕坐標 轉 客戶區坐標\nvoid \tScreenToClient (int *x, int *y) const\nwxPoint \tScreenToClient (const wxPoint \u0026pt) const\n\n//參數一個 wxCloseEvent 事件\nbool \tClose (bool force=false)\n\n//對話框單位 像素 之間轉換\nwxPoint \tConvertDialogToPixels (const wxPoint \u0026pt) const\nwxSize \tConvertDialogToPixels (const wxSize \u0026sz) const\nwxPoint \tConvertPixelsToDialog (const wxPoint \u0026pt) const\nwxSize \tConvertPixelsToDialog (const wxSize \u0026sz) const\n\n//安全的銷毀窗口 (將會等待窗口 處理完 所有事件才銷毀)\nvirtual bool \tDestroy ()\n\n//true 啟用窗口 false 禁用窗口\nvirtual bool \tEnable (bool enable=true)\n\n//同 Enable(false)\nbool \tDisable ()\n\n\n\n//放回當前 焦點窗口\nstatic wxWindow * \tFindFocus ()\n\n//在 當前窗口關係網中 通過 名字 或id 窗口窗口\nwxWindow * \tFindWindow (long id) const\nwxWindow * \tFindWindow (const wxString \u0026name) const\n\t//wxDynamicCast 轉換窗口類型 失敗返回 NULL\n\tMyWindow* window = wxDynamicCast(FindWindow(ID_MYWINDOW),MyWindow);\n\n\n\n\n//自動改變窗口大小 使其剛好 容納所有子窗口(被用於基與sizer的佈局時)\nvirtual void \tFit ()\n\n//同 Fit 不過其使用虛擬大小(應用在包括滾動條的窗口)\nvirtual void \tFitInside ()\n\n\n\n\u003cstrong\u003e在此兩個函數之間進行 刷新界面的優化 以避免閃爍\u003c/strong\u003e\n//凍結窗口 使其不被重繪\nvoid \tFreeze ()\n\n//重新啟用窗口更新\nvoid \tThaw ()\n\n\n\n//設置/獲取 窗口加速鍵\nvirtual void \tSetAcceleratorTable (const wxAcceleratorTable \u0026accel)\nwxAcceleratorTable * \tGetAcceleratorTable ()\n\n\n\n//設置/獲取 窗口背景色\nwxColour \tGetBackgroundColour () const\nvirtual bool \tSetBackgroundColour (const wxColour \u0026colour)\n\n//設置窗口背景色 不過不改變其子窗口 背景色\nvoid \tSetOwnBackgroundColour (const wxColour \u0026colour)\n\n//刷新窗口\nvoid \tRefreshRect (const wxRect \u0026rect, bool eraseBackground=true)\nvirtual void \tRefresh (bool eraseBackground=true, const wxRect *rect=NULL)\n\n//使用背景色 填充背景\nvirtual void \tClearBackground ()\n\n//設置/獲取背景類型\nvirtual wxBackgroundStyle \tGetBackgroundStyle () const\nvirtual bool \tSetBackgroundStyle (wxBackgroundStyle style)\n\t設置wxBG_STYLE_CUSTOM自己繪製背景\n\n\n\n\n//返回窗口大小 單位 像素\nwxSize \tGetBestSize () const\n\n//設置/返回 窗口 客戶區\nvoid \tSetClientSize (int width, int height)\nvoid \tSetClientSize (const wxSize \u0026size)\nvoid \tSetClientSize (const wxRect \u0026rect)\nvoid \tGetClientSize (int *width, int *height) const\nwxSize \tGetClientSize () const\n\n//設置/返回 窗口插入符\nwxCaret * \tGetCaret () const\nvoid \tSetCaret (wxCaret *caret)\n\n//設置/返回 窗口鼠標指針\nvirtual bool \tSetCursor (const wxCursor \u0026cursor)\nconst wxCursor \u0026 \tGetCursor () const\n\n\n\n//設置/返回 窗口關聯的 wxDropTarget對象\n//(wxDropTarget 用於控制 窗口拖放操作)\nvirtual void \tSetDropTarget (wxDropTarget *target)\nvirtual wxDropTarget * \tGetDropTarget () const\n\n\n\n\n//設置/返回 窗口關聯的 第一事件表\nvoid \tSetEventHandler (wxEvtHandler *handler)\nwxEvtHandler * \tGetEventHandler () const\n\n//壓入表\nvoid PushEventHandler( wxEvtHandler *handler );\n//彈出表\nvoid PopEventHandler( wxEvtHandler *handler );\n\n//返回下一個表\nwxEvtHandler* GetNextHandler()\n//返回上一個表\nwxEvtHandler* GetPreviousHandler()\n\n\n\n//設置/返回 窗口擴展 風格\nvirtual void \tSetExtraStyle (long exStyle)\nlong \tGetExtraStyle () const\n\n//設置/返回 窗口關聯字體\nvirtual bool \tSetFont (const wxFont \u0026font)\nwxFont \tGetFont () const\n\n//同 SetFont 不過 其子窗口 不會被設置\nvoid \tSetOwnFont (const wxFont \u0026font)\n\n//設置/返回 窗口前景色\nvirtual bool \tSetForegroundColour (const wxColour \u0026colour)\nwxColour \tGetForegroundColour () const\n\n//...\nvoid \tSetOwnForegroundColour (const wxColour \u0026colour)\n\n\n//返回/設置 關聯的上下文 幫助\nvoid \tSetHelpText (const wxString \u0026helpText)\nwxString \tGetHelpText () const\n\n//返回深圳 窗口 標識符\nwxWindowID \tGetId () const\nvoid \tSetId (wxWindowID winid)\n\n//返回窗口關聯的 label\nvirtual wxString \tGetLabel () const\n\n//返回/設置 窗口名(可不唯一) 僅在 Motif 系統用於出口資源名\nvirtual void \tSetName (const wxString \u0026name)\nvirtual wxString \tGetName () const\n\n//返回父窗口\nwxWindow * \tGetParent () const\n\n//返回窗口 相對父窗口坐標\nvoid \tGetPosition (int *x, int *y) const\n\n//返回窗口 大小 坐標\nwxRect \tGetRect () const\n\n//設置/返回 窗口大小\nvoid \tSetSize (int x, int y, int width, int height, int sizeFlags=wxSIZE_AUTO)\nvoid \tSetSize (const wxRect \u0026rect)\nvoid \tSetSize (const wxSize \u0026size)\nvoid \tSetSize (int width, int height)\nvoid \tGetSize (int *width, int *height) const\nwxSize \tGetSize () const\n\n//設置/返回 窗口佈局對象\nvoid \tSetSizer (wxSizer *sizer, bool deleteOld=true)\nwxSizer * \tGetSizer () const\n\n//返回當前 字體下 字符串 尺寸\nvoid \tGetTextExtent (const wxString \u0026string, int *w, int *h, int *descent=NULL, int *externalLeading=NULL, const wxFont *font=NULL) const\nwxSize \tGetTextExtent (const wxString \u0026string) const\n\n//返回/設置 wxToolTip對象\nwxToolTip * \tGetToolTip () const\nvoid \tSetToolTip (wxToolTip *tip)\n\n\u003cstrong\u003e//返回窗口 自上次 Paint事件以來需要 刷新的 區域\u003c/strong\u003e\nconst wxRegion \u0026 \tGetUpdateRegion () const\n\n\n\n\n//\nvirtual wxValidator * \tGetValidator ()\nvirtual void \tSetValidator (const wxValidator \u0026validator)\n\n\n\n//返回 窗口 虛擬大小\nwxSize \tGetVirtualSize () const\nvoid \tGetVirtualSize (int *width, int *height) const\n\n//設置/返回 窗口 風格\nlong \tGetWindowStyle () const\nvoid \tSetWindowStyle (long style)\n\n//發送一個 wxEVT_INIT_DIALOG  event 開始 對話框 數據傳送\nvirtual void \tInitDialog ()\n\n//返回窗口是否 可用\nbool \tIsEnabled () const\n\n//返回 區域/點 是否需要 重繪\nbool \tIsExposed (int x, int y) const\nbool \tIsExposed (wxPoint \u0026pt) const\nbool \tIsExposed (int x, int y, int w, int h) const\nbool \tIsExposed (wxRect \u0026rect) const\n\n//返回窗口 是否 可見\nvirtual bool \tIsShown () const\n\n//返回 窗口是否是 頂層窗口\nvirtual bool \tIsTopLevel () const\n\n//將窗口 移到 z 底部\nvirtual void \tLower ()\n\n//移動窗口\nvoid \tMove (int x, int y, int flags=wxSIZE_USE_EXISTING)\nvoid \tMove (const wxPoint \u0026pt, int flags=wxSIZE_USE_EXISTING)\n\n//更改tab順序到指定窗口之 後/前\nvoid \tMoveAfterInTabOrder (wxWindow *win)\nvoid \tMoveBeforeInTabOrder (wxWindow *win)\n\n//刷新 窗口\nvirtual void \tRefresh (bool eraseBackground=true, const wxRect *rect=NULL)\nvoid \tRefreshRect (const wxRect \u0026rect, bool eraseBackground=true)\n\n//獲取焦點\nvirtual void \tSetFocus ()\n\n//設置端口 內置滾動條 屬性\nvirtual void \tSetScrollbar (int orientation, int position, int thumbSize, int range, bool refresh=true)\n\n//調整 窗口 最大最小尺寸\nvirtual void \tSetSizeHints (const wxSize \u0026minSize, const wxSize \u0026maxSize=wxDefaultSize, const wxSize \u0026incSize=wxDefaultSize)\nvirtual void \tSetSizeHints (int minW, int minH, int maxW=-1, int maxH=-1, int incW=-1, int incH=-1)\n\n//顯示/隱藏 窗口\nvirtual bool \tShow (bool show=true)\n\n//同 Show(false)\nbool \tHide ()\n\n//獲取/設置 數據到窗口\nvirtual bool \tTransferDataFromWindow ()\nvirtual bool \tTransferDataToWindow ()\n\n//立刻 重繪 過去的 窗口區域\nvirtual void \tUpdate ()\n\n//發送 wxUpdateUIEvents event 到窗口 以便 更新窗口元素\nvirtual void \tUpdateWindowUI (long flags=wxUPDATE_UI_NONE)\n\n...\n\u003c/pre\u003e"