var __v="\n\u003cpre class='prettyprint linenums'\u003e// test_asio.cpp : 定义控制台应用程序的入口点。\n//\n\n#include \"stdafx.h\"\n//使用boost的 定時器 模擬異步操作\n\n#include \u0026lt;iostream\u0026gt;\n \n#include \u0026lt;boost/asio.hpp\u0026gt;\n#include \u0026lt;boost/thread.hpp\u0026gt;\n#include \u0026lt;boost/bind.hpp\u0026gt;\n#include \u0026lt;boost/asio/spawn.hpp\u0026gt;\n#include \u0026lt;boost/smart_ptr.hpp\u0026gt;\n#include \u0026lt;boost/typeof/typeof.hpp\u0026gt;\n\n//使用boost的 定時器 模擬異步操作\ntypedef boost::asio::deadline_timer deadline_timer_t;\ntypedef boost::shared_ptr\u0026lt;deadline_timer_t\u0026gt; deadline_timer_spt;\n#define ACTION_DURATION boost::posix_time::seconds(1)\n\n//協程函數 調用 asio 異步\nvoid coroutine(std::string name,deadline_timer_spt timer,boost::asio::yield_context ctx);\n\n//協程函數 調用 擴展的 自定義異步\nvoid coroutine(std::string name,boost::asio::yield_context ctx);\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\t//asio 服務\n\tboost::asio::io_service service;\n\n\t//創建定時器\n\tdeadline_timer_spt timer0 = boost::make_shared\u0026lt;deadline_timer_t\u0026gt;(service,ACTION_DURATION);\n    deadline_timer_spt timer1 = boost::make_shared\u0026lt;deadline_timer_t\u0026gt;(service,ACTION_DURATION);\n\n\t//向asio 請求 攜程\n\tboost::asio::spawn(service,boost::bind(coroutine,\"[one] \",timer0,_1));\n\tboost::asio::spawn(service,boost::bind(coroutine,\"[my] \",_1));\n\tboost::asio::spawn(service,boost::bind(coroutine,\"[two] \",timer1,_1));\n\n\t//運行 asio\n\tservice.run();\n\t\n\treturn 0;\n}\ntemplate\u0026lt;typename Handler\u0026gt;\nvoid _do_coro(Handler coro)\n{\n\tcoro();\n}\ntemplate\u0026lt;typename WaitHandler,typename Handler\u0026gt;\nvoid _do_async_wait(BOOST_ASIO_MOVE_ARG(WaitHandler) ctx,Handler coro)\n{\n\tboost::this_thread::sleep(ACTION_DURATION);\n\tctx.handler_.dispatcher_.dispatch(boost::bind(_do_coro\u0026lt;Handler\u0026gt;,coro));\n}\ntemplate \u0026lt;typename WaitHandler\u0026gt;\nvoid async_wait(BOOST_ASIO_MOVE_ARG(WaitHandler) handler)\n{\n    boost::asio::detail::async_result_init\u0026lt;decltype(handler), void (void)\u0026gt; init(handler);\n\ttypedef boost::asio::handler_type\u0026lt;decltype(handler), void (void)\u0026gt;::type handler_t;\n\t//需要傳入 init.handler 的副本\n\tboost::thread(boost::bind(_do_async_wait\u0026lt;WaitHandler,handler_t\u0026gt;,boost::ref(handler),init.handler));\n    return init.result.get();\n}\n\nvoid coroutine(std::string name,boost::asio::yield_context ctx)\n{\n    int x = 0;\n    std::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 0 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n    async_wait(ctx);\n\n    std::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 1 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n    async_wait(ctx);\n\n    std::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 2 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n    async_wait(ctx);\n\n}\n\nvoid coroutine(std::string name,deadline_timer_spt timer,boost::asio::yield_context ctx)\n{\n    boost::system::error_code e;\n    int x = 0;\n\n    //step 0\n    timer-\u0026gt;expires_from_now(ACTION_DURATION);\n    std::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 0 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n    timer-\u0026gt;async_wait(ctx[e]); //yield_context 重載了 [] 用於返回 異步返回值\n    if(e) //獲取返回值\n    {\n        std::cout\u0026lt;\u0026lt;e\u0026lt;\u0026lt;\"\\n\";\n    }\n\n    //step 1\n    std::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 1 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n    timer-\u0026gt;expires_from_now(ACTION_DURATION);\n    timer-\u0026gt;async_wait(ctx[e]);\n    if(e)\n    {\n        std::cout\u0026lt;\u0026lt;e\u0026lt;\u0026lt;\"\\n\";\n    }\n\n    //step 2\n    std::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 2 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n    timer-\u0026gt;expires_from_now(ACTION_DURATION);\n    timer-\u0026gt;async_wait(ctx[e]);\n    if(e)\n    {\n        std::cout\u0026lt;\u0026lt;e\u0026lt;\u0026lt;\"\\n\";\n    }\n}\u003c/pre\u003e"