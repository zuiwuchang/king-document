var __v="\n\u003cpre class='prettyprint linenums'\u003eint main()\n{\n\tIrrlichtDevice *device_ptr\t=\tcreateDevice(irr::video::EDT_DIRECT3D9\n\t\t,irr::core::dimension2d\u0026lt;u32\u0026gt;(640, 480)\n\t\t,16\n\t\t, false\n\t\t,true);\n\n\tif (device_ptr == 0)\n\t\treturn 1; \n\n\tirr::video::IVideoDriver* driver_ptr\t=\tdevice_ptr-\u0026gt;getVideoDriver();\n\tscene::ISceneManager* smgr_ptr\t\t\t=\tdevice_ptr-\u0026gt;getSceneManager();\n\n\t//加載場景\n\tscene::IAnimatedMesh* mesh_ptr = smgr_ptr-\u0026gt;getMesh(\"media/room.3ds\");\n\t//為場景創建一個 平面材質貼圖\n\tsmgr_ptr-\u0026gt;getMeshManipulator()-\u0026gt;makePlanarTextureMapping(mesh_ptr-\u0026gt;getMesh(0), 0.004f);\n\tscene::ISceneNode* node_ptr\t=\t0;\n\tnode_ptr\t=\tsmgr_ptr-\u0026gt;addAnimatedMeshSceneNode(mesh_ptr);\n\tnode_ptr-\u0026gt;setMaterialTexture(0, driver_ptr-\u0026gt;getTexture(\"media/wall.jpg\"));\n\tnode_ptr-\u0026gt;getMaterial(0).SpecularColor.set(0,0,0,0);\n\n\t//創建水面\n\tmesh_ptr = smgr_ptr-\u0026gt;addHillPlaneMesh( \"myHill\"\n\t\t,core::dimension2d\u0026lt;f32\u0026gt;(20,20)\n\t\t,core::dimension2d\u0026lt;f32\u0026gt;(40,40)\n\t\t,0\n\t\t,0\n\t\t,core::dimension2d\u0026lt;f32\u0026gt;(0,0)\n\t\t,core::dimension2d\u0026lt;f32\u0026gt;(10,10)\n\t\t);\n\n\tnode_ptr = smgr_ptr-\u0026gt;addWaterSurfaceSceneNode(mesh_ptr, 3.0f, 300.0f, 30.0f);\n\tnode_ptr-\u0026gt;setPosition(core::vector3df(0,7,0));\n\n\tnode_ptr-\u0026gt;setMaterialTexture(0, driver_ptr-\u0026gt;getTexture(\"media/stones.jpg\"));\n\tnode_ptr-\u0026gt;setMaterialTexture(1, driver_ptr-\u0026gt;getTexture(\"media/water.jpg\"));\n\n\tnode_ptr-\u0026gt;setMaterialType(video::EMT_REFLECTION_2_LAYER);\n\n\t//創建 移動點光源\n\tnode_ptr = smgr_ptr-\u0026gt;addLightSceneNode(0, core::vector3df(0,0,0),\n\t\tvideo::SColorf(1.0f, 0.6f, 0.7f, 1.0f)\n\t\t,800.0f);\n\tscene::ISceneNodeAnimator* anim_ptr\t=\tsmgr_ptr-\u0026gt;createFlyCircleAnimator (core::vector3df(0,150,0),250.0f);\n\tnode_ptr-\u0026gt;addAnimator(anim_ptr);\n\tanim_ptr-\u0026gt;drop();\n\n\t//將 廣告牌 綁定到 光源\n\tnode_ptr\t=\tsmgr_ptr-\u0026gt;addBillboardSceneNode(node_ptr, core::dimension2d(50, 50));\n\tnode_ptr-\u0026gt;setMaterialFlag(video::EMF_LIGHTING, false);\n\tnode_ptr-\u0026gt;setMaterialType(video::EMT_TRANSPARENT_ADD_COLOR);\n\tnode_ptr-\u0026gt;setMaterialTexture(0, driver_ptr-\u0026gt;getTexture(\"media/particlewhite.bmp\"));\n\n\n\n\t//加載模型\n\tmesh_ptr = smgr_ptr-\u0026gt;getMesh(\"media/dwarf.x\");\n\tscene::IAnimatedMeshSceneNode* anode_ptr\t=\tsmgr_ptr-\u0026gt;addAnimatedMeshSceneNode(mesh_ptr);\n\tanode_ptr-\u0026gt;setPosition(core::vector3df(-50,20,-60));\n\tanode_ptr-\u0026gt;setAnimationSpeed(15);\n\n\t//設置 動態陰影\n\tanode_ptr-\u0026gt;addShadowVolumeSceneNode(0,-1,true);\n\tsmgr_ptr-\u0026gt;setShadowColor(video::SColor(150,0,0,0));\n\n\t//縮放模型 並規範化 法向量\n\tanode_ptr-\u0026gt;setScale(core::vector3df(2,2,2));\n\tanode_ptr-\u0026gt;setMaterialFlag(video::EMF_NORMALIZE_NORMALS, true);\n\n\t//攝像機\n\tscene::ICameraSceneNode* camera = smgr_ptr-\u0026gt;addCameraSceneNodeFPS();\n\tcamera-\u0026gt;setPosition(core::vector3df(-50,50,-150));\n\tcamera-\u0026gt;setFarValue(10000.0f);\t\t//設置陰影可見範圍\n\n\tdevice_ptr-\u0026gt;getCursorControl()-\u0026gt;setVisible(false);\n\n\n\t//粒子系統\n\t//創建粒子系統\n\tscene::IParticleSystemSceneNode* ps =\tsmgr_ptr-\u0026gt;addParticleSystemSceneNode(false);\n\tps-\u0026gt;setPosition(core::vector3df(-70,60,40));\n\tps-\u0026gt;setScale(core::vector3df(2,2,2));\n\t\n\t//設置粒子材質\n\tps-\u0026gt;setMaterialFlag(video::EMF_LIGHTING, false);\n\tps-\u0026gt;setMaterialFlag(video::EMF_ZWRITE_ENABLE, false);\n\tps-\u0026gt;setMaterialTexture(0, driver_ptr-\u0026gt;getTexture(\"media/fire.bmp\"));\n\tps-\u0026gt;setMaterialType(video::EMT_TRANSPARENT_ADD_COLOR);\n\n\t//創建 粒子發生器\n\tscene::IParticleEmitter* em = ps-\u0026gt;createBoxEmitter(\n\t\tcore::aabbox3d(-7,0,-7,7,1,7), // emitter size\n\t\tcore::vector3df(0.0f,0.06f,0.0f),   // initial direction\n\t\t80,100,                             // emit rate\n\t\tvideo::SColor(0,255,255,255),       // darkest color\n\t\tvideo::SColor(0,255,255,255),       // brightest color\n\t\t800,2000,0,                         // min and max age, angle\n\t\tcore::dimension2df(10.f,10.f),         // min size\n\t\tcore::dimension2df(20.f,20.f));        // max size\n\n\tps-\u0026gt;setEmitter(em);\n\tem-\u0026gt;drop();\n\n\tscene::IParticleAffector* paf = ps-\u0026gt;createFadeOutParticleAffector();\n\n\tps-\u0026gt;addAffector(paf); // same goes for the affector\n\tpaf-\u0026gt;drop();\n\n\t\n\t//創建一個  自發光 場景節點\n\tscene::IVolumeLightSceneNode* n = smgr_ptr-\u0026gt;addVolumeLightSceneNode(0, -1,\n\t\t\t\t32,                              // Subdivisions on U axis\n\t\t\t\t32,                              // Subdivisions on V axis\n\t\t\t\tvideo::SColor(0, 255, 255, 255), // foot color\n\t\t\t\tvideo::SColor(0, 0, 0, 0));      // tail color\n\n\tif (n)\n\t{\n\t\tn-\u0026gt;setScale(core::vector3df(56.0f, 56.0f, 56.0f));\n\t\tn-\u0026gt;setPosition(core::vector3df(-120,50,40));\n\n\t\t//加載紋理\n\t\tcore::array\u0026lt;video::ITexture*\u0026gt; textures;\n\t\tfor (s32 g=4; g \u0026gt; 0; --g)\n\t\t{\n\t\t\tcore::stringc tmp;\n\t\t\ttmp = \"media/portal\";\n\t\t\ttmp += g;\n\t\t\ttmp += \".bmp\";\n\t\t\tvideo::ITexture* t = driver_ptr-\u0026gt;getTexture( tmp.c_str() );\n\t\t\ttextures.push_back(t);\n\t\t}\n\n\t\t//創建紋理動畫器 並關聯 場景節點\n\t\tscene::ISceneNodeAnimator* glow = smgr_ptr-\u0026gt;createTextureAnimator(textures, 150);\n\t\tn-\u0026gt;addAnimator(glow);\n\t\tglow-\u0026gt;drop();\n\t}\n\n\ts32 lastFPS = -1;\n\n\twhile(device_ptr-\u0026gt;run())\n\t{\n\t\tif (device_ptr-\u0026gt;isWindowActive())\n\t\t{\n\t\t\tdriver_ptr-\u0026gt;beginScene(true, true, 0);\n\n\t\t\tsmgr_ptr-\u0026gt;drawAll();\n\n\t\t\tdriver_ptr-\u0026gt;endScene();\n\n\t\t\tconst s32 fps = driver_ptr-\u0026gt;getFPS();\n\n\t\t\tif (lastFPS != fps)\n\t\t\t{\n\t\t\t\tcore::stringw str = L\"Irrlicht Engine - SpecialFX example [\";\n\t\t\t\tstr += driver_ptr-\u0026gt;getName();\n\t\t\t\tstr += \"] FPS:\";\n\t\t\t\tstr += fps;\n\n\t\t\t\tdevice_ptr-\u0026gt;setWindowCaption(str.c_str());\n\t\t\t\tlastFPS = fps;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdevice_ptr-\u0026gt;yield();\n\t\t}\n\t}\n\n\tdevice_ptr-\u0026gt;drop();\n\n\treturn 0;\n}\u003c/pre\u003e"