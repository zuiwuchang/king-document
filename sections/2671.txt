var __v="\n\u003cpre class='prettyprint linenums'\u003e\n#include \u0026lt;cstdio\u0026gt;\n\n#include \u0026lt;boost/asio.hpp\u0026gt;\n#include \u0026lt;boost/thread.hpp\u0026gt;\n#include \u0026lt;boost/bind.hpp\u0026gt;\n#include \u0026lt;boost/asio/deadline_timer.hpp\u0026gt;\n#include \u0026lt;boost/asio/spawn.hpp\u0026gt;\n#include \u0026lt;boost/smart_ptr.hpp\u0026gt;\n\n//使用boost的 定時器 模擬異步操作\ntypedef boost::asio::deadline_timer deadline_timer_t;\ntypedef boost::shared_ptr\u0026lt;deadline_timer_t\u0026gt; deadline_timer_spt;\n#define ACTION_DURATION boost::posix_time::seconds(1)\n\n//協程函數\nvoid coroutine(std::string name,deadline_timer_spt timer,boost::asio::yield_context ctx)\n{\n    boost::system::error_code e;\n    int x = 0;\n\n    //step 0\n    timer-\u0026gt;expires_from_now(ACTION_DURATION);\n    std::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 0 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n    timer-\u0026gt;async_wait(ctx[e]); //yield_context 重載了 [] 用於返回 異步返回值\n    if(e) //獲取返回值\n    {\n        std::cout\u0026lt;\u0026lt;e\u0026lt;\u0026lt;\"\\n\";\n    }\n\n    //step 1\n    std::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 1 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n    timer-\u0026gt;expires_from_now(ACTION_DURATION);\n    timer-\u0026gt;async_wait(ctx[e]);\n    if(e)\n    {\n        std::cout\u0026lt;\u0026lt;e\u0026lt;\u0026lt;\"\\n\";\n    }\n\n    //step 2\n    std::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 2 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n    timer-\u0026gt;expires_from_now(ACTION_DURATION);\n    timer-\u0026gt;async_wait(ctx[e]);\n    if(e)\n    {\n        std::cout\u0026lt;\u0026lt;e\u0026lt;\u0026lt;\"\\n\";\n    }\n}\n\n\ntemplate\u0026lt;typename Handler\u0026gt;\nint async_wait(Handler\u0026amp; handler)\n{\n    //創建 異步流程\n    boost::asio::detail::async_result_init\u0026lt;decltype(handler), void(int)\u0026gt; init(handler);\n\n    //異步操作\n    boost::thread t([\u0026amp;,coro = init.handler]()\n    {\n        //模擬異步耗時\n        boost::this_thread::sleep(ACTION_DURATION);\n\n        //想 service 請求 響應\n        handler.handler_.dispatcher_.dispatch(\n            [\u0026amp;, coro = std::move(coro)]() mutable\n        {\n            //喚醒等待 攜程 並傳回 返回值\n            coro(1);\n        });\n    });\n\n    //讓出cpu 並等待 異步返回值\n    return init.result.get();\n}\nvoid coroutine(std::string name,boost::asio::yield_context ctx)\n{\n    int x = 0;\n    std::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 0 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n    async_wait(ctx);\n\n    std::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 1 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n    async_wait(ctx);\n\n    std::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 2 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n    async_wait(ctx);\n\n}\nint main(int argc, char* argv[])\n{\n    boost::asio::io_service service;\n\n    //啓動兩個協程 在其中模擬 異步操作\n    deadline_timer_spt timer0 = boost::make_shared\u0026lt;deadline_timer_t\u0026gt;(service,ACTION_DURATION);\n    deadline_timer_spt timer1 = boost::make_shared\u0026lt;deadline_timer_t\u0026gt;(service,ACTION_DURATION);\n\n    //deadline_timer_spt timer = boost::make_shared\u0026lt;deadline_timer_t\u0026gt;(service,boost::posix_time::hours(1));\n    // timer-\u0026gt;async_wait([](const boost::system::error_code\u0026amp; e) {});\n\n\n    //  boost::asio::spawn(service,boost::bind(coroutine,\"[one] \",timer0,_1));\n    boost::asio::spawn(service,boost::bind(coroutine,\"[my] \",_1));\n    boost::asio::spawn(service,boost::bind(coroutine,\"[two] \",timer1,_1));\n\n    //運行asio服務\n    service.run();\n\n    return 0;\n}\n\u003c/pre\u003e"