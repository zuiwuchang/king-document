var __v="\u003cpre class=\"k-pre\"\u003e為了更高效的繪製一個網格 我們可以對網格中的 頂點 和 索引 重組 \n重組的過程 稱為網格優化\n\n使用\nHRESULT ID3DXMesh::OptimizeInplace(\n  [in]   DWORD Flags,\t\t\t//優化標記 標識了如何進行優化\n  [in]   const DWORD *pAdjacencyIn,\t//指向網格鄰接數組指針\n  [out]  DWORD *pAdjacencyOut,\t\t//NULL(不接受返回值) 返回DWORD數組 此為優化後的 網格鄰接數組\n  [out]  DWORD *pFaceRemap,\t\t//...\t返回DWORD數組 記錄了優化後 所以緩存值\n  [out]  LPD3DXBUFFER *ppVertexRemap\t//... 返回ID3DXMesh對象指針地址 其中保存了頂點的 重繪信息\n);\n優化網格\n\nFlags取值(D3DXMESHOPT_VERTEXCACHE D3DXMESHOPT_STRIPREORDER 不能同時存在)\nD3DXMESHOPT_COMPACT\t\t//從網格中移除 無用頂點 索引\nD3DXMESHOPT_ATTRSORT\t\t//依據屬性 對三角形單元排序 使DrawSubset繪製 更高效\nD3DXMESHOPT_VERTEXCACHE\t\t//提高頂點高速緩存的 命中率\nD3DXMESHOPT_STRIPREORDER\t//對索引重排 使三角形單元帶(strip) 盡可能長\nD3DXMESHOPT_IGNOREVERTS\t\t//僅對索引優化 忽略頂點\n\n//Optimize 同 OptimizeInplace 不過其將 優化後的網格 返回到ppOptMesh 而非改變原網格\nHRESULT ID3DXMesh::Optimize(\n  [in]       DWORD Flags,\n  [in]       const DWORD *pAdjacencyIn,\n  [in, out]  DWORD *pAdjacencyOut,\n  [in, out]  DWORD *pFaceRemap,\n  [out]      LPD3DXBUFFER *ppVertexRemap,\n  [out]      LPD3DXMESH *ppOptMesh\n);\n\u003c/pre\u003e"