var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;string\u0026gt;\n#include \u0026lt;cstdio\u0026gt;\n\nconst char arrays[] =   \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nstd::string encryption(const char* data,std::size_t size);\nstd::string encryption_loop(const char* data);\n\nstd::string decryption(std::string data);\nstd::string decryption_loop(const char* data);\nchar find_char(char c);\nint main()\n{\n    std::string str = \"BC\";\n\n    std::string en  =   encryption(str.data(),str.size());\n    std::string de = decryption(en);\n\n    std::cout \u0026lt;\u0026lt; str \u0026lt;\u0026lt; \"\\n\"\n              \u0026lt;\u0026lt; en \u0026lt;\u0026lt; \"\\n\"\n              \u0026lt;\u0026lt; de \u0026lt;\u0026lt; \"\\n\"\n              ;\n\n    return 0;\n}\nstd::string encryption(const char* data,std::size_t size)\n{\n    std::string rs;\n\n    std::size_t fill = size %3;\n    std::size_t left_size = size - fill;\n\n    for(std::size_t i=0; i\u0026lt;left_size; i+=3)\n    {\n        rs += encryption_loop(data + i);\n    }\n\n    if(fill == 1)\n    {\n        char buffer[3] = {0};\n        buffer[0]   =   data[left_size];\n        rs += encryption_loop(buffer).substr(0,2);\n        rs += \"==\";\n    }\n    else if(fill == 2)\n    {\n        char buffer[3] = {0};\n        buffer[0]   =   data[left_size];\n        buffer[1]   =   data[left_size + 1];\n        rs += encryption_loop(buffer).substr(0,3);\n        rs += \"=\";\n    }\n\n    return rs;\n}\nstd::string encryption_loop(const char* data)\n{\n    std::string rs;\n    char indexs[4] = {0};\n\n    indexs[0]   =   data[0] \u0026gt;\u0026gt; 2;\n    indexs[1]   =\t((data[0] \u0026amp; 0x3) \u0026lt;\u0026lt; 4 )  | (data[1] \u0026gt;\u0026gt; 4) ;\n    indexs[2]   =   ((data[1] \u0026amp; 0xF) \u0026lt;\u0026lt; 2) | (data[2] \u0026gt;\u0026gt; 6);\n    indexs [3]   =   data[2] \u0026amp; 0x3F;\n\n    for(int i=0; i\u0026lt;4; ++i)\n    {\n        rs.push_back(arrays[indexs[i]]);\n    }\n    return rs;\n}\nstd::string decryption(std::string data)\n{\n    std::string rs;\n    for(int i=0; i\u0026lt;data.size(); i+=4)\n    {\n        rs += decryption_loop(data.data() + i);\n    }\n    return rs;\n}\nstd::string decryption_loop(const char* data)\n{\n    std::string rs;\n    char indexs[4] = {find_char(data[0]),\n                      find_char(data[1]),\n                      find_char(data[2]),\n                      find_char(data[3])\n                     };\n    rs += (indexs[0] \u0026lt;\u0026lt; 2 ) | (indexs[1] \u0026gt;\u0026gt; 4 );\n    if(indexs[2]!=-1)\n    {\n        rs += (indexs[1] \u0026lt;\u0026lt; 4) | (indexs[2] \u0026gt;\u0026gt; 2);\n        if(indexs[3]!=-1)\n        {\n            rs += (indexs[2] \u0026lt;\u0026lt; 6) | (indexs[3] );\n        }\n    }\n    return rs;\n}\nchar find_char(char c)\n{\n    for(char i=0; i\u0026lt;sizeof(arrays) / sizeof(char); ++i)\n    {\n        if(arrays[i]==c)\n        {\n            return i;\n        }\n    }\n    return -1;\n}\u003c/pre\u003e"