var __v="\u003cpre class=\"k-pre\"\u003e在 vim中 執行 :GoInstallBinaries  \n將會自動 安裝 gocode godef ...工具到$GOBIN或$GOPATH/bin下 (需要先安裝 git或hg)\n\n安裝時需要 回車確認\n\n這些工具 都在 google code 或github上\n社會主義地區顯然 無法正常 安裝\n\n此時 需要 手動安裝 為成功安裝的工具\n\n\n\n此時多出如下功能\nctrl+x ctrl+o 將或出現代碼補全\n:GoImports\t自動導入需要的包\n\n - 新起一行输入fmt.，然后ctrl+x, ctrl+o，Vim 会弹出补齐提示下拉框，不过并非实时跟随的那种补齐，这个补齐是由gocode提供的。\n    – 输入一行代码：time.Sleep(time.Second)，执行:GoImports，Vim会自动导入time包。\n    – 将光标移到Sleep函数上，执行:GoDef或命令模式下敲入gd，Vim会打开$GOROOT/src/time/sleep.go中 的Sleep函数的定义。执行:b 1返回到hellogolang.go。\n    – 执行:GoLint，运行golint在当前Go源文件上。\n    – 执行:GoDoc，打开当前光标对应符号的Go文档。\n    – 执行:GoVet，在当前目录下运行go vet在当前Go源文件上。\n    – 执行:GoRun，编译运行当前main package。\n    – 执行:GoBuild，编译当前包，这取决于你的源文件，GoBuild不产生结果文件。\n    – 执行:GoInstall，安装当前包。\n    – 执行:GoTest，测试你当前路径下地_test.go文件。\n    – 执行:GoCoverage，创建一个测试覆盖结果文件，并打开浏览器展示当前包的情况。\n    – 执行:GoErrCheck，检查当前包种可能的未捕获的errors。\n    – 执行:GoFiles，显示当前包对应的源文件列表。\n    – 执行:GoDeps，显示当前包的依赖包列表。\n    – 执行:GoImplements，显示当前类型实现的interface列表。\n    – 执行:GoRename [to]，将当前光标下的符号替换为[to]。\n\u003c/pre\u003e"