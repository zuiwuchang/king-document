var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \"Driver.h\"\n\n#pragma INIT_MEMORY\nextern \"C\" NTSTATUS DriverEntry (IN PDRIVER_OBJECT pDriverObject,IN PUNICODE_STRING pRegistryPath\t) \n{\n\t\n\tKdPrint((\"DriverEntry begin\\n\"));\n\t\n\tNTSTATUS status;\n\n\t//注册设备卸载例程\n\tpDriverObject-\u0026gt;DriverUnload = UnloadDevice;\n\n\t////注册irp例程\n\tpDriverObject-\u0026gt;MajorFunction[IRP_MJ_CREATE] = DispatchRoutine;\n\tpDriverObject-\u0026gt;MajorFunction[IRP_MJ_CLOSE] = DispatchRoutine;\n\tpDriverObject-\u0026gt;MajorFunction[IRP_MJ_WRITE] = DispatchRoutine;\n\tpDriverObject-\u0026gt;MajorFunction[IRP_MJ_READ] = DispatchRoutine;\n\t\n\t//创建驱动设备对象\n\tstatus = CreateDevice(pDriverObject);\n\n\tKdPrint((\"DriverEntry end\\n\"));\n\treturn status;\n}\n\n\n#pragma INIT_MEMORY\nNTSTATUS CreateDevice (IN PDRIVER_OBJECT pDriverObject) \n{\n\tKdPrint((\"CreateDevice begin\\n\"));\n\n\tNTSTATUS status;\n\t//设备对象 指针\n\tPDEVICE_OBJECT pDevObj;\n\t//设备对象扩展结构 指针\n\tPDEVICE_EXTENSION pDevExt;\n\t\n\t//设备名称\n\tUNICODE_STRING devName;\n\tRtlInitUnicodeString(\u0026amp;devName,L\"\\\\Device\\\\MyDDKDevice\");\n\t\n\t//创建设备\n\tstatus = IoCreateDevice( pDriverObject,\t\t\t//驱动对象\n\t\t\t\t\t\tsizeof(DEVICE_EXTENSION),\t//设备扩展结构大小\n\t\t\t\t\t\t\u0026amp;(UNICODE_STRING)devName,\t//设备名 或 NULL\n\t\t\t\t\t\tFILE_DEVICE_UNKNOWN,\t\t//设备类型 FILE_DEVICE_UNKNOWN 未知虚拟设备  \n\t\t\t\t\t\t0, \t\t\t\t\t\t//附加属性\n\t\t\t\t\t\tTRUE,\t\t\t\t\t//是否独占(既只能被一个应用程序使用)\n\t\t\t\t\t\t\u0026amp;pDevObj );\t\t\t\t//设备地址 out\n\n\tif (!NT_SUCCESS(status))\n\t\treturn status;\n\n\t//以直接的方式读写(既不使用缓冲区)\n\tpDevObj-\u0026gt;Flags |= DO_DIRECT_IO;\n\n\t//填充扩展结构数据\n\tpDevExt = (PDEVICE_EXTENSION)pDevObj-\u0026gt;DeviceExtension;\n\tpDevExt-\u0026gt;pDevice = pDevObj;\n\tpDevExt-\u0026gt;ustrDeviceName = devName;\n\t\n\t//符号链接名\n\tUNICODE_STRING symLinkName;\n\tRtlInitUnicodeString(\u0026amp;symLinkName,L\"\\\\??\\\\HelloDDK\");\n\t\n\t//创建符号链接\n\tpDevExt-\u0026gt;ustrSymLinkName = symLinkName;\n\tstatus = IoCreateSymbolicLink( \u0026amp;symLinkName,\u0026amp;devName );\n\t\n\tif (!NT_SUCCESS(status)) \n\t{\n\t\tIoDeleteDevice( pDevObj );\n\t\treturn status;\n\t}\n\t\n\tKdPrint((\"CreateDevice sucess and end\\n\"));\n\treturn STATUS_SUCCESS;\n}\n\n\n\n#pragma PAGE_MEMORY\nVOID UnloadDevice (IN PDRIVER_OBJECT pDriverObject) \n{\n\tKdPrint((\"UnloadDevice begin\\n\"));\n\t\n\t//获取设备链表 加载的设备被自动保存在一个链表中\n\tPDEVICE_OBJECT\tpNextObj = pDriverObject-\u0026gt;DeviceObject;\n\t\n\t//遍历设备链表\n\twhile (pNextObj) \n\t{\n\t\t//获取设备扩展结构\n\t\tPDEVICE_EXTENSION pDevExt = (PDEVICE_EXTENSION)pNextObj-\u0026gt;DeviceExtension;\n\n\t\t//删除符号链接\n\t\tUNICODE_STRING pLinkName = pDevExt-\u0026gt;ustrSymLinkName;\n\t\tIoDeleteSymbolicLink(\u0026amp;pLinkName);\n\t\t\n\t\t//删除设备\n\t\tIoDeleteDevice(pNextObj);\n\n\t\t//指向链表下一节点\n\t\tpNextObj = pNextObj-\u0026gt;NextDevice;\n\t}\n\n\tKdPrint((\"UnloadDevice end\\n\"));\n}\n\n\n\n\n#pragma PAGE_MEMORY\nNTSTATUS DispatchRoutine(IN PDEVICE_OBJECT pDevObj,IN PIRP pIrp) \n{\n\tKdPrint((\"DispatchRoutine begin\\n\"));\n\t\n\t//...根据要实现的功能\n\t//...完成一些事情\n\t//...代码省略\n\n\tNTSTATUS status = STATUS_SUCCESS;\n\t//设置完成irp状态 是否成功等\n\tpIrp-\u0026gt;IoStatus.Status = status;\n\t//设置irp实际操作字节数\n\tpIrp-\u0026gt;IoStatus.Information = 0;\t// bytes xfered\n\t//指示完成此irp\n\tIoCompleteRequest( pIrp, IO_NO_INCREMENT );\n\t\n\tKdPrint((\"DispatchRoutine end\\n\"));\n\treturn status;\n}\u003c/pre\u003e"