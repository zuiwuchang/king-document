var __v="\u003cpre class='k-pre'\u003engSwitch 提供了 類似 switcg 語法\n\n其實 是 翻譯爲\nif(val == case xx){}\nif(val == case xx){}\nif(val == case xx){}\nif(val == case xx){}\ndefault{}\n\n故 如果有 default 則 default 一定會執行\n有多個 匹配 則多個 匹配 都會安 順序 執行 \n\u003c/pre\u003e\n\u003cpre class='prettyprint linenums'\u003eimport { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  name: string = \"kate\";\n  beauty: string = \"kate\";\n  constructor() {\n  }\n  ngOnInit() {\n  }\n  isSex(val){\n    if(val == \"kate\"){\n      // Angular 會自己 調用 此值 和 ngSwitch 值 比較\n      // 故 匹配時 需要返回 原值 而非 true\n      return val;\n    }\n\n    // Angular 會自己 調用 此值 和 ngSwitch 值 比較\n    // 故 不匹配 需要返回 和 原值 != 的 值\n    // 最好 返回 NaN 此值 不和任何值 相等 包括它自己\n    return NaN;\n  }\n}\n\u003c/pre\u003e\n\u003cpre class='prettyprint linenums'\u003e\u0026lt;ul [ngSwitch]=\"name\"\u0026gt;\n  \u0026lt;li *ngSwitchCase=\"'kate'\"\u0026gt;孤的最愛\u0026lt;/li\u0026gt;\n  \u0026lt;li *ngSwitchCase=\"'kate'\"\u0026gt;魅力無限\u0026lt;/li\u0026gt;\n  \u0026lt;li *ngSwitchCase=\"'kaili'\"\u0026gt;魅力無限\u0026lt;/li\u0026gt;\n  \u0026lt;li *ngSwitchCase=\"beauty\"\u0026gt;靚女\u0026lt;/li\u0026gt;\n  \u0026lt;li *ngSwitchCase=\"isSex(name)\"\u0026gt;性感\u0026lt;/li\u0026gt;\n  \u0026lt;li *ngSwitchDefault\u0026gt;其她\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u0026lt;input type=\"text\" [(ngModel)]=\"beauty\"\u0026gt;\u003c/pre\u003e"