var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;boost/tuple/tuple.hpp\u0026gt;\n#include \u0026lt;boost/tuple/tuple_comparison.hpp\u0026gt;\n#include \u0026lt;boost/tuple/tuple_io.hpp\u0026gt;\n\n\n//遞歸tuple\ntemplate\u0026lt;typename T\u0026gt;\nvoid display_tuple(const T\u0026amp; t)\n{\n\tstd::cout\u0026lt;\u0026lt;t.get_head()\u0026lt;\u0026lt;std::endl;\n\tdisplay_tuple(t.get_tail());\n}\n//特化 null_type 以結束遞歸\nvoid display_tuple(const boost::tuples::null_type\u0026amp;)\n{\n\n}\nint _tmain(int argc, _TCHAR* argv[])\n{\n\t//構造\n\tboost::tuple\u0026lt;int,int\u0026gt; t1,t2;\n\tint i\t=\t0;\n\tboost::tuple\u0026lt;int\u0026amp;\u0026gt; t3(i);\n\t//i\t=\t1\n\tt3.get\u0026lt;0\u0026gt;()\t=\t1;\n\n\t//比較\n\tt1\t=\tboost::make_tuple(1,2);\n\tassert(t1\t!=\tt2);\n\t\n\t//io流 輸出 \n\t//(1 2)\n\tstd::cout\u0026lt;\u0026lt;t1\u0026lt;\u0026lt;std::endl;\n\t\n\t//改變流 輸出 輸入模式\n\tstd::cout\u0026lt;\u0026lt;boost::tuples::set_open('[')\n\t\t\u0026lt;\u0026lt;boost::tuples::set_delimiter(',')\n\t\t\u0026lt;\u0026lt;boost::tuples::set_close(']');\n\t//[1,2]\n\tstd::cout\u0026lt;\u0026lt;t1\u0026lt;\u0026lt;std::endl;\n\t\n\t//連接變量 i =10\n\tboost::tie(i,boost::tuples::ignore)\t=\tstd::make_pair(10,2);\n\t\n\t//遞歸tuple    \n\tdisplay_tuple(t1);\n\n\tstd::system(\"pause\");\n\treturn 0;\n}\u003c/pre\u003e"