var __v="\u003cpre class='k-pre'\u003e創建 \u003cstrong\u003epb/pb.proto \u003c/strong\u003e\nprotoc -I pb --cpp_out=pb pb/pb.proto\nprotoc -I pb --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` --grpc_out=pb pb/pb.proto\n(\n\tprotoc-gen-grpc 後面是 插件的 全路徑 此處用 linux的 which 自動尋找\n\t如果在 sb的 windows 平臺下 只有手動 寫全路徑\n\tprotoc -I pb --plugin=protoc-gen-grpc=\u003cstrong\u003ec:/grp/grpc_cpp_plugin\u003c/strong\u003e --grpc_out=pb pb/pb.proto\n\n\t\u003cstrong\u003ewindows msys2\u003c/strong\u003e\n\u003cpre class='prettyprint linenums'\u003e#!/bin/bash\n\nexport GrpcCppPlugin=`which grpc_cpp_plugin`.exe\n\nprotoc -I pb --cpp_out=pb pb/pb.proto\nprotoc -I pb --plugin=protoc-gen-grpc=$GrpcCppPlugin --grpc_out=pb pb/pb.proto\u003c/pre\u003e)\n\u003c/pre\u003e\n\u003cpre class='prettyprint linenums'\u003esyntax = \"proto3\";\n\npackage pb;\n\n// 以 service 標記定義一個 服務\nservice TestServer {\n\t//以 rpc 定義 方法\n\trpc Say(SayRequest) returns (SayReply) {}\n}\n \n/***\t定義 proto3 數據 \t***/\nmessage SayRequest {\n\tstring Name = 1;\n\tstring Text = 2;\n}\nmessage SayReply{\n\tstring\tText = 1;\n}\n\u003c/pre\u003e"