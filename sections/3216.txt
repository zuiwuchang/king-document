var __v="\n\u003cpre class='prettyprint linenums'\u003e//定義一個 解壓接口\nstd::shared_ptr\u0026lt;APE::IAPEDecompress\u0026gt; pAPEDecompress;\ntry\n{\n\tint err_code;\n\t\n\tpAPEDecompress=std::shared_ptr\u0026lt;APE::IAPEDecompress\u0026gt;(CreateIAPEDecompress(L\"爱是没余地.ape\",\u0026amp;err_code));\n\tif(!pAPEDecompress.get())\n\t{\n\t\tthrow dark::debug::wexception(L\"無法解析文件\",err_code);\n\t}\n\n\t\n\t//返回解壓後塊大小\n\tint nTotalBlocks = pAPEDecompress-\u0026gt;GetInfo(APE::APE_DECOMPRESS_TOTAL_BLOCKS);\n\t//返回數據塊對齊大小\n\tint nBlockAlign = pAPEDecompress-\u0026gt;GetInfo(APE::APE_INFO_BLOCK_ALIGN);\n\t//nTotalBlocks*nBlockAlign 為解壓後數據大小\n\n\t//臨時緩衝區存儲解壓數據\n\tboost::shared_array\u0026lt;char\u0026gt; pBuffer (new char [1024 * nBlockAlign]);\n\n\tstd::ofstream fstream(\"a.wav\",std::ios::binary|std::ios::out);\n\n\n\tint nBlocksRetrieved = 1;\n\tint nTotalBlocksRetrieved = 0;\n\t\t\n\twhile (nBlocksRetrieved \u0026gt; 0)\n\t{\n\t\t//解壓數據塊\n        //pAPEDecompress-\u0026gt;Seek(nRandomBlock) 可以設置解壓位置 \n\t\tif(pAPEDecompress-\u0026gt;GetData( pBuffer.get()\t\t//存儲數據緩衝區\n\t\t\t, 1024\t\t\t\t\t\t\t\t\t\t//要讀取多少數據塊\n\t\t\t, \u0026amp;nBlocksRetrieved\t\t\t\t\t\t\t//返回讀取了多少塊 \u0026lt;=0 解壓完成\n\t\t\t))\n\t\t{\n\t\t\tthrow dark::debug::wexception(L\"解壓錯誤\");\n\t\t}\n\t\t//nBlocksRetrieved * nBlockAlign 為解壓字節\n\t\tfstream.write(pBuffer.get(),nBlocksRetrieved * nBlockAlign);\n\t\t\n\t\t//計算解壓總塊數\n\t\tnTotalBlocksRetrieved += nBlocksRetrieved;\n\t\t//輸出解壓百分比\n\t\tprintf(\"Progress: %.1f%%          \\r\", (float(nTotalBlocksRetrieved) * float(100)) / float(max(nTotalBlocks, 1.0)));\t\n\t}\n\n\tfstream.close();\n\n}\ncatch(const dark::debug::wexception\u0026amp; e)\n{\n\tstd::wcout\u0026lt;\u0026lt;e.what()\u0026lt;\u0026lt;std::endl;\n}\u003c/pre\u003e"