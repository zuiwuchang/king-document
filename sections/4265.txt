var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;cassert\u0026gt;\n#include \u0026lt;libplatform/libplatform.h\u0026gt;\n#include \u0026lt;v8.h\u0026gt;\nvoid test_isolate();\nvoid test_run(v8::Isolate* isolate);\nv8::Local\u0026lt;v8::Context\u0026gt; create_context(v8::Isolate* isolate);\nint main(int argc, char* argv[])\n{\n    //初始化 V8 綁定數據\n    assert(v8::V8::InitializeICUDefaultLocation(argv[0]));\n    v8::V8::InitializeExternalStartupData(argv[0]);\n\n    //初始化 platform\n    std::unique_ptr\u0026lt;v8::Platform\u0026gt;  platform(v8::platform::CreateDefaultPlatform());\n    assert(platform);\n    v8::V8::InitializePlatform(platform.get());\n    {\n        //初始化 v8\n        assert(v8::V8::Initialize());\n        {\n            test_isolate();\n        }\n        //停止 釋放 v8 資源\n        //一旦釋放 v8 v8 將不能再被重新 初始化\n        assert(v8::V8::Dispose());\n    }\n    //釋放 platform 資源\n    v8::V8::ShutdownPlatform();\n\n    return 0;\n}\nvoid test_isolate()\n{\n    //創建 一個 隔離的 js 環境\n    v8::Isolate::CreateParams create_params;\n    std::unique_ptr\u0026lt;v8::ArrayBuffer::Allocator\u0026gt; allocator(v8::ArrayBuffer::Allocator::NewDefaultAllocator());\n    create_params.array_buffer_allocator = allocator.get();\n    v8::Isolate* isolate = v8::Isolate::New(create_params);\n    assert(isolate);\n    {\n        test_run(isolate);\n    }\n    //釋放 隔離環境\n    //注意 不能使用 delete\n    //Dispose 函數 會在 釋放資源後 自動 delete\n    isolate-\u0026gt;Dispose();\n}\n\nvoid test_run(v8::Isolate* isolate)\n{\n    //創建一個 本地 執行 的 隔離環境\n    v8::Isolate::Scope isolate_scope(isolate);\n    //創建一個 本地 句柄 管理 環境\n    v8::HandleScope handle_scope(isolate);\n    {\n        //創建 js 執行上下文\n        v8::Local\u0026lt;v8::Context\u0026gt; context = create_context(isolate);\n        //Context::Enter()\n        v8::Context::Scope context_scope(context);\n        {\n            //加載 js 源碼\n            v8::Local\u0026lt;v8::String\u0026gt; source = v8::String::NewFromUtf8(isolate,\n                                           R\"(\n            Print(\"v8\",Version);\n            var x = 1;\n            var y = 2;\n            Print(x,\" + \",y,\" = \",Sum(x,y));\n            try{\n            \tAnimal(\"cat\",10);\n            }catch(e){\n            \tPrint(e);\n            }\n\n            var a = new Animal(\"cat\",10);\n            a.Speak();\n            a=null;\n            )\",\n                                           v8::NewStringType::kNormal\n                                                                  ).ToLocalChecked();\n            //編譯 js 源碼\n            v8::Local\u0026lt;v8::Script\u0026gt; script = v8::Script::Compile(context, source).ToLocalChecked();\n            //運行 js\n            script-\u0026gt;Run(context).ToLocalChecked();\n\n        }//Context::Exit()\n    }\n}\nconst char* ToCString(const v8::String::Utf8Value\u0026amp; value)\n{\n    return *value ? *value : \"\u0026lt;string conversion failed\u0026gt;\";\n}\nvoid native_Print(const v8::FunctionCallbackInfo\u0026lt;v8::Value\u0026gt;\u0026amp; args)\n{\n    bool first = true;\n    for (int i = 0; i \u0026lt; args.Length(); i++)\n    {\n        v8::HandleScope handle_scope(args.GetIsolate());\n        if (first)\n        {\n            first = false;\n        }\n        else\n        {\n            printf(\" \");\n        }\n        v8::String::Utf8Value str(args.GetIsolate(), args[i]);\n        const char* cstr = ToCString(str);\n        printf(\"%s\", cstr);\n    }\n    printf(\"\\n\");\n    fflush(stdout);\n}\n\nvoid native_Sum(const v8::FunctionCallbackInfo\u0026lt;v8::Value\u0026gt;\u0026amp; args)\n{\n    double sum = 0;\n    for (int i = 0; i \u0026lt; args.Length(); i++)\n    {\n        if(args[i]-\u0026gt;IsNumber())\n        {\n            sum += args[i]-\u0026gt;NumberValue();\n        }\n    }\n    //設置返回值\n    args.GetReturnValue().Set(sum);\n}\n\nclass animal_t\n{\nprivate:\n    std::string _name;\n    int _lv;\npublic:\n    animal_t(const char* name,int lv)\n        :_name(name),_lv(lv)\n    {\n    }\n    ~animal_t()\n    {\n        std::cout\u0026lt;\u0026lt;_name\u0026lt;\u0026lt;\" die\\n\";\n    }\npublic:\n    void set_name(const char* name)\n    {\n        _name = name;\n    }\n    void speak()\n    {\n        std::cout\u0026lt;\u0026lt;\"i'm \"\u0026lt;\u0026lt;_name\u0026lt;\u0026lt;\" , lv = \"\u0026lt;\u0026lt;_lv\u0026lt;\u0026lt;\"\\n\";\n    }\n    int lv()const\n    {\n        return _lv;\n    }\n};\nusing namespace v8;\n\ntemplate\u0026lt;class T\u0026gt;\nvoid destroyer(const v8::WeakCallbackInfo\u0026lt;T\u0026gt; \u0026amp;data)\n{\n\tputs(\"***************** delete\");\n    auto p = data.GetParameter();\n    p-\u0026gt;second-\u0026gt;Reset();\n    delete p-\u0026gt;first;\n    delete p;\n}\nvoid native_Animal(const v8::FunctionCallbackInfo\u0026lt;v8::Value\u0026gt;\u0026amp; args)\n{\n    v8::Isolate* isolate = args.GetIsolate();\n    v8::HandleScope handle_scope(isolate);\n\n    //驗證 new\n    if (!args.IsConstructCall())\n    {\n        isolate-\u0026gt;ThrowException(v8::String::NewFromUtf8(\n                                    isolate,\n                                    \"bad Construct call\",\n                                    v8::NewStringType::kNormal\n                                ).ToLocalChecked()\n                               );\n        return;\n    }\n    //驗證 參數\n    if(args.Length() \u0026lt; 2 ||\n            !args[0]-\u0026gt;IsString() ||\n            !args[1]-\u0026gt;IsUint32()\n      )\n    {\n        isolate-\u0026gt;ThrowException(v8::String::NewFromUtf8(\n                                    isolate,\n                                    \"bad Construct args\",\n                                    v8::NewStringType::kNormal\n                                ).ToLocalChecked()\n                               );\n        return;\n    }\n    v8::String::Utf8Value name(isolate, args[0]);\n    int lv = (args[1]-\u0026gt;Uint32Value());\n\n    //創建 class 實例\n    v8::Local\u0026lt;v8::Object\u0026gt; object = args.This();\n    animal_t* instance = new animal_t(ToCString(name),lv);\n    v8::Local\u0026lt;v8::External\u0026gt; external = v8::External::New(isolate,instance);\n\n    //設置 析構 回調\n    v8::Persistent\u0026lt;v8::Object\u0026gt; persistent(isolate, object);\n    persistent.SetWeak(instance,\n\t\t\t\t\t[](const v8::WeakCallbackInfo\u0026lt;animal_t\u0026gt; \u0026amp;data){\n\t\t\t\t\tputs(\"123456789\");\n\t\t\t\t\t},\n\t\t\t\t\tv8::WeakCallbackType::kFinalizer\n\t\t\t\t\t);\n/*\n     v8::Persistent\u0026lt;v8::Object\u0026gt;* holder = new v8::Persistent\u0026lt;v8::Object\u0026gt;(isolate, object);\n\ttypedef std::pair\u0026lt;animal_t*, v8::Persistent\u0026lt;v8::Object\u0026gt; *\u0026gt; Destroyer;\n    holder-\u0026gt;SetWeak(new Destroyer(instance,holder),\n\t\t\t\t\tdestroyer\u0026lt;Destroyer\u0026gt;,\n\t\t\t\t\tv8::WeakCallbackType::kFinalizer\n\t\t\t\t\t);\n   /*UniquePersistent\u0026lt;Object\u0026gt; persistent(isolate, object);\n    persistent.SetWeak(nullptr, [](v8::WeakCallbackData\u0026lt;v8::Object, int\u0026gt; data)\n    {\n        Local\u0026lt;Object\u0026gt; val = data.GetValue();\n        int* ptr = retinterpret_cast\u0026lt;int*\u0026gt;(val-\u0026gt;GetAlignedPointerFromINternalField(0));\n        delete ptr;\n        fprintf(stdout, \"Deleted internal object!\\n\");\n    });\n    persistent.Reset();*/\n    //Persistent\u0026lt;Object\u0026gt; a;\n    //a.SetWeak()\n    object-\u0026gt;SetInternalField(0,external);\n    return;\n}\nv8::Local\u0026lt;v8::Context\u0026gt; create_context(v8::Isolate* isolate)\n{\n    //擴展 js\n    v8::Local\u0026lt;v8::ObjectTemplate\u0026gt; global = v8::ObjectTemplate::New(isolate);\n    //增加 變量\n    global-\u0026gt;Set(isolate,\n                \"Version\",\n                v8::String::NewFromUtf8(\n                    isolate,\n                    v8::V8::GetVersion(),\n                    v8::NewStringType::kNormal\n                ).ToLocalChecked()\n               );\n    //增加函數\n    global-\u0026gt;Set(isolate,\n                \"Print\",\n                v8::FunctionTemplate::New(isolate,native_Print)\n               );\n    global-\u0026gt;Set(isolate,\n                \"Sum\",\n                v8::FunctionTemplate::New(isolate,native_Sum)\n               );\n\n    //增加 類\n    v8::Handle\u0026lt;v8::FunctionTemplate\u0026gt; animal_template = v8::FunctionTemplate::New(isolate,native_Animal);\n    animal_template-\u0026gt;SetClassName(v8::String::NewFromUtf8(\n                                      isolate,\n                                      \"Animal\",\n                                      v8::NewStringType::kNormal\n                                  ).ToLocalChecked());\n    {\n        //爲 類 定義 屬性 模板 實例\n        v8::Handle\u0026lt;v8::ObjectTemplate\u0026gt; animal_prototype = animal_template-\u0026gt;InstanceTemplate();\n        animal_prototype-\u0026gt;SetInternalFieldCount(1);\n\n        //設置 屬性 模板\n        animal_prototype = animal_template-\u0026gt;PrototypeTemplate();\n        animal_prototype-\u0026gt;Set(isolate,\n                              \"Speak\",\n                              v8::FunctionTemplate::New(isolate,[](const v8::FunctionCallbackInfo\u0026lt;v8::Value\u0026gt;\u0026amp; args)\n        {\n            v8::Isolate* isolate = args.GetIsolate();\n            v8::HandleScope handle_scope(isolate);\n\n            v8::Local\u0026lt;v8::Object\u0026gt; self = args.Holder();\n            v8::Local\u0026lt;v8::External\u0026gt; wrap = v8::Local\u0026lt;v8::External\u0026gt;::Cast(self-\u0026gt;GetInternalField(0));\n\n            animal_t* a = (animal_t*)(wrap-\u0026gt;Value());\n            a-\u0026gt;speak();\n        })\n                             );\n        // ...\n    }\n    global-\u0026gt;Set(isolate,\n                \"Animal\",\n                animal_template\n               );\n\n    return v8::Context::New(isolate,nullptr,global);\n}\n\u003c/pre\u003e"