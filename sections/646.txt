var __v="\u003cpre class=\"prettyprint linenums\"\u003e#include \"duktape.h\"\n#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;cassert\u0026gt;\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\t//初始化一個默認的 js 執行環境\n\tduk_context* ctx = duk_create_heap_default();\n\t//duk_context* ctx = duk_create_heap(NULL, NULL, NULL, NULL, NULL);\n\tassert(ctx);\n\t{\n\t\t//執行js\n\t\tif(0 != duk_peval_string(ctx, \"var x=2;var y=3;function add (l,r) {print(l+r)}\")){\n\t\t\tprintf(\"eval failed: %s\\n\", duk_safe_to_string(ctx, -1));\n\t\t}\n\t\telse{\n\t\t\t//入栈 js 全局对象\n\t\t\tduk_push_global_object(ctx);\n\t\t\t//在指定 index 栈对象 中 查找 指定属性 并且入栈(不存在 入栈undefined)\n\t\t\tduk_get_prop_string(ctx, -1 /*index*/, \"add\");\n\t\t\tduk_get_prop_string(ctx, -2 , \"x\");\n\t\t\tduk_get_prop_string(ctx, -3 , \"y\");\n\n\t\t\t//打印当前栈情况\n\t\t\tduk_dump_context_stdout(ctx);\n\n\t\t\t//调用函数\n\t\t\tif(duk_pcall(ctx,2)){\n\t\t\t\tprintf(\"error: %s\\n\", duk_to_string(ctx, -1));\n\t\t\t}\n\t\t\t//js所有函数 都有返回值 不定义 返回 undefined\n\t\t\tduk_dump_context_stdout(ctx);\n\t\t\tduk_pop(ctx);\n\n\t\t\t//pop global_object\n\t\t\tduk_pop(ctx);\n\t\t}\n\t\tduk_pop(ctx);\n\t}\n\t//釋放 js 環境\n\tduk_destroy_heap(ctx);\n\n\tstd::system(\"pause\");\n\treturn 0;\n}\u003c/pre\u003e"