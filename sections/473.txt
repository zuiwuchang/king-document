var __v="\n\u003cpre class='prettyprint linenums'\u003epackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc sayhelloName(w http.ResponseWriter, r *http.Request) {\n\tr.ParseForm()       //解析参数，默认是不会解析的\n\tfmt.Println(r.Form) //这些信息是输出到服务器端的打印信息\n\tfmt.Println(\"path\", r.URL.Path)\n\tfmt.Println(\"scheme\", r.URL.Scheme)\n\tfmt.Println(r.Form[\"url_long\"])\n\tfor k, v := range r.Form {\n\t\tfmt.Println(\"key:\", k)\n\t\tfmt.Println(\"val:\", strings.Join(v, \"\"))\n\t}\n\tfmt.Fprintf(w, \"Hello astaxie!\") //这个写入到w的是输出到客户端的\n}\n\nfunc main() {\n\t//增加靜態路由\n\thttp.HandleFunc(\"/static/\", func(w http.ResponseWriter, r *http.Request) {\n\t\thttp.ServeFile(w, r, r.URL.Path[1:])\n\t})\n\n\thttp.HandleFunc(\"/\", sayhelloName)       //设置访问的路由\n\terr := http.ListenAndServe(\":9090\", nil) //设置监听的端口\n\tif err != nil {\n\t\tlog.Fatal(\"ListenAndServe: \", err)\n\t}\n}\n\u003c/pre\u003e"