var __v="\u003cpre class=\"k-pre\"\u003e\u003cstrong\u003emain.go\u003c/strong\u003e\u003cpre class='prettyprint linenums'\u003epackage main\n\nimport (\n\t\"cerberus/net/email\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tuser := \"zuiwuchang_0@163.com\"\n\tpassword := \"***\"\n\t//host := \"smtp.163.com:25\"\n\thost := \"smtp.163.com:465\"\n\tto := \"zuiwuchang@hotmail.com;zuiwuchang@gmail.com\"\n\n\tsubject := \"Test send email by golang\"\n\n\tbody := `\n\t    \u0026lt;html\u0026gt;\n\t    \u0026lt;body\u0026gt;\n\t    \u0026lt;h3\u0026gt;\n\t    \"Test send email by golang\"\n\t    \u0026lt;/h3\u0026gt;\n\t    \u0026lt;/body\u0026gt;\n\t    \u0026lt;/html\u0026gt;\n\t    `\n\t//err := email.SendEmail(user, password, host, to, subject, body, email.MAIL_TYPE_HTML)\n\terr := email.SendEmailSSL(user, password, host, to, subject, body, email.MAIL_TYPE_HTML)\n\n\t//_, err := email.TestSmtpSSL(user, password, host)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(\"success!\")\n\t}\n\n}\u003c/pre\u003e\n\u003cstrong\u003ecerberus/net/email/email.go\u003c/strong\u003e\u003cpre class='prettyprint linenums'\u003epackage email\n\nimport (\n\t\"crypto/tls\"\n\t\"net\"\n\t\"net/smtp\"\n\t\"strings\"\n)\n\nconst MAIL_TYPE_HTML = \"html\"\n\nfunc createMsg(user, to, subject, body, mailtype string) []byte {\n\tcontent_type := \"Content-Type: text/\" + mailtype + \"; charset=UTF-8\"\n\tmsg := []byte(\"To: \" + to +\n\t\t\"\\r\\nFrom: \" + user + \"\u0026lt;\" + user +\n\t\t\"\u0026gt;\\r\\nSubject: \" + subject + \"\\r\\n\" +\n\t\tcontent_type + \"\\r\\n\\r\\n\" +\n\t\tbody)\n\treturn msg\n}\nfunc SendEmail(user, password, host, to, subject, body, mailtype string) error {\n\t//分解 host\n\tdns, _, _ := net.SplitHostPort(host)\n\tauth := smtp.PlainAuth(\"\", user, password, dns)\n\n\t//構造文本\n\tmsg := createMsg(user, to, subject, body, mailtype)\n\n\t//分解 收信人\n\tsend_to := strings.Split(to, \";\")\n\n\t//發送\n\treturn smtp.SendMail(host, auth, user, send_to, msg)\n}\n\nfunc SendEmailSSL(user, password, host, to, subject, body, mailtype string) error {\n\t// 分解 dns port\n\tdns, _, _ := net.SplitHostPort(host)\n\n\tauth := smtp.PlainAuth(\"\", user, password, dns)\n\n\t// TLS config\n\ttlsconfig := \u0026amp;tls.Config{\n\t\tInsecureSkipVerify: true,\n\t\tServerName:         dns,\n\t}\n\n\t// Here is the key, you need to call tls.Dial instead of smtp.Dial\n\t// for smtp servers running on 465 that require an ssl connection\n\t// from the very beginning (no starttls)\n\tconn, err := tls.Dial(\"tcp\", host, tlsconfig)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tc, err := smtp.NewClient(conn, dns)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Auth\n\tif err = c.Auth(auth); err != nil {\n\t\treturn err\n\t}\n\n\t// To \u0026amp;\u0026amp; From\n\tif err = c.Mail(user); err != nil {\n\t\treturn err\n\t}\n\n\t//設置 收信 地址\n\tsend_tos := strings.Split(to, \";\")\n\tfor _, send_to := range send_tos {\n\t\t/*if err = c.Rcpt(send_to); err != nil {\n\t\t\treturn err\n\t\t}*/\n\t\tc.Rcpt(send_to)\n\t}\n\n\t// Data\n\tw, err := c.Data()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t//構造文本\n\tmsg := createMsg(user, to, subject, body, mailtype)\n\t_, err = w.Write(msg)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = w.Close()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tc.Quit()\n\n\treturn nil\n}\nfunc TestSmtpSSL(user, password, host string) (ok bool, err error) {\n\t// Connect to the SMTP Server\n\tdns, _, _ := net.SplitHostPort(host)\n\n\tauth := smtp.PlainAuth(\"\", user, password, dns)\n\n\t// TLS config\n\ttlsconfig := \u0026amp;tls.Config{\n\t\tInsecureSkipVerify: true,\n\t\tServerName:         dns,\n\t}\n\n\t// Here is the key, you need to call tls.Dial instead of smtp.Dial\n\t// for smtp servers running on 465 that require an ssl connection\n\t// from the very beginning (no starttls)\n\tconn, err := tls.Dial(\"tcp\", host, tlsconfig)\n\tif err != nil {\n\t\treturn\n\t}\n\tvar c *smtp.Client\n\tc, err = smtp.NewClient(conn, dns)\n\tif err != nil {\n\t\treturn\n\t}\n\n\t// Auth\n\tif err = c.Auth(auth); err != nil {\n\t\treturn\n\t}\n\tok = true\n\treturn\n}\u003c/pre\u003e\u003c/pre\u003e"