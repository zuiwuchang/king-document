var __v="\n\u003cpre class='prettyprint linenums'\u003e//自己hook位置\nULONG anti_tp_ntopenprocess_hook;\n//內核原call的地址\nULONG anti_tp_ntopenprocess_call;\n//自定義函數 返回內核位置\nULONG anti_tp_ntopenprocess_jump;\n//執行TP call 地址\nULONG anti_tp_ntopenprocess_call_hook;\n\n#pragma PAGE_MEMORY\nBOOLEAN __stdcall IsAntiTpCall()\n{\n\tPEPROCESS eProcess=PsGetCurrentProcess();\n\tWCHAR name[MAX_PATH]={0};\n\tGetProcessName(name,sizeof(name),eProcess);\n\t\n\t//調試器名字\n\tif(!wcscmp(name,L\"OllyICE1.1-2.exe\"))\n\t{\n\t\tKdPrint((\"OllyICE1.1-2.exe\\n\"));\n\t\treturn TRUE;\n\t}\n\n\treturn FALSE;\n}\n__declspec(naked)\n#pragma LOCKED_MEMORY\nVOID AntiTpNtOpenProcessCode()\n{\n\t__asm\n\t{\n\t\tpush eax;\n\t\tpushfd;\n\t\t\n\t\tcall IsAntiTpCall;\n\t\tcmp al,0;\n\t\tje ANTI_TP;\t//如果不是調試器調用  轉到TP的hook代碼執行\n\n\t\t//繞過TP\n\t\tpopfd;\n\t\tpop eax;\n\n\t\t//自己原內核代碼\n\t\tpush eax;\n\t\tpush dword ptr [ebp-0xF4];\n\t\tpush dword ptr [ebp-0xF0];\n\t\tcall anti_tp_ntopenprocess_call;\n\t\tjmp anti_tp_ntopenprocess_jump;\n\nANTI_TP:\n\t\tpopfd\n\t\tpop eax;\n\n\t\t//執行 TP hook 代碼\n\t\tpush eax;\n\t\tpush dword ptr [ebp-0xF4];\n\t\tpush dword ptr [ebp-0xF0];\n\t\tjmp anti_tp_ntopenprocess_call_hook;\n\t}\n}\n\n#pragma PAGE_MEMORY\nVOID HookInlineNtOpenProcess()\n{\n\t//獲取NtOpenProcess 地址\n\tanti_tp_ntopenprocess_jump=GetCurSsdtFunctionAddr(0xBE);\n\tanti_tp_ntopenprocess_jump+=0x29;\n\t//KdPrint((\"call 0x%08X\\n\",anti_tp_ntopenprocess_jump));\n\t__asm\n\t{\n\t\tpush eax;\n\t\tpush ebx;\n\n\t\tmov eax,anti_tp_ntopenprocess_jump;\n\t\txor ebx,ebx;\n\t\tmov ebx,[eax];\n\t\tadd ebx,0x4;\n\t\tadd ebx,eax;\n\t\t\n\t\t//tp anti hook call ; push eax\n\t\tadd ebx,0x220;\n\t\tmov anti_tp_ntopenprocess_hook,ebx;\n\t\t\n\t\t//原 call 地址\n\t\tadd ebx,0xE;\n\t\txor eax,eax;\n\t\tmov eax,[ebx];\n\t\tadd eax,0x4;\n\t\tadd eax,ebx;\n\t\tmov anti_tp_ntopenprocess_call,eax;\n\t\t\n\t\t//anti anti jump\n\t\tadd ebx,0x4;\n\t\tmov anti_tp_ntopenprocess_jump,ebx;\n\n\n\t\t//hook\n\t\t//去除页面保护\n\t\tcli;\n\t\t\tmov eax,cr0;\n\t\t\tand eax,not 10000h; //and eax,0FFFEFFFFh\n\t\t\tmov cr0,eax;\n\t\t\n\t\txor eax,eax;\n\t\tmov eax,anti_tp_ntopenprocess_hook;\n\t\tmov BYTE ptr [eax],0xE9;\n\t\tinc eax;\n\t\txor ebx,ebx;\n\t\tmov ebx,AntiTpNtOpenProcessCode;\n\t\tsub ebx,eax;\n\t\tsub ebx,4;\n\t\tmov [eax],ebx;\n\n\t\t//恢复页面保户\n\t\tcli;\n\t\t\tmov eax,cr0;\n\t\t\tor eax,10000h; \n\t\t\tmov cr0,eax ;\n\t\t\tsti;\n\n\t\tpop ebx;\n\t\tpop eax;\n\t}\n\tanti_tp_ntopenprocess_call_hook=anti_tp_ntopenprocess_jump-5;\n\tKdPrint((\"anti_tp_ntopenprocess_hook 0x%08X\\n\",anti_tp_ntopenprocess_hook));\n\tKdPrint((\"anti_tp_ntopenprocess_call 0x%08X\\n\",anti_tp_ntopenprocess_call));\n\tKdPrint((\"anti_tp_ntopenprocess_jump 0x%08X\\n\",anti_tp_ntopenprocess_jump));\n\tKdPrint((\"anti_tp_ntopenprocess_call_hook 0x%08X\\n\",anti_tp_ntopenprocess_call_hook));\n\n\t//CHAR code[8]={0};\n\t\n}\n#pragma PAGE_MEMORY\nVOID UnhookInlineNtOpenProcess()\n{\n\t__asm\n\t{\n\t\tpush eax;\n\t\tpush ebx;\n\n\t\t//去除页面保护\n\t\tcli;\n\t\t\tmov eax,cr0;\n\t\t\tand eax,not 10000h; //and eax,0FFFEFFFFh\n\t\t\tmov cr0,eax;\n\n\t\tmov eax,anti_tp_ntopenprocess_hook;\n\t\n\t\t//50 ff b5 0c\n\t\txor ebx,ebx;\n\t\tmov ebx,0x0CB5FF50;\n\t\tmov [eax],ebx;\n\t\t\n\t\tadd eax,4;\n\t\t\n\t\t//ff ff ff ff\n\t\txor ebx,ebx;\n\t\tmov ebx,0xFFFFFFFF;\n\t\tmov [eax],ebx;\n\n\t\t//恢复页面保户\n\t\tcli;\n\t\t\tmov eax,cr0;\n\t\t\tor eax,10000h; \n\t\t\tmov cr0,eax ;\n\t\t\tsti;\n\n\t\tpop ebx;\n\t\tpop eax;\n\t}\n}\u003c/pre\u003e"