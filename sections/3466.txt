var __v="\u003cpre class=\"k-pre\"\u003e//變化 繪製目標\nvoid ID2D1RenderTarget::SetTransform(\n  [ref]  const D2D1_MATRIX_3X2_F \u0026amp;transform\t\n);\n\n//變化圖形\nvirtual HRESULT CreateTransformedGeometry(\n  [in]            ID2D1Geometry *sourceGeometry,\t\t//圖形接口\n  [in, optional]  const D2D1_MATRIX_3X2_F *transform,\t//變換矩陣\n  [out]           ID2D1TransformedGeometry **transformedGeometry\t//輸出變換後的圖形接口\n) = 0;\n\n\n//創建2D平移矩陣\nstatic Matrix3x2F Translation(\n    FLOAT x,\n    FLOAT y\n);\nstatic Matrix3x2F Translation(\n    D2D1_SIZE_F size\n);\n\n//創建2D縮放矩陣\nstatic Matrix3x2F Scale(\n    FLOAT x,\t\t//x軸縮放比例 1(原始大小) 2(2倍) ...\n    FLOAT y,\n    D2D1_POINT_2F centerPoint = D2D1::Point2F()\n);\nstatic Matrix3x2F Scale(\n    D2D1_SIZE_F size,\n    D2D1_POINT_2F centerPoint = D2D1::Point2F()\n);\n\n//創建2D旋轉矩陣\nstatic Matrix3x2F Rotation(\n    FLOAT angle,\t//旋轉角度\n    D2D1_POINT_2F centerPoint = D2D1::Point2F()\t//旋轉 點\n);\n\n//創建傾斜矩陣\nstatic Matrix3x2F Skew(\n    FLOAT angleX,\t//x軸傾斜角度  逆時針\n    FLOAT angleY,\t//y軸傾斜角度  順時針\n    D2D1_POINT_2F centerPoint = D2D1::Point2F()\t//傾斜點\n);\n\u003c/pre\u003e"