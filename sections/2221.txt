var __v="\u003cpre class=\"k-pre\"\u003e//比較 true false\nEXPECT_TRUE(1);\nEXPECT_FALSE(false);\n\n//使用 運算符 比較\nEXPECT_EQ(1,1);\t\t//==\nEXPECT_NE(1,10);\t//!=\nEXPECT_LT(1,2);\t\t//\u0026lt;\nEXPECT_LE(1,2);\t\t//\u0026lt;=\nEXPECT_GT(2,1);\t\t//\u0026gt;\nEXPECT_GE(2,1);\t\t//\u0026gt;=\n\n//c 字符串 比較\nEXPECT_STREQ(\"1\",\"1\");\t\t//==\nEXPECT_STRNE(\"1\",\"2\");\t\t//!=\nEXPECT_STRCASEEQ(\"a\",\"A\");\t//忽略大小寫 ==\nEXPECT_STRCASENE(\"a\",\"B\");\t//忽略大小寫 !=\n\t\u003cstrong\u003e字符串 比較 支持 char* 和 wchar_t*\u003c/strong\u003e\n\n//成功 失敗 標記\nSUCCEED();\nFAIL();\t\t//設置出錯標記 並使 函數 返回 ASSERT 版本\nADD_FAILURE();\t//同FAIL 只是 EXPEC 版本\n\n//異常檢測\nEXPECT_THROW(throw std::exception(\"test\"),std::exception);\t//將會拋出指定異常\nEXPECT_ANY_THROW(throw 1);\t\t\t\t\t//將會拋出任意異常\nEXPECT_NO_THROW(true);\t\t\t\t\t\t//沒有異常拋出\n\u003c/pre\u003e"