var __v="\u003cpre class='k-pre'\u003e\u003cstrong\u003eproviders: [BeautyService],\u003c/strong\u003e 其實是\n\u003cstrong\u003eproviders: [{\n    provide:BeautyService,\n    useClass:BeautyService,\n  }],\u003c/strong\u003e的 語法糖\n\n其中 provide 向 注入器 註冊了 一個 id \u003cstrong\u003eBeautyService\u003c/strong\u003e\n當依賴 此 id 時 就使用 useClass 指定的 類 創建一個單例 並返回給 消費者\n\n故 完全可以實現一個 含有相同 接口的 Beauty1Service\n並 註冊\n\u003cstrong\u003eproviders: [{\n    provide:BeautyService,\n    useClass:Beauty1Service,\n  }],\u003c/strong\u003e\n則 依賴 BeautyService 實際上 得到的服務 卻是 Beauty1Service\n\u003c/pre\u003e\n\n\u003cpre class='prettyprint linenums'\u003eimport { Component, OnInit } from '@angular/core';\nimport { Beauty, BeautyService } from '../data/beauty.service'\nimport {  Beauty1Service } from '../data/beauty1.service'\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n  providers: [{\n    provide:BeautyService,\n    useClass:Beauty1Service,\n  }],\n})\nexport class HomeComponent implements OnInit {\n  beautys: Beauty[];\n  val: string;\n  constructor(private beautyService: BeautyService) {\n  }\n\n  ngOnInit() {\n    this.beautys = this.beautyService.get();\n  }\n\n  onAdd() {\n    this.beautyService.put(this.val);\n  }\n}\n\u003c/pre\u003e"