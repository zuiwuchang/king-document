var __v="\u003cpre class=\"k-pre\"\u003eucontext 是 glibc 中的一個 組件 實現了 跨平台的 線程 環境 操作\n#include \u0026lt;ucontext.h\u0026gt;\n\n//ucontext_t 是運行 環境\n//對於 不同平台 其成員可能不同 然其下幾個 成員 在所有平台都存在\ntypedef struct  XXX {\n\tstruct __ucontext\t*uc_link;\n\tstack_t\t\tuc_stack;\n\tmcontext_t\tuc_mcontext; \n\t__sigset_t\tuc_sigmask;\n\t...\n} ucontext_t;\n\n//返回 執行環境 存儲到 ucp中\n//創建成功 返回 0\nint getcontext(ucontext_t *ucp);\n\n//設置 執行環境\n//失敗 返回 -1 \n//成功不會有 返回值 因為cpu 已經切換到其它地方執行\nint setcontext (const ucontext_t *ucp)\n\n//將執行環境 切換到 ucp 並將當前 環境 保存到 oucp中\n//失敗返回 -1\n//成功返回 0\nint swapcontext (ucontext_t * oucp, const ucontext_t * ucp)\n\n//創建 執行環境 並將其 保存 到ucp中\n//f是一個 自定義無參 函數\n//argc 是 f需要的 參數數量\n//... 是 傳給f的 參數\nvoid makecontext (ucontext_t *ucp, void (*func) (void) f, int argc, …)\n\u003c/pre\u003e"