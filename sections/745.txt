var __v="\u003cdiv class=\"hs-doc-content\"\u003e\u003cp\u003e\u003cscript type=\"text/javascript\" src=\"build/js/messenger.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\u003cp\u003e\u003cscript type=\"text/javascript\" src=\"build/js/messenger-theme-future.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\u003cp\u003e\u003clink rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"build/css/messenger.css\"\u003e\u003c/p\u003e\n\u003clink rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"build/css/messenger-theme-future.css\"\u003e\n\n\u003ch1 id=\"messenger\"\u003eMessenger\u003c/h1\u003e\n\u003ch4 id=\"-demo-and-usage-http-hubspot-github-com-messenger-docs-welcome-\"\u003e\u003ca href=\"http://hubspot.github.com/messenger/docs/welcome\"\u003eDemo and Usage\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eShow messages in your app.\u003c/li\u003e\n\u003cli\u003eWrap AJAX requests with progress, success and error messages, and add retry to your failed requests.\u003c/li\u003e\n\u003cli\u003eAdd actions (undo, cancel, etc.) to your messages.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMessenger is different from other solutions for a few reasons:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEach message can be updated after being posted without losing it's place\u003c/li\u003e\n\u003cli\u003eActions and events can be bound to messages\u003c/li\u003e\n\u003cli\u003eIt's completely themeable with CSS\u003c/li\u003e\n\u003cli\u003eA 'tray' element exists to allow you to style the box around the messages, and limit the number\nof messages on the screen\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"messenger-object\"\u003eMessenger Object\u003c/h3\u003e\n\u003cp\u003eMessenger is accessed through a global \u003ccode\u003eMessenger\u003c/code\u003e object.  The object is called at each usage to give\nit a chance to instantiate if necessary.\u003c/p\u003e\n\u003cp\u003eThe most basic usage is to post a message:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-javascript\"\u003eMessenger().post({ options })\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOptions can be a string representing the body of the message:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-javascript\"\u003eMessenger().post(\u003cspan class=\"string\"\u003e\"Welcome to the darkside (tm)\"\u003c/span\u003e)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt can also be an object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-javascript\"\u003eMessenger().post({\n  message: \u003cspan class=\"string\"\u003e\"How's it going?\"\u003c/span\u003e,\n  type: \u003cspan class=\"string\"\u003e\"error\"\u003c/span\u003e\n})\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe full list of options:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emessage\u003c/code\u003e: The text of the message\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etype\u003c/code\u003e: \u003ccode\u003einfo\u003c/code\u003e, \u003ccode\u003eerror\u003c/code\u003e or \u003ccode\u003esuccess\u003c/code\u003e are understood by the provided themes. You can also pass your\nown string, and that class will be added.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etheme\u003c/code\u003e: What theme class should be applied to the message? Defaults to the theme set for Messenger in\ngeneral.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eid\u003c/code\u003e: A unique id.  If supplied, only one message with that ID will be shown at a time.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esingleton\u003c/code\u003e: Hide the newer message if there is an \u003ccode\u003eid\u003c/code\u003e collision, as opposed to the older message.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eactions\u003c/code\u003e: Action links to put in the message, see the 'Actions' section on this page.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehideAfter\u003c/code\u003e: Hide the message after the provided number of seconds\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehideOnNavigate\u003c/code\u003e: Hide the message if Backbone client-side navigation occurs\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eshowCloseButton\u003c/code\u003e: Should a close button be added to the message?\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecloseButtonText\u003c/code\u003e: Specify the text the close button should use (default Ã—)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMessenger also includes aliases which set the \u003ccode\u003etype\u003c/code\u003e for you: \u003ccode\u003eMessenger().error()\u003c/code\u003e, \u003ccode\u003eMessenger().success()\u003c/code\u003e, and \u003ccode\u003emessenger().info()\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"updating-messages\"\u003eUpdating Messages\u003c/h3\u003e\n\u003cp\u003eRather than posting a new message when progress occurs, it can be nice to update an existing message.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e.post\u003c/code\u003e, along with the other message posting methods, provide a \u003ccode\u003eMessage\u003c/code\u003e instance which has the\nfollowing methods:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eshow()\u003c/code\u003e: Show the message, if it's hidden\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehide()\u003c/code\u003e: Hide the message, if it's shown\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecancel()\u003c/code\u003e: If the message is associated with an ajax request or is counting down to retry, cancel it\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eupdate({ options })\u003c/code\u003e: Update the message with the provided options\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAny option, such as \u003ccode\u003etype\u003c/code\u003e or \u003ccode\u003emessage\u003c/code\u003e can be changed with \u003ccode\u003eupdate\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-javascript\"\u003emessage = Messenger().post(\u003cspan class=\"string\"\u003e\"Calculating position\"\u003c/span\u003e)\nmessage.update({\n  type: \u003cspan class=\"string\"\u003e\"error\"\u003c/span\u003e,\n  message: \u003cspan class=\"string\"\u003e\"Error calculating position\"\u003c/span\u003e\n})\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"messenger-object\"\u003eMessenger Object\u003c/h3\u003e\n\u003cp\u003eWhen \u003ccode\u003eMessenger\u003c/code\u003e is called, it creates, if necessary, a container for future messages to be placed into.\n\u003ccode\u003eMessenger\u003c/code\u003e can be passed options to configure the container when it's first called, future calls will\nalter the existing container.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMessenger\u003c/code\u003e options:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eextraClasses\u003c/code\u003e: Extra classes to be appended to the container.  These can be used to configure the active theme.\nIf you'd like the messenger box to be overlayed on the screen, you should provide the \u003ccode\u003emessenger-fixed\u003c/code\u003e class along with any of\nthe following positioning classes: \u003ccode\u003emessenger-on-bottom\u003c/code\u003e, \u003ccode\u003emessenger-on-top\u003c/code\u003e, \u003ccode\u003emessenger-on-left\u003c/code\u003e, \u003ccode\u003emessenger-on-right\u003c/code\u003e.\nAdding the \u003ccode\u003etop\u003c/code\u003e or \u003ccode\u003ebottom\u003c/code\u003e class along with a \u003ccode\u003eleft\u003c/code\u003e or \u003ccode\u003eright\u003c/code\u003e will move the messenger dialog into the specified corner.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emaxMessages\u003c/code\u003e: The maximum number of messages to show at once\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eparentLocations\u003c/code\u003e: Which locations should be tried when inserting the message container into the page.  The default is \u003ccode\u003e['body']\u003c/code\u003e.\nIt accepts a list to allow you to try a variety of places when deciding what the optimal location is on any given page.  This should\ngenerally not need to be changed unless you are inserting the messages into the flow of the document, rather than using \u003ccode\u003emessenger-fixed\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etheme\u003c/code\u003e: What theme are you using? Some themes have associated javascript, specifing this allows that js to run.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emessageDefaults\u003c/code\u003e: Default options for created messages\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"lang-javascript\"\u003eMessenger({\n  parentLocations: [\u003cspan class=\"string\"\u003e'.page'\u003c/span\u003e], \u003cspan class=\"comment\"\u003e// Let's insert it into the page\u003c/span\u003e\n  extraClasses: \u003cspan class=\"string\"\u003e''\u003c/span\u003e            \u003cspan class=\"comment\"\u003e// And not add the fixed classes\u003c/span\u003e\n})\n\n\u003cspan class=\"comment\"\u003e// Future calls just need to refer to Messenger(), they'll get the same instance\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"lang-javascript\"\u003eMessenger({\n  \u003cspan class=\"comment\"\u003e// Let's put the messenger in the top left corner\u003c/span\u003e\n  extraClasses: \u003cspan class=\"string\"\u003e'messenger-fixed messenger-on-left messenger-on-top'\u003c/span\u003e\n});\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe object provided by \u003ccode\u003eMessenger()\u003c/code\u003e also has a couple of additional methods:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ehideAll\u003c/code\u003e: Hide all messages\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erun\u003c/code\u003e: See 'Running Things' below\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eajax\u003c/code\u003e: See 'Running Things' below\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexpectPromise\u003c/code\u003e: See 'Running Things' below\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehookBackboneAjax\u003c/code\u003e: See Backbone below\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"running-things\"\u003eRunning Things\u003c/h3\u003e\n\u003cp\u003eOne of the most common use cases for messenger is to show the progress and success or error of an asynchronous action, like an ajax request.\nMessenger includes a method to help with that, \u003ccode\u003erun\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003erun({ messageOptions }, { actionOptions })\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003emessageOptions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eaction\u003c/code\u003e: The function which should be passed \u003ccode\u003eactionOptions\u003c/code\u003e.  \u003ccode\u003esuccess\u003c/code\u003e and \u003ccode\u003eerror\u003c/code\u003e callbacks will be added to \u003ccode\u003eactionOptions\u003c/code\u003e\nand used to show the appropriate messages.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esuccessMessage\u003c/code\u003e: What message should be shown if the action is a success?  Can be a string, or false if no message should be shown.  Can also\nbe a function returning a string, message options object, or false.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eerrorMessage\u003c/code\u003e: Same as success message, but shown after the \u003ccode\u003eerror\u003c/code\u003e callback is called.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprogressMessage\u003c/code\u003e: A message to be shown while the action is underway, or false.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eshowSuccessWithoutError\u003c/code\u003e: Set to false if you only want the success message to be shown if the success comes after a failure\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eignoredErrorCodes\u003c/code\u003e: By default the error handler looks for \u003ccode\u003exhr.status\u003c/code\u003e, assuming the action is $.ajax.  If it is, this can be set to an\narray of HTTP status codes which should \u003cem\u003enot\u003c/em\u003e be considered an error.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereturnsPromise\u003c/code\u003e: If true, instead of wrapping the \u003ccode\u003esuccess\u003c/code\u003e and \u003ccode\u003eerror\u003c/code\u003e callbacks passed to \u003ccode\u003eaction\u003c/code\u003e, we expect \u003ccode\u003eaction\u003c/code\u003e to return to\nus a promise, and use that to show the appropriate messages.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eretry\u003c/code\u003e: Set to false to not have the action retried if it fails.  Or set it to an object with the following options:\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eallow\u003c/code\u003e: Should we show a manual 'Retry' button?\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eauto\u003c/code\u003e: Should we automatically start the retry timer after a failure?\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eAny other message options\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYour success and error handlers can return false if they don't wish the message to be shown.  They can also return a string to change the\nmessage, or an object to change more message options.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-javascript\"\u003eMessenger().run({\n  action: $.ajax,\n\n  successMessage: \u003cspan class=\"string\"\u003e'Contact saved'\u003c/span\u003e,\n  errorMessage: \u003cspan class=\"string\"\u003e'Error saving contact'\u003c/span\u003e,\n  progressMessage: \u003cspan class=\"string\"\u003e'Saving contact...'\u003c/span\u003e\n}, {\n  \u003cspan class=\"comment\"\u003e/* These options are provided to $.ajax, with success and error wrapped */\u003c/span\u003e\n  url: \u003cspan class=\"string\"\u003e'/contact'\u003c/span\u003e,\n  data: contact,\n\n  error: \u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e(resp){\n    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (resp.status === \u003cspan class=\"number\"\u003e409\u003c/span\u003e)\n      \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"string\"\u003e\"A contact with that email already exists\"\u003c/span\u003e;\n  }\n});\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe also provide a couple of aliases:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMessenger().ajax({ messageOptions }, { actionOptions })\u003c/code\u003e:  Call \u003ccode\u003erun\u003c/code\u003e with \u003ccode\u003e$.ajax\u003c/code\u003e as the action (which is already the default).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMessenger().expectPromise(action, { messageOptions })\u003c/code\u003e: Call \u003ccode\u003erun\u003c/code\u003e with a function which returns a promise, so actionOptions aren't necessary.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"lang-javascript\"\u003eMessenger().expectPromise(\u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e(){\n  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e $.ajax({\n    url: \u003cspan class=\"string\"\u003e'/aliens/44'\u003c/span\u003e,\n    type: \u003cspan class=\"string\"\u003e'DELETE'\u003c/span\u003e\n  });\n}, {\n  successMessage: \u003cspan class=\"string\"\u003e'Alien Destroyed!'\u003c/span\u003e,\n  progressMessage: \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e\n});\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll three methods return a \u003ccode\u003eMessage\u003c/code\u003e instance.  You can call \u003ccode\u003emessage.cancel()\u003c/code\u003e to stop the retrying, if necessary.\u003c/p\u003e\n\u003ch3 id=\"actions\"\u003eActions\u003c/h3\u003e\n\u003cp\u003eYou can pass messages a hash of actions the user can execute on the message.  For example, \u003ccode\u003erun\u003c/code\u003e will add 'Retry' and 'Cancel'\nbuttons to error messages which have retry enabled.\u003c/p\u003e\n\u003cp\u003eActions are provided as the \u003ccode\u003eactions\u003c/code\u003e hash to \u003ccode\u003epost\u003c/code\u003e or \u003ccode\u003erun\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-javascript\"\u003emsg = Messenger().post({\n  message: \u003cspan class=\"string\"\u003e\"Are you sure you'd like to delete this contact?\"\u003c/span\u003e,\n\n  actions: {\n    \u003cspan class=\"keyword\"\u003edelete\u003c/span\u003e: {\n      label: \u003cspan class=\"string\"\u003e\"Delete\"\u003c/span\u003e,\n      action: \u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e(){\n        \u003cspan class=\"keyword\"\u003edelete\u003c/span\u003e()\n        msg.hide()\n      }\n    },\n\n    cancel: {\n      action: \u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e(){\n        msg.hide()\n      }\n    }\n  }\n})\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"events\"\u003eEvents\u003c/h3\u003e\n\u003cp\u003eYou can add DOM event handlers to the message itself, or any element within it.  For example, you might wish to do\nsomething when the user clicks on the message.\u003c/p\u003e\n\u003cp\u003eThe format of the event key is: \"\u003ccode\u003e[type] event [selector]\u003c/code\u003e\"\u003c/p\u003e\n\u003cp\u003eType is a message type, like \u003ccode\u003esuccess\u003c/code\u003e, \u003ccode\u003eerror\u003c/code\u003e, or \u003ccode\u003einfo\u003c/code\u003e, or skip to ignore the type.  It's useful with \u003ccode\u003erun\u003c/code\u003e where\nthe same options are getting applied to the \u003ccode\u003esuccess\u003c/code\u003e and \u003ccode\u003eerror\u003c/code\u003e messages.\nEvent is the DOM event to bind to.\nSelector is any jQuery selector, or skip to bind to the message element itsef.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-javascript\"\u003eMessenger().post({\n  message: \u003cspan class=\"string\"\u003e\"Click me to explode!\"\u003c/span\u003e,\n\n  events: {\n    \u003cspan class=\"string\"\u003e\"click\"\u003c/span\u003e: \u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e(e){\n      explode();\n    },\n    \u003cspan class=\"string\"\u003e\"hover a.button\"\u003c/span\u003e: \u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e(e){\n      e.stopPropagation();\n    }\n  }\n});\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"backbone-js\"\u003eBackbone.js\u003c/h3\u003e\n\u003cp\u003eMessenger includes a function to hook into Backbone.js' sync method.  To enable it, call \u003ccode\u003eMessenger().hookBackboneAjax({ defaultOptions })\u003c/code\u003e\nbefore making any Backbone requests (but after bringing in the Backbone.js js file).\u003c/p\u003e\n\u003cp\u003eYou can pass it any default message options you would like to apply to your requests.  You can also set those options as \u003ccode\u003emessenger\u003c/code\u003e in\nyour save and fetch calls.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-javascript\"\u003eMessenger().hookBackboneAjax({\n  errorMessage: \u003cspan class=\"string\"\u003e'Error syncing with the server'\u003c/span\u003e,\n  retry: \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e\n});\n\n\u003cspan class=\"comment\"\u003e// Later on:\u003c/span\u003e\nmyModel.save({\n  errorMessage: \u003cspan class=\"string\"\u003e'Error saving contact'\u003c/span\u003e\n});\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"classes\"\u003eClasses\u003c/h3\u003e\n\u003cp\u003eEach message can have the following classes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emessenger-hidden\u003c/code\u003e (message): Applied when a message is hidden\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emessenger-will-hide-after\u003c/code\u003e (message): Applied if the \u003ccode\u003ehideAfter\u003c/code\u003e option is not false\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emessenger-will-hide-on-navigate\u003c/code\u003e (message): Applied if the \u003ccode\u003ehideOnNavigate\u003c/code\u003e option is not false\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emessenger-clickable\u003c/code\u003e (message): Applied if a 'click' event is included in the events hash\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emessenger-message\u003c/code\u003e (message): Applied to all messages\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emessenger-{type}\u003c/code\u003e (message): Applied based on the message's \u003ccode\u003etype\u003c/code\u003e (usually 'success', 'error', or 'info')\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emessage\u003c/code\u003e, \u003ccode\u003ealert\u003c/code\u003e, \u003ccode\u003ealert-{type}\u003c/code\u003e (message): Added for compatiblity with external CSS\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emessenger-retry-soon\u003c/code\u003e (message): Added when the next retry will occur in less than or equal to 10s\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emessenger-retry-later\u003c/code\u003e (message): Added when the next retry will occur in greater than 10s (usually 5min)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEvery message lives in a slot, which is a li in the list of all the messages which have been created:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emessenger-first\u003c/code\u003e (slot): Added when this slot is the first shown slot in the list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emessenger-last\u003c/code\u003e (slot): Added when this slot is the last shown slot in the list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emessenger-shown\u003c/code\u003e (slot): Added when this slot is visible\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAll the slots are in a tray element:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emessenger-empty\u003c/code\u003e (tray): Added when there are no visible messages\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emessenger-theme-{theme}\u003c/code\u003e (tray): Added based on the passed in \u003ccode\u003etheme\u003c/code\u003e option\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"multiple-messenger-trays\"\u003eMultiple Messenger Trays\u003c/h3\u003e\n\u003cp\u003eYou can have multiple messenger trays on the page at the same time.  Manually create them using the\njQuery method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-javascript\"\u003einstance = $(\u003cspan class=\"string\"\u003e'.myContainer'\u003c/span\u003e).messenger();\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can then pass your instance into the messenger methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-javascript\"\u003eMessenger({instance: instance}).post(\u003cspan class=\"string\"\u003e\"My awesome message\"\u003c/span\u003e)\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"contributing\"\u003eContributing\u003c/h3\u003e\n\u003cp\u003eThe build process requires nodejs and grunt-cli.\nYou can build the output files by running \u003ccode\u003egrunt\u003c/code\u003e.\nThe automated tests can be run by opening SpecRunner.html in a browser.\u003c/p\u003e\n\u003c/div\u003e"