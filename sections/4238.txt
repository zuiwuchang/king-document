var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;cstring\u0026gt;\n#define ArrayLength(arrs) (sizeof(arrs)/sizeof(arrs[0]))\n#define ArrayMax(arrs)\tmax_n(arrs,ArrayLength(arrs))\n\n//定義一個 模板 返回 最大值\ntemplate\u0026lt;typename T\u0026gt;\nT max_n(const T arrs[],std::size_t n)\n{\n    puts(\"-0\");\n    std::size_t pos = 0;\n    for(std::size_t i=1; i\u0026lt;n; ++i)\n    {\n        if(arrs[i]\u0026gt;arrs[pos])\n        {\n            pos = i;\n        }\n    }\n    return arrs[pos];\n}\n\n//爲std::string 特化模板\ntemplate\u0026lt;\u0026gt;\nstd::string max_n(const std::string arrs[],std::size_t n)\n{\n    puts(\"-1\");\n    std::size_t pos = 0;\n    for(std::size_t i=1; i\u0026lt;n; ++i)\n    {\n        if(arrs[i].size()\u0026gt;arrs[pos].size())\n        {\n            pos = i;\n        }\n    }\n    return arrs[pos];\n}\n\n//爲 char* 特化模板\n//直接 寫 char* 將 無法 識別 要特化的 模板\ntypedef char* cstr_t;\ntemplate\u0026lt;\u0026gt;\ncstr_t max_n(const cstr_t arrs[],std::size_t n)\n//cstr_t max_n\u0026lt;cstr_t\u0026gt;(const cstr_t arrs[],std::size_t n)\n{\n    puts(\"-2\");\n    std::size_t pos = 0;\n    std::size_t len = strlen(arrs[0]);\n    for(std::size_t i=1; i\u0026lt;n; ++i)\n    {\n        std::size_t n = strlen(arrs[i]);\n        if(n \u0026gt; len)\n        {\n            pos = i;\n            len = n;\n        }\n    }\n    return arrs[pos];\n}\n\n//爲 float 特化模板\ntemplate\u0026lt;\u0026gt;\nfloat max_n\u0026lt;float\u0026gt;(const float arrs[],std::size_t n) //顯示表示要特化的 模板\n{\n    puts(\"-3\");\n    std::size_t pos = 0;\n    for(std::size_t i=1; i\u0026lt;n; ++i)\n    {\n        if(arrs[i]\u0026gt;arrs[pos])\n        {\n            pos = i;\n        }\n    }\n    return arrs[pos];\n}\n\nint main()\n{\n    int ints[] = {0,1,9,4,7,3};\n    std::cout\u0026lt;\u0026lt;ArrayMax(ints)\u0026lt;\u0026lt;\"\\n\";\n    float floats[] = {0.0,1.1,9.9,4.4,7.7,3.3};\n    std::cout\u0026lt;\u0026lt;ArrayMax(floats)\u0026lt;\u0026lt;\"\\n\";\n    std::string strs[] = {\"kate\",\"cerberus\",\"king\"};\n    std::cout\u0026lt;\u0026lt;ArrayMax(strs)\u0026lt;\u0026lt;\"\\n\";\n    char* cstrs[] = {\"kate\",\"cerberus\",\"king\"};\n    std::cout\u0026lt;\u0026lt;ArrayMax(cstrs)\u0026lt;\u0026lt;\"\\n\";\n    return 0;\n}\n\u003c/pre\u003e"