var __v="\u003cpre class=\"k-pre\"\u003e#define MAX_LOADSTRING 100\n\n// 全局变量:\nHINSTANCE hInst;\t\t\t\t\t\t\t\t// 当前实例\nTCHAR szTitle[MAX_LOADSTRING];\t\t\t\t\t// 标题栏文本\nTCHAR szWindowClass[MAX_LOADSTRING];\t\t\t// 主窗口类名\n\n// 此代码模块中包含的函数的前向声明:\nATOM\t\t\t\tMyRegisterClass(HINSTANCE hInstance);\nBOOL\t\t\t\tInitInstance(HINSTANCE, int);\nLRESULT CALLBACK\tWndProc(HWND, UINT, WPARAM, LPARAM);\nINT_PTR CALLBACK\tAbout(HWND, UINT, WPARAM, LPARAM);\n\n\u003cstrong\u003e//入口點\u003c/strong\u003e\nint APIENTRY _tWinMain(_In_ HINSTANCE hInstance,\n                     _In_opt_ HINSTANCE hPrevInstance,\n                     _In_ LPTSTR    lpCmdLine,\n                     _In_ int       nCmdShow)\n{\n\tUNREFERENCED_PARAMETER(hPrevInstance);\n\tUNREFERENCED_PARAMETER(lpCmdLine);\n\n \t// TODO: 在此放置代码。\n\tMSG msg;\n\tHACCEL hAccelTable;\n\n\t// 初始化全局字符串\n\tLoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);\n\tLoadString(hInstance, IDC_WIN32PROJECT1, szWindowClass, MAX_LOADSTRING);\n\t\n\t\u003cstrong\u003e//註冊窗口類\u003c/strong\u003e\n\tMyRegisterClass(hInstance);\n\n\t// 执行应用程序初始化:\n\t\u003cstrong\u003e//創建窗口\u003c/strong\u003e\n\tif (!InitInstance (hInstance, nCmdShow))\n\t{\n\t\treturn FALSE;\n\t}\n\n\thAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_WIN32PROJECT1));\n\n\t// 主消息循环:\n\t\u003cstrong\u003e//分發消息\u003c/strong\u003e\n\twhile (GetMessage(\u0026amp;msg, NULL, 0, 0))\t//取得消息\n\t{\n\t\tif (!TranslateAccelerator(msg.hwnd, hAccelTable, \u0026amp;msg))\n\t\t{\n\t\t\tTranslateMessage(\u0026amp;msg);\t\t//轉換鍵盤消息\n\t\t\tDispatchMessage(\u0026amp;msg);\t\t//將消息分發到窗口函數\n\t\t}\n\t}\n\n\treturn (int) msg.wParam;\n}\n\n\n\n//\n//  函数: MyRegisterClass()\n//\n//  目的: 注册窗口类。\n//\n\u003cstrong\u003e//註冊窗口函數\u003c/strong\u003e\nATOM MyRegisterClass(HINSTANCE hInstance)\n{\n\tWNDCLASSEX wcex;\n\n\twcex.cbSize = sizeof(WNDCLASSEX);\n\n\twcex.style\t\t\t= CS_HREDRAW | CS_VREDRAW;\n\twcex.lpfnWndProc\t= WndProc;\t\t\t\t\t\t\t\t\u003cstrong\u003e//指定消息響應函數\u003c/strong\u003e\n\twcex.cbClsExtra\t\t= 0;\n\twcex.cbWndExtra\t\t= 0;\n\twcex.hInstance\t\t= hInstance;\n\twcex.hIcon\t\t\t= LoadIcon(hInstance, MAKEINTRESOURCE(IDI_WIN32PROJECT1));\n\twcex.hCursor\t\t= LoadCursor(NULL, IDC_ARROW);\n\twcex.hbrBackground\t= (HBRUSH)(COLOR_WINDOW+1);\n\twcex.lpszMenuName\t= MAKEINTRESOURCE(IDC_WIN32PROJECT1);\n\twcex.lpszClassName\t= szWindowClass;\t\t\t\t\t//指定窗口類名\n\twcex.hIconSm\t\t= LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));\n\n\treturn RegisterClassEx(\u0026amp;wcex);\t\u003cstrong\u003e//註冊窗口\u003c/strong\u003e\n}\n\n//\n//   函数: InitInstance(HINSTANCE, int)\n//\n//   目的: 保存实例句柄并创建主窗口\n//\n//   注释:\n//\n//        在此函数中，我们在全局变量中保存实例句柄并\n//        创建和显示主程序窗口。\n//\n\u003cstrong\u003e//創建窗口函數\u003c/strong\u003e\nBOOL InitInstance(HINSTANCE hInstance, int nCmdShow)\n{\n   HWND hWnd;\n\n   hInst = hInstance; // 将实例句柄存储在全局变量中\n   //創建窗口\n   hWnd = CreateWindow(szWindowClass\t\t\u003cstrong\u003e//註冊的窗口類名\u003c/strong\u003e\n\t   , szTitle, WS_OVERLAPPEDWINDOW,\n      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);\n\n   if (!hWnd)\n   {\n      return FALSE;\n   }\n\n   //顯示窗口\n   ShowWindow(hWnd, nCmdShow);\n   //給窗口發送一個 WM_PAIN 以刷新界面\n   UpdateWindow(hWnd);\n\n   return TRUE;\n}\n\n//\n//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)\n//\n//  目的: 处理主窗口的消息。\n//\n//  WM_COMMAND\t- 处理应用程序菜单\n//  WM_PAINT\t- 绘制主窗口\n//  WM_DESTROY\t- 发送退出消息并返回\n//\n//\nLRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tint wmId, wmEvent;\n\tPAINTSTRUCT ps;\n\tHDC hdc;\n\n\tswitch (message)\n\t{\n\tcase WM_COMMAND:\n\t\twmId    = LOWORD(wParam);\n\t\twmEvent = HIWORD(wParam);\n\t\t// 分析菜单选择:\n\t\tswitch (wmId)\n\t\t{\n\t\tcase IDM_ABOUT:\n\t\t\tDialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);\n\t\t\tbreak;\n\t\tcase IDM_EXIT:\n\t\t\tDestroyWindow(hWnd);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn DefWindowProc(hWnd, message, wParam, lParam);\n\t\t}\n\t\tbreak;\n\tcase WM_PAINT:\n\t\thdc = BeginPaint(hWnd, \u0026amp;ps);\n\t\t// TODO: 在此添加任意绘图代码...\n\t\tEndPaint(hWnd, \u0026amp;ps);\n\t\tbreak;\n\tcase WM_DESTROY:\n\t\tPostQuitMessage(0);\n\t\tbreak;\n\t\u003cstrong\u003edefault:\n\t\treturn DefWindowProc(hWnd, message, wParam, lParam);\u003c/strong\u003e\n\t}\n\treturn 0;\n}\n\n// “关于”框的消息处理程序。\nINT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n\tUNREFERENCED_PARAMETER(lParam);\n\tswitch (message)\n\t{\n\tcase WM_INITDIALOG:\n\t\treturn (INT_PTR)TRUE;\n\n\tcase WM_COMMAND:\n\t\tif (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)\n\t\t{\n\t\t\tEndDialog(hDlg, LOWORD(wParam));\n\t\t\treturn (INT_PTR)TRUE;\n\t\t}\n\t\tbreak;\n\t}\n\treturn (INT_PTR)FALSE;\n}\n\u003c/pre\u003e"