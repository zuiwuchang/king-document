var __v="\u003cpre class=\"k-pre\"\u003e//大小寫轉換\nvoid to_upper(T\u0026amp; t)\t\t\t//轉大寫\nvoid to_lower(T\u0026amp; t)\t\t\t//轉小寫\n\n//去空格\ntrim_left\ntrim_right\ntrim\n\n//判斷式\nbool starts_with(str,\"begin\")\t\t//是否含有 \"begin\" 前綴\nends_with\t\t\t\t//...後綴\ncontains(str1,str2)\t\t\t//str2 是否是 str1 的子集\nequal\t\t\t\t\t//兩字符串是否相等\nlexicographical_compare(str1,str2)\t//str1是否小於str2\n\nall(str,fun())\t\t//str每個字符是否都滿足 判別式fun (STL 算法傳入都不需要加上 ()  boost的判別式都需要加上() )\nboost::all(\"AB\",boost::is_upper());\n\n和all配合的boost判別式\nis_space\t\t空格\nis_alnum\t\t字母 數值\nis_alpha\t\t字母\nis_lower\t\t小寫字符\nis_upper\t\t大寫\nis_digit\t\t十進制數值\nis_xdigit\t\t十六進制數值\n\nis_cntrl\t\t控制字符\nis_graph\t\t圖形字符\nis_print\t\t打印字符\nis_punct\t\t標點字符\nis_any_of\t\t是否是參數字符中的任意字符\nif_from_range\t字符位於指定區間內\n\n//other\nis_equal\t\t比較兩個對象是否相等\nis_less\t\t\t比較 是否 對象1 \u0026lt; 對象2\nis_not_greater\t\t比較 是否 對象1 \u0026lt;= 對象2\n\u003c/pre\u003e"