var __v="\u003cpre class=\"prettyprint linenums\"\u003epackage main\n\nimport (\n\t\"fmt\"\n)\n\n// #cgo LDFLAGS: -lopencc\n// #include \u0026lt;opencc/opencc.h\u0026gt;\nimport \"C\"\n\ntype Converter struct {\n\tid C.opencc_t\n}\n\nfunc NewConverter(src string) *Converter {\n\tc := Converter{}\n\tc.id = C.opencc_open(C.CString(src))\n\treturn \u0026amp;c\n}\n\nfunc (c *Converter) Convert(src string) string {\n\tdist := C.opencc_convert_utf8(c.id, C.CString(src), C.size_t(len(src)))\n\tdefer C.opencc_convert_utf8_free(dist)\n\treturn C.GoString(dist)\n}\n\nfunc (c *Converter) Close() {\n\tC.opencc_close(c.id)\n}\n\nfunc Convert(src string, cnf string) string {\n\tc := NewConverter(cnf)\n\tdefer c.Close()\n\treturn c.Convert(src)\n}\n\nfunc ConvertAsync(src string, cnf string, callback func(dist string)) {\n\tgo func() {\n\t\tcallback(Convert(src, cnf))\n\t}()\n}\n\nconst (\n\tCONFIG_SIMP_TO_TRAD = \"st2.json\"\n\tCONFIG_TRAD_TO_SIMP = \"t2s.json\"\n)\n\nfunc main() {\n\tcc := NewConverter(CONFIG_TRAD_TO_SIMP)\n\tdefer cc.Close()\n\n\tsrc := \"this is a 草泥馬的 test\"\n\tstr := cc.Convert(src)\n\tfmt.Println(str)\n}\n\u003c/pre\u003e"