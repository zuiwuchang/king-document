var __v="\u003cpre class='k-pre'\u003e創建 s/main.cpp\u003c/pre\u003e\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n\n#include \u0026lt;grpc/grpc.h\u0026gt;\n#include \u0026lt;grpc++/server.h\u0026gt;\n#include \u0026lt;grpc++/server_builder.h\u0026gt;\n#include \u0026lt;grpc++/server_context.h\u0026gt;\n#include \u0026lt;grpc++/security/server_credentials.h\u0026gt;\n\n#include \"pb/pb.grpc.pb.h\"\n\n#define LAddr \"localhost:1102\"\n\n//定義 服務器\nclass TestServerImpl final : public pb::TestServer::Service\n{\n    //實現 服務器 接口\n    grpc::Status Say(\n        grpc::ServerContext* context,\n        const pb::SayRequest* req,\n        pb::SayReply* reply\n    ) override\n    {\n        //邏輯 處理\n        std::cout\u0026lt;\u0026lt;req-\u0026gt;name()\u0026lt;\u0026lt;\" say :\"\u0026lt;\u0026lt;req-\u0026gt;text()\u0026lt;\u0026lt;\"\\n\";\n\n        //響應\n        reply-\u0026gt;set_text(req-\u0026gt;text());\n\n        return grpc::Status::OK;\n    }\n};\n\nint main()\n{\n    grpc::ServerBuilder builder;\n    builder.AddListeningPort(\n        LAddr,\n        grpc::InsecureServerCredentials() // h2c\n    );\n\n    //實例化 服務器\n    TestServerImpl service;\n\n    //支持 服務\n    builder.RegisterService(\u0026amp;service);\n\n\n    //運行 服務\n    std::unique_ptr\u0026lt;grpc::Server\u0026gt; server(builder.BuildAndStart());\n    std::cout \u0026lt;\u0026lt; \"Server listening on \" \u0026lt;\u0026lt; LAddr \u0026lt;\u0026lt; std::endl;\n\n    //等待服務 停止\n    server-\u0026gt;Wait();\n\n    return 0;\n}\n\u003c/pre\u003e"