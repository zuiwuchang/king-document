var __v="\u003cpre class='k-pre'\u003e創建 \u003cstrong\u003etest/net/basic/basic.proto\u003c/strong\u003e 檔案 在裡面 使用 protoc3 語法 描述 服務\n並且使用 protoc 創建 對應語言的 代碼\nprotoc -I basic/ basic/basic.proto --go_out=plugins=grpc:basic\n\u003c/pre\u003e\n\n\u003cpre class='prettyprint linenums'\u003esyntax = \"proto3\";\n\npackage basic;\n\n// 以 service 標記定義一個 服務\nservice TestServer {\n\t//以 rpc 定義 方法\n\trpc Say(SayRequest) returns (SayReply) {}\n}\n\n/***\t定義 proto3 數據 \t***/\nmessage SayRequest {\n\tstring Name = 1;\n\tstring Text = 2;\n}\nmessage SayReply{\n\tstring\tText = 1;\n}\n\u003c/pre\u003e\n\u003cpre class='k-pre'\u003e創建 服務器代碼 \u003cstrong\u003etest/net/s/main.go\u003c/strong\u003e\u003c/pre\u003e\n\u003cpre class='prettyprint linenums'\u003epackage main\n\nimport (\n\t\"fmt\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"log\"\n\t\"net\"\n\tpb \"test/net/basic\"\n)\n\nconst (\n\tLAddr = \":1102\"\n)\n\nfunc main() {\n\t//創建 監聽 Listener\n\tl, e := net.Listen(\"tcp\", LAddr)\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\tlog.Println(\"work at\", LAddr)\n\n\t//創建 rpc 服務器\n\ts := grpc.NewServer()\n\n\t//註冊 服務\n\tpb.RegisterTestServerServer(s, \u0026amp;testServer{})\n\n\t//註冊 反射 到 服務 路由\n\treflection.Register(s)\n\n\t//讓 rpc 在 Listener 上 工作\n\tif e := s.Serve(l); e != nil {\n\t\tlog.Fatalln(e)\n\t}\n}\n\n//定義 服務器\ntype testServer struct {\n}\n\n//實現 服務器 接口\nfunc (s *testServer) Say(ctx context.Context, in *pb.SayRequest) (*pb.SayReply, error) {\n\t//邏輯 處理\n\tfmt.Printf(\"%v say : %v\\n\", in.Name, in.Text)\n\n\t//響應\n\treturn \u0026amp;pb.SayReply{\n\t\t\tText: \"OK\",\n\t\t},\n\t\tnil\n}\n\u003c/pre\u003e\n\u003cpre class='k-pre'\u003e創建 客戶端代碼 \u003cstrong\u003etest/net/c/main.go\u003c/strong\u003e\u003c/pre\u003e\n\u003cpre class='prettyprint linenums'\u003epackage main\n\nimport (\n\t\"fmt\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"log\"\n\t\"strings\"\n\tpb \"test/net/basic\"\n)\n\nconst (\n\tAddr = \"127.0.0.1:1102\"\n)\n\nfunc main() {\n\t//連接 服務器\n\tconn, e := grpc.Dial(Addr, grpc.WithInsecure())\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\tdefer conn.Close()\n\t//創建 rpc 服務 客戶端\n\tc := pb.NewTestServerClient(conn)\n\tvar cmd, name string\n\tfor {\n\t\tfmt.Print(\"#\u0026gt;\")\n\t\tfmt.Scan(\u0026amp;cmd)\n\t\tif cmd == \"e\" {\n\t\t\tbreak\n\t\t} else if strings.HasPrefix(cmd, \"name=\") {\n\t\t\tcmd = cmd[len(\"name=\"):]\n\t\t\tname = cmd\n\t\t} else if strings.HasPrefix(cmd, \"say=\") {\n\t\t\tcmd = cmd[len(\"say=\"):]\n\n\t\t\tif repl, e := c.Say(\n\t\t\t\tcontext.Background(),\n\t\t\t\t\u0026amp;pb.SayRequest{\n\t\t\t\t\tName: name,\n\t\t\t\t\tText: cmd,\n\t\t\t\t},\n\t\t\t); e == nil {\n\t\t\t\tfmt.Println(repl)\n\t\t\t} else {\n\t\t\t\tlog.Println(e)\n\t\t\t}\n\t\t}\n\t}\n}\n\u003c/pre\u003e"