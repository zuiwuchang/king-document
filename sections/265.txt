var __v="\u003cpre class=\"k-pre\"\u003e//在其後追加 true 或 false 字符\nfunc AppendBool(dst []byte, b bool) []byte\n\n//...float\nfunc AppendFloat(dst []byte, f float64, fmt byte, prec int, bitSize int) []byte\n\tfmt 為b e f E g G 等 使用%*(參見fmt包)格式化 f\n\tprec 指定小數點 精度 -1 表示只是忽略小數點末尾的0\n\tbitSize 32/64 指示f是float32/float64\n\n//...int\nfunc AppendInt(dst []byte, i int64, base int) []byte\t\n\tbase 指示格式字符串使用的進制\n//... uint\nfunc AppendUint(dst []byte, i uint64, base int) []byte\n\n//...\"字符串\"\nfunc AppendQuote(dst []byte, s string) []byte\n\n//...'字符'\nfunc AppendQuoteRune(dst []byte, r rune) []byte\n\n//不知道和AppendQuoteRune有何區別\nfunc AppendQuoteRuneToASCII(dst []byte, r rune) []byte\n\n//不知道和 AppendQuote有何區別\nfunc AppendQuoteToASCII(dst []byte, s string) []byte\n\n\n\n//字符串 轉數字\nfunc Atoi(s string) (i int, err error)\n\n//型別 轉字符串\nfunc FormatBool(b bool) string\nfunc FormatFloat(f float64, fmt byte, prec, bitSize int) string\nfunc FormatInt(i int64, base int) string\nfunc FormatUint(i uint64, base int) string\nfunc Itoa(i int) string\n\n//字符串 轉 型別\nfunc ParseBool(str string) (value bool, err error)\nfunc ParseFloat(s string, bitSize int) (f float64, err error)\nfunc ParseInt(s string, base int, bitSize int) (i int64, err error)\nfunc ParseUint(s string, base int, bitSize int) (n uint64, err error)\n\n\n//檢查字符串 是否是一個 Go語法字符常量\nfunc CanBackquote(s string) bool\n\n//檢查字符是否可打印\nfunc IsPrint(r rune) bool\n\n...\u003c/pre\u003e"