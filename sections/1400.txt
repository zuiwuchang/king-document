var __v="\u003ctable class=\"table\"\u003e\n\u003ctr\u003e\u003cth\u003efunction\u003c/th\u003e\u003cth\u003enote\u003c/th\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003ebinary_search(begin,end,\u0026amp;elem)\u003cbr\u003ebinary_search(begin,end,\u0026amp;elem,fun...(*iterator,\u0026amp;elem))\u003c/td\u003e\u003ctd\u003e返回区间中是否存在某值\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eincludes(begin,end,begin2,end2)\u003cbr\u003eincludes(begin,end,begin2,end2,fun...(*iterator,*iterator2))\u003c/td\u003e\u003ctd\u003e返回区间2是否是区间一定子集\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003elower_bound(begin,end,\u0026amp;elem)\u003cbr\u003elower_bound(begin,end,\u0026amp;elem,fun...(*iterator,\u0026amp;elem))\u003c/td\u003e\u003ctd\u003e返回第一个值大于等于elem的元素的迭代器\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eupper_bound //参数同上\u003c/td\u003e\u003ctd\u003e...大于...\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eequal_range //...\u003c/td\u003e\n\u003ctd\u003e...等于...元素的区间pair\u0026lt;begin,end\u0026gt;\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003emerge(begin,end,begin2,end2,begin3)\u003cbr\u003emerge(begin,end,begin2,end2,begin3,fun...(*iterator,\u0026amp;elem))\u003c/td\u003e\u003ctd\u003e将[begin,end) [begin2,end2) 合并到 begin3\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eset_union\u003c/td\u003e\u003ctd\u003e求两区间并集 元素重复 则重复某区间中重复次数最多的次数\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eset_intersection\u003c/td\u003e\u003ctd\u003e...交集 元素重复 ...最少...\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eset_difference\u003c/td\u003e\u003ctd\u003e...只存储在于第一区间 不存在于第二区间的元素\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eset_symmetric_difference\u003c/td\u003e\u003ctd\u003e...存在于第一或第二区间 \u003cstrong\u003e但不同时\u003c/strong\u003e存储于两区间的元素\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003einplace_merge\u003c/td\u003e\u003ctd\u003e...合并两已序区间 并保持已序\u003c/td\u003e\u003c/tr\u003e\n\u003c/table\u003e"