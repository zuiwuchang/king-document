var __v="\u003cpre class=\"k-pre\"\u003e//固定格式化 星期 月 日期 时:分:秒 年\nchar * asctime(const struct tm * timeptr);\nchar * ctime(const time_t *timer);\n\nwchar_t *_wasctime( \n\tconst struct tm *timeptr \n);\nwchar_t *_wctime( \n\tconst time_t *timer \n);\n\n        \n//自定义格式化 类似sprintf\nsize_t strftime(\n\tchar *strDest,  //格式化后保存数据缓冲区\n\tsize_t maxsize, //缓冲区大小 sizeof\n\tconst char *format,\t// % 格式\n\tconst struct tm *timeptr  //tm结构\n);\nsize_t wcsftime(\n\twchar_t *strDest,\n\tsize_t maxsize,\n\tconst wchar_t *format,\n\tconst struct tm *timeptr \n);\n\n%a 星期几的简写 \n%A 星期几的全称 \n%b 月分的简写 \n%B 月份的全称 \n%c 标准的日期的时间串 \n%C 年份的后两位数字 \n%d 十进制表示的每月的第几天 \n%D 月/天/年 \n%e 在两字符域中，十进制表示的每月的第几天 \n%F 年-月-日 \n%g 年份的后两位数字，使用基于周的年 \n%G 年分，使用基于周的年 \n%h 简写的月份名 \n%H 24小时制的小时 \n%I 12小时制的小时\n%j 十进制表示的每年的第几天 \n%m 十进制表示的月份 \n%M 十时制表示的分钟数 \n%n 新行符 \n%p 本地的AM或PM的等价显示 \n%r 12小时的时间 \n%R 显示小时和分钟：hh:mm \n%S 十进制的秒数 \n%t 水平制表符 \n%T 显示时分秒：hh:mm:ss \n%u 每周的第几天，星期一为第一天 （值从0到6，星期一为0）\n%U 第年的第几周，把星期日做为第一天（值从0到53）\n%V 每年的第几周，使用基于周的年 \n%w 十进制表示的星期几（值从0到6，星期天为0）\n%W 每年的第几周，把星期一做为第一天（值从0到53） \n%x 标准的日期串 \n%X 标准的时间串 \n%y 不带世纪的十进制年份（值从0到99）\n%Y 带世纪部分的十进制年份 \n%z，%Z 时区名称，如果不能得到时区名称则返回空字符。\n%% 百分号\n\u003c/pre\u003e"