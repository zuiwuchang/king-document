var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;fstream\u0026gt;\n\n#include \u0026lt;AL/al.h\u0026gt;\n#include \u0026lt;AL/alc.h\u0026gt;\n\n#include \u0026lt;boost/thread.hpp\u0026gt;\n#define FREQUENCY 44100\n#define BUFFER_SIZE (FREQUENCY * 2 * 3 / 2 / 10)\n\nvoid capture(ALCdevice* device,bool* run)\n{\n    std::ofstream f(\"t.wav\",std::ios::trunc|std::ios::out|std::ios::binary);\n\n    ALbyte buffer[BUFFER_SIZE * 2] = {0};\n    ALint sample;\n    while(*run)\n    {\n        alcGetIntegerv(device, ALC_CAPTURE_SAMPLES,1, \u0026amp;sample);\n        //返回 當前錄製到的 採樣率\n        if(!sample)\n        {\n            continue;\n        }\n        alcCaptureSamples(device,buffer, sample);\n        //將 採樣到的數據 從設備緩存區中 copy 出來\n        int rs = alcGetError(device);\n        if(rs != ALC_NO_ERROR)\n        {\n            std::cout\u0026lt;\u0026lt;\"err : alcCaptureSamples \"\u0026lt;\u0026lt;rs\u0026lt;\u0026lt;\"\\n\";\n            break;\n        }\n\n        //將 錄音 寫入到 檔案\n        f.write((const char*)(buffer),sample * 2); // AL_FORMAT_MONO16 有兩個通道 所以需要 *2\n        f.flush();\n        boost::this_thread::sleep(boost::posix_time::milliseconds(100));\n    }\n\n    f.close();\n}\n\nint main()\n{\n    bool enumeration = alcIsExtensionPresent(NULL, \"ALC_EXT_CAPTURE\");\n    if (enumeration == AL_FALSE)\n    {\n        std::cout\u0026lt;\u0026lt;\"can not find output device\\n\";\n        return -1;\n    }\n\n    int rs = 0;\n    //創建一個 錄音 設備\n    ALCdevice* device = alcCaptureOpenDevice(nullptr,\t\t\t//設備名 空指針 使用默認設備\n                        FREQUENCY,\t\t\t\t//採樣率\n                        AL_FORMAT_MONO16, //音頻格式 立體聲 16bit\n                        BUFFER_SIZE\t\t\t//捕獲設備 緩衝區\n                                            );\n    if(!device)\n    {\n        std::cout\u0026lt;\u0026lt;\"err : alcCaptureOpenDevice \"\u0026lt;\u0026lt;alcGetError(device)\u0026lt;\u0026lt;\"\\n\";\n        rs = -1;\n        return rs;\n    }\n\n    //開始 錄音\n    alcCaptureStart(device);\n    rs = alcGetError(device);\n    if(rs != ALC_NO_ERROR)\n    {\n        std::cout\u0026lt;\u0026lt;\"err : alcCaptureOpenDevice \"\u0026lt;\u0026lt;rs\u0026lt;\u0026lt;\"\\n\";\n        return rs;\n    }\n\n    //啟動 命令 線程\n    bool run = true;\n    boost::thread([device,\u0026amp;run]()\n    {\n        std::string cmd;\n        while(true)\n        {\n            std::cin\u0026gt;\u0026gt;cmd;\n            if(\"e\" == cmd)\n            {\n                break;\n            }\n        }\n        run = false;\n\n\n    });\n\n    capture(device,\u0026amp;run);\n\n    //停止 錄音\n    alcCaptureStop(device);\n\n    //釋放 設備\n    alcCaptureCloseDevice(device);\n    return rs;\n}\n\n\n\u003c/pre\u003e"