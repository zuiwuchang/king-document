var __v="\n\u003cpre class='prettyprint linenums'\u003e#include\u0026lt;boost\\thread.hpp\u0026gt;\n#include\u0026lt;boost\\asio.hpp\u0026gt;\n#include\u0026lt;boost\\array.hpp\u0026gt;\n\nusing namespace boost::asio;\n#define BUFFER_LEN\t10240\n\nvoid write_thread(ip::tcp::socket\u0026amp; sock)\n{\n\tstd::string cmd;\n\n\twhile(true)\n\t{\t\n\t\tstd::cin\u0026gt;\u0026gt;cmd;\n\t\tsock.write_some(buffer(cmd));\n\t}\n\t\n}\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\tstd::string cmd;\n\tunsigned short port\t=\t0;\n\ttry\n\t{\n\t\tio_service ios;\n\n\t\tputs(\"輸入 連接地址(def 127.0.0.1 1102)\");\n\t\tstd::cin\u0026gt;\u0026gt;cmd;\n\t\tif(cmd ==\"def\")\n\t\t{\n\t\t\tcmd\t\t=\t\"127.0.0.1\";\n\t\t\tport\t=\t1102;\n\t\t}\n\t\tip::address address\t=\tip::address::from_string(cmd);\n\t\t\n\t\tif(!port)\n\t\t{\n\t\t\tputs(\"輸入連接端口\");\n\t\t\tstd::cin\u0026gt;\u0026gt;port;\n\t\t}\n\n\t\tip::tcp::endpoint endpoint(address,port);\n\n\t\tip::tcp::socket sock(ios);\n\t\tsock.connect(endpoint);\n\n\t\tputs(\"連接成功\");\n\t\tstd::cout\u0026lt;\u0026lt;\"本地端口:\"\u0026lt;\u0026lt;sock.local_endpoint().port()\n\t\t\t\u0026lt;\u0026lt;\"\\n遠程端口:\"\u0026lt;\u0026lt;sock.remote_endpoint().port()\n\t\t\t\u0026lt;\u0026lt;\"\\t遠程地址:\"\u0026lt;\u0026lt;sock.remote_endpoint().address()\u0026lt;\u0026lt;std::endl;\n\t\t\t\n\t\t//開啟 write 線程\n\t\tboost::thread t(boost::bind(write_thread\n\t\t\t,boost::ref(sock)\n\t\t\t)\n\t\t\t);\n\t\t\t\n\t\tboost::array\u0026lt;char,BUFFER_LEN\u0026gt; buf\t=\t{0};\n\t\twhile(true)\n\t\t{\n\t\t\tstd::fill(buf.begin(),buf.end(),0);\n\t\t\tsize_t size;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tsize\t=\tsock.read_some(buffer(buf));\n\t\t\t}\n\t\t\tcatch(const boost::system::system_error\u0026amp; e)\n\t\t\t{\n\t\t\t\t//網絡異常 或 服務器斷開連接\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\tif(size)\n\t\t\t{\n\t\t\t\tstd::cout\u0026lt;\u0026lt;\"\\nread size:\"\u0026lt;\u0026lt;size\n\t\t\t\t\t\u0026lt;\u0026lt;\"\\ndata:\\n\"\u0026lt;\u0026lt;buf.data()\n\t\t\t\t\t;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\tcatch(const boost::system::system_error\u0026amp; e)\n\t{\n\t\tstd::cout\u0026lt;\u0026lt;e.what()\u0026lt;\u0026lt;std::endl;\n\t}\n\tcatch(const std::exception\u0026amp; e)\n\t{\n\t\tstd::cout\u0026lt;\u0026lt;e.what()\u0026lt;\u0026lt;std::endl;\n\t}\n\tstd::system(\"pause\");\n\treturn 0;\n}\u003c/pre\u003e"