var __v="\u003cpre class=\"prettyprint linenums\"\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;cstdint\u0026gt;\n\n#include \u0026lt;boost/asio.hpp\u0026gt;\n#include \u0026lt;boost/thread.hpp\u0026gt;\n#include \u0026lt;boost/smart_ptr.hpp\u0026gt;\n\n#define LISTEN_ADDRESS \"0.0.0.0\"\n#define LISTEN_PORT 8080\n#define BUFFER_SIZE 1024\n\ntypedef boost::asio::io_service io_service_t;\ntypedef boost::asio::ip::tcp::acceptor acceptor_t;\ntypedef boost::asio::ip::tcp::socket socket_t;\ntypedef boost::shared_ptr\u0026lt;io_service_t\u0026gt; io_service_spt;\ntypedef boost::shared_ptr\u0026lt;acceptor_t\u0026gt; acceptor_spt;\ntypedef boost::shared_ptr\u0026lt;socket_t\u0026gt; socket_spt;\n\nclass buffer_t\n{\npublic:\n    std::uint8_t data[BUFFER_SIZE];\n    std::size_t pos;\n    buffer_t():pos(0)\n    {\n\n    }\n};\ntypedef boost::shared_ptr\u0026lt;buffer_t\u0026gt; buffer_spt;\n\nvoid post_accept(io_service_spt service,acceptor_spt acceptor);\nvoid post_accept_handler(const boost::system::error_code\u0026amp; ec,\n                         io_service_spt service,\n                         acceptor_spt acceptor,\n                         socket_spt sock\n                        );\nvoid post_read(socket_spt sock,buffer_spt buffer);\nvoid post_read_handler(const boost::system::error_code\u0026amp; ec,\n                       socket_spt sock,\n                       buffer_spt buffer,\n                       const std::size_t n\n                      );\nvoid post_write(socket_spt sock,buffer_spt buffer);\nvoid post_write_handler(const boost::system::error_code\u0026amp; ec,\n                        socket_spt sock,\n                        buffer_spt buffer\n                       );\nint main()\n{\n    try\n    {\n        io_service_spt service = boost::make_shared\u0026lt;io_service_t\u0026gt;();\n        boost::asio::ip::tcp::endpoint endpoint(boost::asio::ip::address::from_string(LISTEN_ADDRESS),LISTEN_PORT);\n        acceptor_spt acceptor = boost::make_shared\u0026lt;acceptor_t\u0026gt;(*service,endpoint);\n        std::cout\u0026lt;\u0026lt;\"work at \"\u0026lt;\u0026lt;LISTEN_ADDRESS\u0026lt;\u0026lt;\":\"\u0026lt;\u0026lt;LISTEN_PORT\u0026lt;\u0026lt;std::endl;\n\n        std::size_t n = boost::thread::hardware_concurrency();\n        for(std::size_t i=0; i\u0026lt;n; ++i)\n        {\n            post_accept(service,acceptor);\n        }\n\n        boost::thread_group threads;\n        for(std::size_t i=0; i\u0026lt;n; ++i)\n        {\n            threads.create_thread([\u0026amp;service]()\n            {\n                service-\u0026gt;run();\n            });\n        }\n        threads.join_all();\n    }\n    catch(const std::bad_alloc\u0026amp; e)\n    {\n        std::cout\u0026lt;\u0026lt;e.what()\u0026lt;\u0026lt;std::endl;\n    }\n    catch(const boost::system::system_error\u0026amp; e)\n    {\n        std::cout\u0026lt;\u0026lt;e.what()\u0026lt;\u0026lt;std::endl;\n    }\n    return 0;\n}\nvoid post_accept(io_service_spt service,acceptor_spt acceptor)\n{\n    socket_spt sock = boost::make_shared\u0026lt;socket_t\u0026gt;(*service);\n    acceptor-\u0026gt;async_accept(*sock,\n                           boost::bind(post_accept_handler,\n                                       boost::asio::placeholders::error,\n                                       service,\n                                       acceptor,\n                                       sock)\n                          );\n}\nvoid post_accept_handler(const boost::system::error_code\u0026amp; ec,\n                         io_service_spt service,\n                         acceptor_spt acceptor,\n                         socket_spt sock\n                        )\n{\n    post_accept(service,acceptor);\n    if(ec)\n    {\n        return;\n    }\n    buffer_spt buffer = boost::make_shared\u0026lt;buffer_t\u0026gt;();\n    post_read(sock,buffer);\n}\nvoid post_read(socket_spt sock,buffer_spt buffer)\n{\n    sock-\u0026gt;async_read_some(boost::asio::buffer(buffer-\u0026gt;data+buffer-\u0026gt;pos,BUFFER_SIZE-buffer-\u0026gt;pos),\n                          boost::bind(post_read_handler,\n                                      boost::asio::placeholders::error,\n                                      sock,\n                                      buffer,\n                                      boost::asio::placeholders::bytes_transferred\n                                     )\n                         );\n}\nvoid post_read_handler(const boost::system::error_code\u0026amp; ec,\n                       socket_spt sock,\n                       buffer_spt buffer,\n                       const std::size_t n\n                      )\n{\n    if(ec)\n    {\n        boost::system::error_code noe;\n        sock-\u0026gt;shutdown(boost::asio::ip::tcp::socket::shutdown_both,noe);\n        sock-\u0026gt;close(noe);\n        return;\n    }\n    buffer-\u0026gt;pos += n;\n    if(buffer-\u0026gt;data[buffer-\u0026gt;pos - 1] == '\\n')\n    {\n        //echo\n        post_write(sock,buffer);\n        return;\n    }\n\n    if(buffer-\u0026gt;pos == BUFFER_SIZE)\n    {\n        boost::system::error_code noe;\n        sock-\u0026gt;shutdown(boost::asio::ip::tcp::socket::shutdown_both,noe);\n        sock-\u0026gt;close(noe);\n    }\n    else\n    {\n        post_read(sock,buffer);\n    }\n}\nvoid post_write(socket_spt sock,buffer_spt buffer)\n{\n    sock-\u0026gt;async_write_some(boost::asio::buffer(buffer-\u0026gt;data,buffer-\u0026gt;pos),\n                           boost::bind(post_write_handler,\n                                       boost::asio::placeholders::error,\n                                       sock,\n                                       buffer\n                                      )\n                          );\n}\nvoid post_write_handler(const boost::system::error_code\u0026amp; ec,\n                        socket_spt sock,\n                        buffer_spt buffer\n                       )\n{\n    boost::system::error_code noe;\n    sock-\u0026gt;shutdown(boost::asio::ip::tcp::socket::shutdown_both,noe);\n    sock-\u0026gt;close(noe);\n\n}\n\n\n\u003c/pre\u003e"