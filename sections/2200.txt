var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;boost/smart_ptr.hpp\u0026gt;\n#include \u0026lt;boost/asio.hpp\u0026gt;\n#include \u0026lt;boost/thread.hpp\u0026gt;\n\n#include \u0026lt;dark-cpp/io/msg/reader.hpp\u0026gt;\n#include \u0026lt;dark-cpp/io/msg/writer.hpp\u0026gt;\n\n#define IO_BUFFER_SIZE\t1024\n\ntypedef boost::shared_ptr\u0026lt;boost::asio::io_service\u0026gt; ios_ptr_t;\ntypedef boost::shared_ptr\u0026lt;boost::asio::ip::tcp::acceptor\u0026gt; acceptor_ptr_t;\ntypedef boost::shared_ptr\u0026lt;boost::asio::ip::tcp::socket\u0026gt; socket_ptr_t;\n\nvoid post_accept(ios_ptr_t ios,acceptor_ptr_t acceptor);\nvoid post_accept_handler(const boost::system::error_code\u0026amp; e,ios_ptr_t ios,acceptor_ptr_t acceptor,socket_ptr_t s);\nvoid post_recv(socket_ptr_t s,boost::shared_array\u0026lt;char\u0026gt; buf,dark::io::msg::reader_t reader);\nvoid post_recv_handler(const boost::system::error_code\u0026amp; e,socket_ptr_t s,boost::shared_array\u0026lt;char\u0026gt; buf,std::size_t n,dark::io::msg::reader_t reader);\nvoid post_send(socket_ptr_t s,dark::io::msg::message_t msg);\nvoid post_send_handler(const boost::system::error_code\u0026amp; e,socket_ptr_t s,dark::io::msg::message_t msg,std::size_t n);\nvoid work_thread(ios_ptr_t ios);\n\nstd::size_t get_id()\n{\n\tstatic std::size_t id = 0;\n\tstatic boost::mutex mutex;\n\n\tboost::mutex::scoped_lock lock(mutex);\n\treturn ++id;\n}\nint _tmain(int argc, _TCHAR* argv[])\n{\n\t\n\t//前攝器\n\tios_ptr_t ios = boost::make_shared\u0026lt;boost::asio::io_service\u0026gt;();\n\t\n\t//創建 接受器\n\tacceptor_ptr_t acceptor;\n\ttry\n\t{\n\t\tacceptor = boost::make_shared\u0026lt;boost::asio::ip::tcp::acceptor\u0026gt;(*ios,\n\t\t\tboost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(),1102)\n\t\t);\n\t\tputs(\"listen at :1102\");\n\t}\n\tcatch(const boost::system::system_error\u0026amp; e)\n\t{\n\t\tstd::cout\u0026lt;\u0026lt;e.what()\u0026lt;\u0026lt;\"\\n\";\n\t\tstd::system(\"pause\");\n\t\treturn 0;\n\t}\n\n\t//投遞 異步 accept \n\tfor(unsigned int i = 0 ; i \u0026lt; boost::thread::hardware_concurrency() * 2 + 2 ; ++i)\n\t{\n\t\tpost_accept(ios,acceptor);\t\n\t}\n\n\t//運行工作 線程\n\tboost::thread_group threads;\n\tfor(unsigned int i = 0 ; i \u0026lt; boost::thread::hardware_concurrency() * 2 + 2 ; ++i)\n\t{\n\t\tthreads.add_thread(new boost::thread(boost::bind(work_thread,ios)));\n\t}\n\n\tthreads.join_all();\n\n\treturn 0;\n}\nvoid work_thread(ios_ptr_t ios)\n{\n\t//運行服務\n\tios-\u0026gt;run();\n}\nvoid post_accept(ios_ptr_t ios,acceptor_ptr_t acceptor)\n{\n\tsocket_ptr_t s = boost::make_shared\u0026lt;boost::asio::ip::tcp::socket\u0026gt;(*ios);\n\tacceptor-\u0026gt;async_accept(*s,\n\t\tboost::bind(post_accept_handler,\n\t\tboost::asio::placeholders::error,\n\t\tios,\n\t\tacceptor,\n\t\ts)\n\t);\n}\nvoid post_accept_handler(const boost::system::error_code\u0026amp; e,ios_ptr_t ios,acceptor_ptr_t acceptor,socket_ptr_t s)\n{\n\t//投遞 新的 異步 accept\n\tpost_accept(ios,acceptor);\n\tif(e)\n\t{\n\t\treturn;\t\n\t}\n\t\n\tstd::cout\u0026lt;\u0026lt;s-\u0026gt;remote_endpoint()\u0026lt;\u0026lt;\" in\\n\";\n\t\t\n\t//send\n\tdark::io::msg::writer_t writer;\n\twriter.write(std::string(\"this is cerberus's server\"));\n\tdark::io::msg::message_t msg = writer.create_message(get_id());\n\tpost_send(s,msg);\n\t\n\twriter.write(std::string(\"cerberus it's an idea\"));\n\tmsg = writer.create_message(get_id());\n\tpost_send(s,msg);\n\n\t//投遞 異步 recv\n\tdark::io::msg::reader_t reader;\n\tboost::shared_array\u0026lt;char\u0026gt; buf(new char[IO_BUFFER_SIZE]);\n\tpost_recv(s,buf,reader);\n}\nvoid post_send(socket_ptr_t s,dark::io::msg::message_t msg)\n{\n\tdark::io::msg::data_t data = msg.data();\n\ts-\u0026gt;async_write_some(boost::asio::buffer(data.get(),data.size()),\n\t\tboost::bind(post_send_handler,\n\t\tboost::asio::placeholders::error,\n\t\ts,\n\t\tmsg,\n\t\tboost::asio::placeholders::bytes_transferred\n\t\t)\n\t);\n}\nvoid post_send_handler(const boost::system::error_code\u0026amp; e,socket_ptr_t s,dark::io::msg::message_t msg,std::size_t n)\n{\n\tif(e)\n\t{\n\t\treturn;\n\t}\n}\nvoid post_recv(socket_ptr_t s,boost::shared_array\u0026lt;char\u0026gt; buf,dark::io::msg::reader_t reader)\n{\n\ts-\u0026gt;async_read_some(boost::asio::buffer(buf.get(),IO_BUFFER_SIZE),\n\t\tboost::bind(post_recv_handler,\n\t\tboost::asio::placeholders::error,\n\t\ts,\n\t\tbuf,\n\t\tboost::asio::placeholders::bytes_transferred,\n\t\treader\n\t\t)\n\t);\n}\nvoid post_recv_handler(const boost::system::error_code\u0026amp; e,socket_ptr_t s,boost::shared_array\u0026lt;char\u0026gt; buf,std::size_t n,dark::io::msg::reader_t reader)\n{\n\tif(e)\n\t{\n\t\t//連接斷開\n\t\tstd::cout\u0026lt;\u0026lt;s-\u0026gt;remote_endpoint()\u0026lt;\u0026lt;\" out\\n\";\n\t\treturn;\n\t}\n\n\treader.write(buf.get(),n);\n\twhile(true)\n\t{\n\t\tdark::io::msg::message_t msg = reader.get_message();\n\t\tif(!msg)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tdark::io::msg::body_t body = msg.body();\n\t\tstd::string str(body,body.size());\n\n\t\tif(str == \"i want join cerberus\")\n\t\t{\n\t\t\tdark::io::msg::writer_t writer;\n\t\t\twriter.write(std::string(\"you are cerberus soldier now\"));\n\t\t\tdark::io::msg::message_t msg = writer.create_message(get_id());\n\t\t\tpost_send(s,msg);\n\t\t}\n\t}\n\n\t//投遞 異步 recv\n\tpost_recv(s,buf,reader);\n}\u003c/pre\u003e"