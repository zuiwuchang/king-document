var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \"cJSON.h\"\n#define TEST_UTF8_VAL\t\"test-中文測試-123\"\nclass scoped_json\n{\nprivate:\n    scoped_json(const scoped_json\u0026amp;);\n    scoped_json operator=(const scoped_json\u0026amp;);\n    cJSON* _ptr;\npublic:\n    scoped_json(cJSON* ptr):_ptr(ptr)\n    {\n    }\n    ~scoped_json()\n    {\n        if(_ptr)\n        {\n            cJSON_Delete(_ptr);\n        }\n    }\n};\nbool test_write(std::string\u0026amp; str)\n{\n    puts(\"\\n*****\ttest write\t*****\");\n\n    //創建一個 object 作爲 toot節點\n    cJSON* root = cJSON_CreateObject();\n    if(!root)\n    {\n        puts(\"bad create object\");\n        return false;\n    }\n    scoped_json scoped(root);\n\n    /***\tbase\t***/\n    //字符串\n    cJSON_AddStringToObject(root,\"Name\",\"kate\");\n    //number\n    cJSON_AddNumberToObject(root,\"Lv\",10);\n    //bool\n    cJSON_AddBoolToObject(root,\"Girl\",1);\n    //cJSON_AddTrueToObject(root,\"Girl\");\n\n    //null\n    cJSON_AddNullToObject(root,\"NullTest\");\n\n    //數組\n    cJSON* arrs = cJSON_CreateArray();\n    if(!arrs)\n    {\n        puts(\"bad create array\");\n        return false;\n    }\n    cJSON_AddItemToObject(root,\"Array\",arrs);\n    for(int i=0; i\u0026lt;10; ++i)\n    {\n        cJSON* number = cJSON_CreateNumber(i);\n        if(!number)\n        {\n            puts(\"bad create number\");\n            return false;\n        }\n        cJSON_AddItemToArray(arrs,number);\n    }\n\n    //object\n    cJSON* obj = cJSON_CreateObject();\n    if(!obj)\n    {\n        puts(\"bad create obj\");\n        return false;\n    }\n    cJSON_AddItemToObject(root,\"Object\",obj);\n    {\n        cJSON_AddNumberToObject(obj,\"Double\",1.23);\n        cJSON_AddStringToObject(obj,\"Text\",TEST_UTF8_VAL);\n    }\n    //輸出到 stdout\n    char* buf = cJSON_Print(root);\n    //不優化縮進 以便於人類觀看\n    //buf = cJSON_PrintUnformatted(root);\n\tif(!buf)\n\t{\n\t\tputs(\"bad print\");\n\t\treturn false;\n\t}\n\tstd::cout\u0026lt;\u0026lt;buf\u0026lt;\u0026lt;\"\\n\";\n\tstr = buf;\n\n\t//釋放  cJSON_Print cJSON_PrintUnformatted 返回的 內存\n\tcJSON_free(buf);\n    return true;\n}\nchar* getBool(cJSON* item)\n{\n\tswitch(item-\u0026gt;type)\n\t{\n\tcase cJSON_True:\n\t\treturn \"true\";\n\t\tcase cJSON_False:\n\t\treturn \"false\";\n\t}\n\treturn \"not a boolean\";\n}\nbool test_read(const std::string\u0026amp; str)\n{\n    puts(\"\\n*****\ttest read\t*****\");\n    cJSON * root = cJSON_Parse(str.c_str());\n    if(!root)\n    {\n        return false;\n    }\n\n    std::cout \u0026lt;\u0026lt;\"Name = \"\u0026lt;\u0026lt; cJSON_GetObjectItem(root,\"Name\")-\u0026gt;valuestring\n              \u0026lt;\u0026lt;\"\\nLv = \"\u0026lt;\u0026lt; cJSON_GetObjectItem(root,\"Lv\")-\u0026gt;valueint\n              \u0026lt;\u0026lt;\"\\nGirl = \"\u0026lt;\u0026lt;getBool(cJSON_GetObjectItem(root,\"Girl\"))\n              \u0026lt;\u0026lt;\"\\nIs Null : \"\u0026lt;\u0026lt;(cJSON_GetObjectItem(root,\"NullTest\")-\u0026gt;type == cJSON_NULL)\n              \u0026lt;\u0026lt;\"\\n\";\n\n    //array\n    cJSON* arrs = cJSON_GetObjectItem(root,\"Array\");\n    if(!arrs)\n    {\n        puts(\"Array not found\");\n        return false;\n    }\n    std::cout\u0026lt;\u0026lt;\"array = [\";\n    for(int i=0; i\u0026lt;cJSON_GetArraySize(arrs); ++i)\n    {\n        if(i)\n        {\n            std::cout\u0026lt;\u0026lt;\",\";\n        }\n        std::cout\u0026lt;\u0026lt;cJSON_GetArrayItem(arrs,i)-\u0026gt;valueint;\n    }\n    std::cout\u0026lt;\u0026lt;\"]\\n\";\n\n    //object\n    cJSON* obj = cJSON_GetObjectItem(root,\"Object\");\n    if(!obj)\n    {\n        puts(\"Object not found\");\n        return false;\n    }\n    std::cout\u0026lt;\u0026lt;\"Object.Double = \"\u0026lt;\u0026lt; cJSON_GetObjectItem(obj,\"Double\")-\u0026gt;valuedouble\u0026lt;\u0026lt;\"\\n\";\n    std::string text =  cJSON_GetObjectItem(obj,\"Text\")-\u0026gt;valuestring;\n    if(text != TEST_UTF8_VAL)\n    {\n        puts(\"bad utf8\");\n        return false;\n    }\n    std::cout\u0026lt;\u0026lt;\"Object.Text = \"\u0026lt;\u0026lt;text\u0026lt;\u0026lt;\"\\n\";\n\n    return true;\n}\nint main()\n{\n    std::string str;\n    test_write(str) \u0026amp;\u0026amp; test_read(str);\n\n    return 0;\n}\n\u003c/pre\u003e"