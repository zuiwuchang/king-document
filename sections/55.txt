var __v="\u003cpre class=\"k-pre\"\u003eJoin(string,interface{},string)\n第一个参数为连接类型，当前支持INNER, LEFT OUTER, CROSS中的一个值， 第二个参数为表名，可以为字符串或者bean， 第三个参数为连接条件。\n\n以下将通过示例来讲解具体的用法：\n\n假如我们拥有两个表user和group，每个User只在一个Group中，那么我们可以定义对应的struct\n\ntype Group struct {\n\tId int64\n\tName string\n}\ntype User struct {\n\tId int64\n\tName string\n\tGroupId int64 `xorm:\"index\"`\n}\nOK。问题来了，我们现在需要列出所有的User，并且列出对应的GroupName。利用extends和Join我们可以比较优雅的解决这个问题。代码如下：\n\ntype UserGroup struct {\n    User `xorm:\"extends\"`\n    Name string\n}\n\nfunc (UserGroup) TableName() string {\n\treturn \"user\"\n}\n\nusers := make([]UserGroup, 0)\nengine.Join(\"INNER\", \"group\", \"group.id = user.group_id\").Find(\u0026users)\n这里我们将User这个匿名结构体加了xorm的extends标记（实际上也可以是非匿名的结构体，只要有extends标记即可），这样就减少了重复代码的书写。实际上这里我们直接用Sql函数也是可以的，并不一定非要用Join。\n\nusers := make([]UserGroup, 0)\nengine.Sql(\"select user.*, group.name from user, group where user.group_id = group.id\").Find(\u0026users)\n然后，我们忽然发现，我们还需要显示Group的Id，因为我们需要链接到Group页面。这样又要加一个字段，算了，不如我们把Group也加个extends标记吧，代码如下：\n\ntype UserGroup struct {\n    User `xorm:\"extends\"`\n    Group `xorm:\"extends\"`\n}\n\nfunc (UserGroup) TableName() string {\n\treturn \"user\"\n}\n\nusers := make([]UserGroup, 0)\nengine.Join(\"INNER\", \"group\", \"group.id = user.group_id\").Find(\u0026users)\n这次，我们把两个表的所有字段都查询出来了，并且赋值到对应的结构体上了。\n\n这里要注意，User和Group分别有Id和Name，这个是重名的，但是xorm是可以区分开来的，不过需要特别注意UserGroup中User和Group的顺序，如果顺序反了，则有可能会赋值错误，但是程序不会报错。\n\n这里的顺序应遵循如下原则：\n\n结构体中extends标记对应的结构顺序应和最终生成SQL中对应的表出现的顺序相同。\n还有一点需要注意的，如果在模板中使用这个UserGroup结构体，对于字段名重复的必须加匿名引用，如：\n\n对于不重复字段，可以{{.GroupId}}，对于重复字段{{.User.Id}}和{{.Group.Id}}\n\n这是2个表的用法，3个或更多表用法类似，如：\n\ntype Type struct {\n\tId int64\n\tName string\n}\n\ntype UserGroupType struct {\n    User `xorm:\"extends\"`\n    Group `xorm:\"extends\"`\n    Type `xorm:\"extends\"`\n}\n\nusers := make([]UserGroupType, 0)\nengine.Table(\"user\").Join(\"INNER\", \"group\", \"group.id = user.group_id\").\n\tJoin(\"INNER\", \"type\", \"type.id = user.type_id\").\n\tFind(\u0026users)\n同时，在使用Join时，也可同时使用Where和Find的第二个参数作为条件，Find的第二个参数同时也允许为各种bean来作为条件。Where里可以是各个表的条件，Find的第二个参数只是被关联表的条件。\n\nengine.Table(\"user\").Join(\"INNER\", \"group\", \"group.id = user.group_id\").\n\tJoin(\"INNER\", \"type\", \"type.id = user.type_id\").\n\tWhere(\"user.name like ?\", \"%\"+name+\"%\").Find(\u0026users, \u0026User{Name:name})\u003c/pre\u003e"