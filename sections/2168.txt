var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;cassert\u0026gt;\n#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;ctime\u0026gt;\n#include \u0026lt;cstdlib\u0026gt;\n#include \u0026lt;boost/thread.hpp\u0026gt;\n\n//同步對象\nboost::mutex m;\n//生產者 通知\nboost::condition_variable cv_producer;\n//消費者 通知\nboost::condition_variable cv_consumer;\n//產品 為0 未生產\nint v = 0;\nvoid producer()\n{\n\twhile(true)\n\t{\n\t\tboost::unique_lock\u0026lt;boost::mutex\u0026gt; lock(m);\n\t\twhile(v)\n\t\t{\n\t\t\t//產品還未被消費掉 等待消費者消費\n\t\t\tcv_producer.wait(lock);\n\t\t}\n\t\tassert(v == 0);\n\t\tv = std::rand()%10 + 1;\n\t\tstd::cout\u0026lt;\u0026lt;\"producer \"\u0026lt;\u0026lt;v\u0026lt;\u0026lt;\"\\n\";\n\n\t\t//喚醒一個 消費者\n\t\tcv_consumer.notify_one();\n\t}\n}\n\nvoid consumer()\n{\n\twhile(true)\n\t{\n\t\tboost::unique_lock\u0026lt;boost::mutex\u0026gt; lock(m);\n\t\twhile(!v)\n\t\t{\n\t\t\t//產品還未生產 等待生產者生產\n\t\t\tcv_consumer.wait(lock);\n\t\t}\n\n\t\tassert(v != 0);\n\t\t\n\t\tstd::cout\u0026lt;\u0026lt;\"consumer \"\u0026lt;\u0026lt;v\u0026lt;\u0026lt;\"\\n\";\n\t\tv = 0;\n\n\t\t//喚醒一個 生產者\n\t\tcv_producer.notify_one();\n\t}\n}\n\nint main()\n{\n\tstd::srand(std::time(NULL));\n\t\n\t//創建 生產者\n\tboost::thread producer0(producer);\n\t\n\tfor(int i=0;i\u0026lt;std::rand()%5+5;++i)\n\t{\n\t\tboost::thread t(producer);\n\t}\n\t\n\t//創建 消費者\n\tfor(int i=0;i\u0026lt;std::rand()%5+5;++i)\n\t{\n\t\tboost::thread t(consumer);\n\t}\n\t\n\n\tproducer0.join();\n\n    return 0;\n}\u003c/pre\u003e"