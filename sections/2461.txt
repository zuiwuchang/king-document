var __v="\u003cpre class=\"k-pre\"\u003epython 提供3中 浮點 float complex 標準庫的 decimal.Decimal\n\nfloat 存放雙進度浮點 具體取值範圍 依賴構建python的 編譯器\n\ndecimal.Decimal 可以處理高精度的 浮點 默認(小數後28位) \n並且沒有 計算機處理浮點時的 丟精問題 當然 速度肯定慢很多\n\nint 和 float 計算 產生 float\nfloat ... complex ... complex\n\ndecimal.Decimal 只能和 decimal.Decimal/intS 計算\n\n不兼容的 型別 計算 會 產生 TypeError 異常\n\n\n\nsys.float_info\t//存放了 浮點相關 信息 \n\t.epsilon 存放了機器可以區分的最小浮點數\n\t(\n\t\timport sys\n\t\tdef eqal_float(a,b):\n\t\t\treturn abs(a-b) \u0026lt;= sys.float_info.epsilon\n\t\tprint(eqal_float(1.1,1.2))\n\t)\n\n\n//將浮點 取整/四捨五入/向上取整/向下取整\nint()\nround()\nmath.floor()\nmath.ceil()\n\n//浮點 十六進制 轉化\nfloat.hex()\nfloat.formhex()\n\n\n\n\nmath.acos(x)\t//(弧度)飯餘弦\nmath.acosh(x)\t//反正切\n\nmath.asin(x)\t//飯正弦\nmath.asinh(x)\t//反雙曲正弦\n\nmath.atan(x)\t//反正切\nmath.atan2(y,x)\t//y/x的反正切\nmath.atanh(x)\t//反雙曲正切\n\nmath.ceil(x)\t//向上取整\nmath.copysign(x,y)\t//將x的符號設置為y的符號\n\nmath.cos(x)\t\t//餘弦\nmath.cosh(x)\t//餘弦(角度)\n\nmath.degress(r)\t//弧度轉角度\n\nmath.e\t//常數e 2.7182818284590451...\nmath.exp(x)\t//math.e ** x\nmath.fabs(x)\t//絕對值\n\nmath.factorial(x)\t//返回x!\n\nmath.floor(x)\t//向下取整\nmath.fmod(x,y)\t//求餘 比 % 產生 更好的 結果\nmath.frexp(x)\t//返回 二元 tuple 分別為 x的 整數 與 浮點數\nmath.fsum(i)\t//對iterable i中的 值 求和\nmath.hypot(x,y)\t//對x*x + y*y 開方\n\nmath.isinf(x)\t//如果 x是 +- inf(+-∞) 返回True\nmath.isnan(x) \t//x 不是一個 數字 返回 True\n\nmath.ldexp(m,e)\t//m * (2**e) 反轉了math.frexp()\n\nmath.log(x,b)\t//b默認為 math.e\nmath.log10(x)\nmath.log1p(x)\n\nmath.modf(x)\t//以 tuple 返回 x的 小數與 整數部分\n\nmath.pi\t//3.141592653589793\nmath.pow(x,y)\n\nmath.radians(d)\t//角度轉弧度\n\nmath.sin(x)\nmath.sinh(x)\n\nmath.sqrt(x)\t//返回平方根\nmath.sum(i)\t//對iterable i中的 值求和\n\nmath.tan(x)\nmath.tanh(x)\n\nmath.trunc(x)\t//同 int(x)\n\u003c/pre\u003e"