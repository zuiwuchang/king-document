var __v="\n\u003cpre class='prettyprint linenums'\u003epackage main\n\nimport (\n\t\"fmt\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"log\"\n\t\"net\"\n\tpb \"test/grpc/protoc\"\n)\n\nconst (\n\tLAddr = \":1102\"\n)\n\nfunc main() {\n\t//創建 監聽 Listener\n\tl, e := net.Listen(\"tcp\", LAddr)\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\tlog.Println(\"work at\", LAddr)\n\n\t//創建 rpc 服務器\n\tcreds, e := credentials.NewServerTLSFromFile(\"test.crt\", \"test.key\")\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\ts := grpc.NewServer(\n\t\t//設置 tls\n\t\tgrpc.Creds(creds),\n\t)\n\n\t//註冊 服務\n\tpb.RegisterTestServerServer(s, \u0026amp;testServer{})\n\n\t//註冊 反射 到 服務 路由\n\treflection.Register(s)\n\n\t//讓 rpc 在 Listener 上 工作\n\tif e := s.Serve(l); e != nil {\n\t\tlog.Fatalln(e)\n\t}\n}\n\n//定義 服務器\ntype testServer struct {\n}\n\n//實現 服務器 接口\nfunc (s *testServer) Say(ctx context.Context, in *pb.SayRequest) (*pb.SayReply, error) {\n\t// 解析metada中的信息并验证\n\tmd, ok := metadata.FromIncomingContext(ctx)\n\tif !ok {\n\t\treturn nil, grpc.Errorf(codes.Unauthenticated, \"unknow token\")\n\t}\n\tfmt.Println(md[\"appkey\"])\n\n\t//邏輯 處理\n\tfmt.Printf(\"%v say : %v\\n\", in.Name, in.Text)\n\n\t//響應\n\treturn \u0026amp;pb.SayReply{\n\t\t\tText: \"OK\",\n\t\t},\n\t\tnil\n}\n\u003c/pre\u003e"