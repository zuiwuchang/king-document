var __v="\u003cpre class=\"k-pre\"\u003e类似于应用层的事件对象\n\n//初始化事件对象\nVOID \n  KeInitializeEvent(\n    IN PRKEVENT  Event,\t\t//事件对象指针\n    IN EVENT_TYPE  Type,\t//类型\tNotificationEvent(通知事件)\tNotificationEvent (同步事件)\n    IN BOOLEAN  State\t\t//事件对象初始化状态 TRUE(激发态) FALSE(非激发) \n    );\n通知事件 需要程序员手动调整事件对象状态\n同步事件 当事件对象为激发态时遇到KeWait...等待函数时 自动变为非激发态 \n\n//设置非激活\t返回以前状态\nLONG \n  KeResetEvent(\n    IN PRKEVENT  Event\n    );\n    \n//设置激活\t返回以前状态\nLONG \n  KeSetEvent(\n    IN PRKEVENT  Event,\n    IN KPRIORITY  Increment,\t//IO_NO_INCREMENT\n    IN BOOLEAN  Wait\t\t//FALSE\n    );\n Increment: 预备给被唤醒线程临时提升线程优先级的增量。一般情况下均为IO_NO_INCREMENT 0，但针对不同的子系统及对响应快慢的不同要求，会有不同的取值。如网络相关：IO_NETWORK_INCREMENT=2；键盘、鼠标涉及用户界面交互部分：取值为6 （IO_KEYBOARD_INCREMENT， IO_MOUSE_INCREMENT）；声音相关，IO_SOUND_INCREMENT=8\n \n Wait 允许在内部快速的把控制从一个线程传递到另一个线程\n 若为 TRUE 权限将被提升到IRQL \u0026lt;= APC_LEVEL (故函数需要在非分页内存中 ) 后面必须跟上 KeWait...函数 用以降低权限\n 若为 FALSE IRQL \u0026lt;= DISPATCH_LEVEL\nring0使用 ring3创建的事件对象\n\n先由 DeviceIoControl 获取到事件对象句柄\n         \n//由句柄获取指针 此函数会使引用计数+1\nNTSTATUS \n  ObReferenceObjectByHandle(\n    IN HANDLE  Handle,\t\t\t\t\t\t\t//句柄\n    IN ACCESS_MASK  DesiredAccess,\t\t\t\t\t//访问权限 EVENT_MODIFY_STATE\n    IN POBJECT_TYPE  ObjectType  OPTIONAL,\t\t\t\t//句柄类型 比如事件对象为 *ExEventObjectType\n    IN KPROCESSOR_MODE  AccessMode,\t\t\t\t\t//驱动程式需要设置为 KernelMode\n    OUT PVOID  *Object,\t\t\t\t\t\t\t//传出 对象指针\n    OUT POBJECT_HANDLE_INFORMATION  HandleInformation  OPTIONAL\t\t//驱动程式需设置为 NULL\n    );\n    \n//使引用计数-1\nVOID \n  ObDereferenceObject(\n    IN PVOID  Object\n    );    \n不同驱动 同步 创建带名字的事件对象\n\n//创建 或 打开 通知事件对象\nPKEVENT  \n  IoCreateNotificationEvent(\n    IN PUNICODE_STRING  EventName,\n    OUT PHANDLE  EventHandle\n    );\n\n//创建 或 打开 同步事件对象\nPKEVENT \n  IoCreateSynchronizationEvent(\n    IN PUNICODE_STRING  EventName,\n    OUT PHANDLE  EventHandle\n    );\n    \n需要通过ObReferenceObjectByHandle将句柄转化为指针\n\u003c/pre\u003e\n"