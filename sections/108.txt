var __v="\u003cpre class=\"prettyprint linenums\"\u003epackage main\n\nimport (\n\t\"fmt\"\n)\n\n//定義 算法族 接口\ntype AttackInterface interface {\n\tAttack()\n}\n\n//不能 攻擊\ntype AttackNoWay struct {\n\tI int\n}\n\nfunc (a *AttackNoWay) Attack() {\n\tfmt.Println(\"不能 攻擊\")\n}\n\n//刀 攻擊\ntype AttackKnife struct {\n}\n\nfunc (a *AttackKnife) Attack() {\n\tfmt.Println(\"刀 攻擊\")\n}\n\n//劍 攻擊\ntype AttackSword struct {\n}\n\nfunc (a *AttackSword) Attack() {\n\tfmt.Println(\"劍 攻擊\")\n}\n\n//匕首 攻擊\ntype AttackDagger struct {\n}\n\nfunc (a *AttackDagger) Attack() {\n\tfmt.Println(\"匕首 攻擊\")\n}\n\n//定義 角色 基本行為 oo中的 基類\ntype RoleInterface interface {\n\tPerformAttack()\n\tChangeAttack(attack AttackInterface)\n}\n\ntype Role struct {\n\tAttackI AttackInterface\n}\n\nfunc (r *Role) PerformAttack() {\n\tif r.AttackI != nil {\n\t\tr.AttackI.Attack()\n\t}\n}\nfunc (r *Role) ChangeAttack(attack AttackInterface) {\n\tr.AttackI = attack\n}\n\ntype Npc struct {\n\tRole\n}\n\nfunc MakeNpc() *Npc {\n\trs := \u0026amp;Npc{}\n\trs.AttackI = \u0026amp;AttackNoWay{}\n\treturn rs\n}\n\ntype Soldier struct {\n\tRole\n}\n\nfunc MakeSoldier() *Soldier {\n\trs := \u0026amp;Soldier{}\n\trs.AttackI = \u0026amp;AttackKnife{}\n\treturn rs\n}\n\ntype Assassin struct {\n\tRole\n}\n\nfunc MakeAssassin() *Assassin {\n\trs := \u0026amp;Assassin{}\n\trs.AttackI = \u0026amp;AttackDagger{}\n\treturn rs\n}\n\nfunc main() {\n\troles := make([]RoleInterface, 0, 10)\n\troles = append(roles, MakeNpc())\n\troles = append(roles, MakeSoldier())\n\t//使用 劍 工具 的 戰士\n\ts := MakeSoldier()\n\ts.ChangeAttack(\u0026amp;AttackSword{})\n\troles = append(roles, s)\n\n\troles = append(roles, MakeAssassin())\n\n\tfor _, v := range roles {\n\t\tv.PerformAttack()\n\t}\n}\u003c/pre\u003e"