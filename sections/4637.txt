var __v="\n\u003cpre class='prettyprint linenums'\u003epackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n)\n\nfunc main() {\n\t//創建 root 命令\n\tvar name string\n\tvar rootCmd = \u0026amp;cobra.Command{\n\t\t//root 命令名\n\t\tUse: \"app\",\n\t\t//簡短的 命令 說明\n\t\tShort: \"測試 cobra\",\n\t\t//詳細的 命令 說明\n\t\tLong: `孤 測試 cobra 庫用法的 試驗 代碼\n\tby king\n\thttp://github.com/spf13/cobra`,\n\t\t//匹配到 命令時執行的 代碼\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tfmt.Println(\"this is run by\", name)\n\t\t},\n\t}\n\t//參數 解析 類似 標準庫的 flag\n\t//flags := rootCmd.PersistentFlags()\n\tflags := rootCmd.Flags() // 和PersistentFlags 的區別在於 PersistentFlags 為全局的 參數 使用子命令也可以使用\n\tflags.StringVarP(\u0026amp;name,\n\t\t\"name\", //和 標準庫 StringVar 區別在於 此參數 指定 長命令 --xxx\n\t\t\"n\",    //和 標準庫 StringVar 區別在於 此參數 指定 短命令 -x\n\t\t\"king\", \"who run\")\n\n\t//添加子命令\n\trootCmd.AddCommand(\u0026amp;cobra.Command{\n\t\t//子命令 名稱\n\t\tUse: \"debug\",\n\t\t//為 命令 設置可選的 別名 (別名 可以是一個 任意長度的 字符串 數組)\n\t\tAliases: []string{\"d0\", \"d1\"},\n\t\tShort:   \"Short Debug\",\n\t\tLong:    \"Long Debug\",\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tfmt.Println(\"this is debug\")\n\t\t},\n\t})\n\n\t//路由 並執行 命令\n\tfmt.Println(rootCmd.Execute())\n}\n\u003c/pre\u003e"