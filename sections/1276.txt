var __v="\u003cpre class=\"k-pre\"\u003e\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;string\u0026gt;\n#include \u0026lt;cstring\u0026gt;\n\n\nclass Animal\n{\nprivate:\n    char* _name = nullptr;\npublic:\n    Animal(const char* name)\n    {\n        _name = new char[strlen(name)+1];\n        strcpy(_name,name);\n        printf(\"%s create %08x\\n\",_name,this);\n    }\n    Animal(const Animal\u0026amp; copy)\n    {\n        const char* name = copy._name;\n\n        _name = new char[strlen(name)+1];\n        strcpy(_name,name);\n\n        printf(\"%s copy %08x\\n\",_name,this);\n    }\n    Animal(Animal\u0026amp;\u0026amp; copy)\n    {\n        _name = copy._name;\n        copy._name = nullptr;\n\n        printf(\"%s move %08x\\n\",_name,this);\n    }\n    Animal\u0026amp; operator=(Animal\u0026amp;\u0026amp; copy)\n    {\n        _name = copy._name;\n        copy._name = nullptr;\n\n        printf(\"%s move = %08x\\n\",_name,this);\n        return *this;\n    }\n\n    ~Animal()\n    {\n        if(_name)\n        {\n            printf(\"%s die %08x\\n\",_name,this);\n            delete _name;\n        }\n    }\n\n    void Speak()const\n    {\n        if(_name)\n        {\n            printf(\"i'm %s\\n\",_name);\n        }\n        else\n        {\n            puts(\"i'm NULL\");\n        }\n    }\n\n};\n\nAnimal make_animal(const char* name)\n{\n    return Animal(name);\n}\n\nint main()\n{\n    {\n        puts(\"********  one ********\");\n        Animal cat(make_animal(\"cat\"));\n        cat.Speak();\n    }\n\n    {\n        puts(\"********  two ********\");\n        Animal d1 = make_animal(\"dog\");\n        //Animal dog = d1; //copy 構造\n        Animal dog = std::move(d1);\n        d1.Speak();     //i'm null\n        dog.Speak();\n    }\n\n\n    return 0;\n}\u003c/pre\u003e\n\n\n\u003cstrong\u003e輸出\u003c/strong\u003e\n********  one ********\ncat create 0022fdb0\ncat move 0022fe20\ncat move 0022fe10\ni'm cat\ncat die 0022fe10\n********  two ********\ndog create 0022fdb0\ndog move 0022fe30\ndog move 0022fe00\ndog move 0022fdf0\ni'm NULL\ni'm dog\ndog die 0022fdf0\n\n\u003cstrong\u003e分析\u003c/strong\u003e\nAnimal(Animal\u0026\u0026 copy) 定義了一個 move 語義\n當 傳入 右值時 將 引發 次 函數的調用\n其中 別沒有 申請 _name 的 內存 而是 直接 將 copy的 _name 資源 接管\n同時 讓copy 放棄 資源管理權 從而 極大的提高了效率\n\u003c/pre\u003e"