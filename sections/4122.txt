var __v="\n\u003cpre class='prettyprint linenums'\u003epackage main\n\nimport (\n\t\"image\"\n\t_ \"image/gif\"\n\t_ \"image/jpeg\"\n\t\"image/png\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\t//加載圖像\n\tr, e := os.Open(\"background.jpg\")\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\tdefer r.Close()\n\n\t//解碼 返回 Image接口 格式字符串 錯誤\n\timg, _, e := image.Decode(r)\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\n\t//創建新圖像\n\timg, e = newImage(img)\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\n\t//保存圖像\n\tw, e := os.Create(\"background.png\")\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\tdefer w.Close()\n\t//編碼\n\te = png.Encode(w, img)\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n}\nfunc newImage(src image.Image) (image.Image, error) {\n\t//創建新圖像\n\tbounds := src.Bounds()\n\tdist := image.NewRGBA(src.Bounds())\n\n\t//設置像素\n\tmin := bounds.Min\n\tmax := bounds.Max\n\tfor x := min.X; x \u0026lt; max.X; x++ {\n\t\tfor y := min.Y; y \u0026lt; max.Y; y++ {\n\t\t\tdist.Set(x-min.X, y-min.Y, src.At(x, y))\n\t\t}\n\t}\n\n\t//返回 Image 接口\n\treturn dist.SubImage(bounds), nil\n}\n\u003c/pre\u003e"