var __v="\u003cpre class=\"k-pre\"\u003eA JSON request is an HTTP request using a valid JSON payload as request body. Its Content-Type header must specify the text/json or application/json MIME type.\n\nBy default an action uses an any content body parser, which you can use to retrieve the body as JSON (actually as a Jackson JsonNode):\n\nimport com.fasterxml.jackson.databind.JsonNode;\n...\n\npublic static Result sayHello() {\n  JsonNode json = request().body().asJson();\n  if(json == null) {\n    return badRequest(\"Expecting Json data\");\n  } else {\n    String name = json.findPath(\"name\").textValue();\n    if(name == null) {\n      return badRequest(\"Missing parameter [name]\");\n    } else {\n      return ok(\"Hello \" + name);\n    }\n  }\n}\nOf course itâ€™s way better (and simpler) to specify our own BodyParser to ask Play to parse the content body directly as JSON:\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport play.mvc.BodyParser;\n...\n\n@BodyParser.Of(BodyParser.Json.class)\npublic static Result sayHello() {\n  JsonNode json = request().body().asJson();\n  String name = json.findPath(\"name\").textValue();\n  if(name == null) {\n    return badRequest(\"Missing parameter [name]\");\n  } else {\n    return ok(\"Hello \" + name);\n  }\n}\nNote: This way, a 400 HTTP response will be automatically returned for non JSON requests with Content-type set to application/json.\n\nYou can test it with cURL from a command line:\n\ncurl \n  --header \"Content-type: application/json\" \n  --request POST \n  --data '{\"name\": \"Guillaume\"}' \n  http://localhost:9000/sayHello\nIt replies with:\n\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nContent-Length: 15\n\nHello Guillaume\u003c/pre\u003e"