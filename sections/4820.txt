var __v="\u003cpre class='k-pre'\u003eUpdate 啟動一個 可寫 事務\nView 啟動一個 只讀 事務\nBatch 啟動 批量寫入 事務\n\n上面 都 要求 一個 回調函數 func(t *bolt.Tx) error 作為參數\n回調 返回 任務 error 則 自動 Rollback 並將此錯誤 返回給調用者 否則 自動 調用 Commit \n\u003c/pre\u003e\n\u003cpre class='prettyprint linenums'\u003epackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/boltdb/bolt\"\n\t\"log\"\n\t\"time\"\n)\n\nfunc main() {\n\t// 如果 不存在檔案 則 創建數據庫\n\t// 否則 打開數據庫\n\tdb, e := bolt.Open(\"my.db\", 0600, \u0026amp;bolt.Options{Timeout: time.Second})\n\tif e != nil {\n\t\tlog.Fatal(e)\n\t}\n\t// 關閉 數據庫\n\tdefer db.Close()\n\n\t// 啟動 一個 可寫 事務\n\te = db.Update(func(t *bolt.Tx) error {\n\t\t// ...\n\t\treturn e\n\t})\n\tif e != nil {\n\t\tlog.Fatal(e)\n\t}\n\n\t// 啟動 一個 只讀 事務\n\te = db.View(func(t *bolt.Tx) error {\n\t\t// ...\n\t\treturn nil\n\t})\n\tif e != nil {\n\t\tlog.Fatal(e)\n\t}\n\n\t// 批量 寫入\n\tdb.Batch(func(t *bolt.Tx) error {\n\t\t// ...\n\t\treturn nil\n\t})\n\tif e != nil {\n\t\tlog.Fatal(e)\n\t}\n}\n\u003c/pre\u003e"