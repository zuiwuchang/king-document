var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;cstdio\u0026gt;\n#include \u0026lt;vector\u0026gt;\n\n#include \u0026lt;sqlite3.h\u0026gt;\nbool exec_simple(sqlite3*\tpDb);\nint callback(void* lParam\n             , int columns \t\t\t//數組長度\n             , char **values\t\t//數據value\t數組\n             , char **name\t\t\t//字段名\t數組\n            ) ;\n\nbool exec_stmt(sqlite3*\tpDb);\nint main()\n{\n    //使用 utf8 操作示例\n\n    sqlite3*\tpDb = NULL;\n    //打開數據庫\n    if (sqlite3_open(\"data.db\", \u0026amp;pDb))\n    {\n        std::cout\u0026lt;\u0026lt;\"打開失敗\"\u0026lt;\u0026lt;sqlite3_errmsg(pDb)\u0026lt;\u0026lt;std::endl;\n        /*sqlite3_open 失敗 依然需要 sqlite3_close*/\n        sqlite3_close(pDb);\n        return 0;\n    }\n\n    exec_simple(pDb) \u0026amp;\u0026amp;\n    exec_stmt(pDb) ;\n\n    //關閉數據庫\n    sqlite3_close(pDb);\n    return 0;\n}\n\nbool exec_simple(sqlite3*\tpDb)\n{\n    puts(\"/***********  exec_simple *************/\");\n\n    char* errmsg = NULL;\n\n    puts(\"create\");\n    std::string sql = \"create table if not exists test(id integer primary key autoincrement,name varchar(20))\";\n    if(SQLITE_OK\t!=\tsqlite3_exec(pDb, sql.c_str() , 0 , 0 , \u0026amp;errmsg))\n    {\n        std::cout\u0026lt;\u0026lt;errmsg\u0026lt;\u0026lt;std::endl;\n        return false;\n    }\n\n    puts(\"delete and insert\");\n    sql = \"delete from test\";\n    if(SQLITE_OK\t!=\tsqlite3_exec(pDb, sql.c_str() , 0 , 0 , \u0026amp;errmsg))\n    {\n        std::cout\u0026lt;\u0026lt;errmsg\u0026lt;\u0026lt;std::endl;\n        return false;\n    }\n    sql = \"insert into test (name) values ('illusive man'),('anita')\";\n    if(SQLITE_OK\t!=\tsqlite3_exec(pDb, sql.c_str() , 0 , 0 , \u0026amp;errmsg))\n    {\n        std::cout\u0026lt;\u0026lt;errmsg\u0026lt;\u0026lt;std::endl;\n        return false;\n    }\n\n    puts(\"select call back\");\n    sql = \"select * from test\";\n    if(SQLITE_OK\t!=\tsqlite3_exec(pDb, sql.c_str() , callback , 0 , \u0026amp;errmsg))\n    {\n        std::cout\u0026lt;\u0026lt;errmsg\u0026lt;\u0026lt;std::endl;\n        return false;\n    }\n\n\n    puts(\"select\");\n    int rows, columns;\n    char **results;\n    if(SQLITE_OK\t!=\tsqlite3_get_table(pDb, sql.c_str() ,\u0026amp;results,\u0026amp;rows,\u0026amp;columns,\u0026amp;errmsg))\n    {\n        std::cout\u0026lt;\u0026lt;errmsg\u0026lt;\u0026lt;std::endl;\n        return false;\n    }\n\n    for (int i = 0; i \u0026lt; rows + 1; i++)\n    {\n        for (int j = 0; j \u0026lt; columns; j++)\n        {\n            std::cout\u0026lt;\u0026lt;results[i*columns+j]\u0026lt;\u0026lt;\"\\t\";\n        }\n        std::cout\u0026lt;\u0026lt;\"\\n\";\n    }\n    //釋放results\n    sqlite3_free_table(results);\n\n    return true;\n}\nint callback(void* lParam\n             , int columns \t\t\t//數組長度\n             , char **values\t\t//數據value\t數組\n             , char **name\t\t\t//字段名\t數組\n            )\n{\n\n    for(int i = 0 ; i \u0026lt; columns ; i++)\n    {\n        std::cout \u0026lt;\u0026lt; name[i] \u0026lt;\u0026lt; \" = \" \u0026lt;\u0026lt; (values[i] ? values[i] : \"NULL\") \u0026lt;\u0026lt; \", \" ;\n    }\n\n    std::cout\u0026lt;\u0026lt;\"\\n\";\n    return 0;\n}\nbool exec_stmt(sqlite3*\tpDb)\n{\n    puts(\"/***********  exec_stmt *************/\");\n    sqlite3_stmt* pStmt;\n    std::string sql\t=\t\"insert into test (name) values (?)\";\n    puts(\"insert\");\n    //解析一個 sq l到 sqlite3_stmt 的接口\n    if(SQLITE_OK\t!=\tsqlite3_prepare(pDb,sql.c_str(),\n                                        -1,     //sql語句長度 小於0 自動計算\n                                        \u0026amp;pStmt,\n                                        0))\n    {\n        std::cout\u0026lt;\u0026lt;sqlite3_errmsg(pDb)\u0026lt;\u0026lt;std::endl;\n        return false;\n    }\n    std::vector\u0026lt;std::string\u0026gt; names;\n    names.push_back(\"stmt illusive man\");\n    names.push_back(\"stmt anita\");\n    for(std::size_t i=0; i\u0026lt;names.size(); ++i)\n    {\n        //解析參數\n        if(sqlite3_bind_text(pStmt\n                             ,1\t//前面sql語句 ? 的索引\n                             ,names[i].c_str()\n                             ,names[i].size()\n                             ,0)//回調函數\n          )\n        {\n            sqlite3_finalize(pStmt);\n            std::cout\u0026lt;\u0026lt;sqlite3_errmsg(pDb)\u0026lt;\u0026lt;std::endl;\n            return false;\n        }\n\n        //執行預處理命令\n        if(SQLITE_DONE!=sqlite3_step(pStmt))\n        {\n            sqlite3_finalize(pStmt);\n            std::cout\u0026lt;\u0026lt;sqlite3_errmsg(pDb)\u0026lt;\u0026lt;std::endl;\n            return false;\n        }\n\n        //重置預處理\n        if (SQLITE_OK !=sqlite3_reset(pStmt))\n        {\n            sqlite3_finalize(pStmt);\n            std::cout\u0026lt;\u0026lt;sqlite3_errmsg(pDb)\u0026lt;\u0026lt;std::endl;\n            return false;\n        }\n    }\n    //釋放資源 預處理資源\n    sqlite3_finalize(pStmt);\n\n\n    puts(\"select\");\n    sql = \"select * from test\";\n    if(SQLITE_OK !=\tsqlite3_prepare(pDb,\n                                    sql.c_str(),\n                                    -1,\n                                    \u0026amp;pStmt,\n                                    0))\n    {\n        std::cout\u0026lt;\u0026lt;sqlite3_errmsg(pDb)\u0026lt;\u0026lt;std::endl;\n        return false;\n    }\n\n    //獲取字段名\n    int col_count = sqlite3_column_count(pStmt);    //字段數\n    for (int i = 0; i \u0026lt; col_count; i++)\n    {\n        const  char* name = sqlite3_column_name(pStmt, i); //字段名\n        std::cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \" \\t \" ;\n    }\n     std::cout\u0026lt;\u0026lt;\"\\n\";\n\n    //循環讀出所有記錄\n    while (SQLITE_ROW\t==\tsqlite3_step(pStmt))\n    {\n        int id = sqlite3_column_int(pStmt,0);\n        const  unsigned char* name = sqlite3_column_text(pStmt,1);\n\n        std::cout \u0026lt;\u0026lt; id \u0026lt;\u0026lt; \" \\t \" \u0026lt;\u0026lt; name\u0026lt;\u0026lt; \"\\n\" ;\n    }\n\n    //釋放資源 預處理資源\n    sqlite3_finalize(pStmt);\n    return true;\n}\u003c/pre\u003e"