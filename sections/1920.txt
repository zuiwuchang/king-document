var __v="\n\u003cpre class='prettyprint linenums'\u003e// PocoTest.cpp : 定义控制台应用程序的入口点。\n//\n\n#include \"stdafx.h\"\n\n\n#include\u0026lt;Poco/Data/SQLite/Connector.h\u0026gt;\n#include\u0026lt;Poco/Data/DataException.h\u0026gt;\n#include\u0026lt;Poco/Data/Common.h\u0026gt;\n#include\u0026lt;Poco/Data/RecordSet.h\u0026gt;\n\nclass role_t\n{\nprotected:\n\tint id_;\n\tstd::string name_;\n\npublic:\n\trole_t()\n\t{\n\t\tid_\t=\t0;\n\t}\n\t\n\tinline void name(std::string\u0026amp; _name)\n\t{\n\t\tname_\t=\t_name;\n\t}\n\tinline std::string name()const\n\t{\n\t\treturn name_;\n\t}\n\tinline void id(int _id)\n\t{\n\t\tid_\t=\t_id;\n\t}\n\tinline int id()const\n\t{\n\t\treturn id_;\n\t}\n\n\n\t \n\t//(可選)為關聯容器重載比較操作符 \n\tbool operator \u0026lt;(const role_t\u0026amp; role) const \n\t{\n\t\treturn id_ \u0026lt; role.id_;\n    }\n\t//(可選)為關聯容器返回 key \n\tinline int operator()() const \n\t{\n\t\treturn id_;\n\t}\n\n};\n\n//特化模板\nnamespace Poco \n{\n\n\tnamespace Data \n\t{\n\t\ttemplate\u0026lt;\u0026gt;\n\t\tclass TypeHandler\u0026lt;class role_t\u0026gt;\n\t\t{\n\t\tpublic:\n\t\t\tstatic std::size_t size()\n\t\t\t{\n\t\t\t\treturn 2; //返回要處理的 數據字段數\n\t\t\t}\n\n\t\t\t//指定如何綁定 數據 \n\t\t\tstatic void bind(std::size_t pos, const role_t\u0026amp; obj, AbstractBinder* pBinder)\n\t\t\t{\n\t\t\t\tpoco_assert_dbg (pBinder != 0);\n\t\t\t\tTypeHandler\u0026lt;int\u0026gt;::bind(pos++, obj.id(), pBinder);\n\t\t\t\tTypeHandler\u0026lt;std::string\u0026gt;::bind(pos++, obj.name(), pBinder);\n\t\t\t}\n\n\t\t\t//指定如何 解析 prepare 字段\n\t\t\tstatic void prepare(std::size_t pos, const role_t\u0026amp; obj, AbstractPreparation* pPrepare)\n\t\t\t{\n\t\t\t\tpoco_assert_dbg (pPrepare != 0);\n\t\t\t\tTypeHandler\u0026lt;int\u0026gt;::prepare(pos++, obj.id(), pPrepare);\n\t\t\t\tTypeHandler\u0026lt;std::string\u0026gt;::prepare(pos++, obj.name(), pPrepare);\t\n\t\t\t}\n\n\t\t\t//指定如何處理 返回的數據\n\t\t\tstatic void extract(std::size_t pos, role_t\u0026amp; obj, const role_t\u0026amp; defVal, AbstractExtractor* pExt)\n\t\t\t{\n\t\t\t\tpoco_assert_dbg (pExt != 0);\n\t\t\t\tint id;\n\t\t\t\tstd::string name;\n\t\t\t\t\n\t\t\t\t//接受返回的數據\t如果字段為NULL 將值設置為 defVal\n\t\t\t\tTypeHandler\u0026lt;int\u0026gt;::extract(pos++, id, defVal.id(), pExt);\n\t\t\t\tTypeHandler\u0026lt;std::string\u0026gt;::extract(pos++, name, defVal.name(), pExt);\n\t\t\t\t\n\t\t\t\t//設置返回的數據結構\n\t\t\t\tobj.id(id);\n\t\t\t\tobj.name(name);\n\t\t\t\t\n\t\t\t}\n\t\t};\n\t};\n};\nint _tmain(int argc, _TCHAR* argv[])\n{\n\t//註冊SQLite連接器\n\tPoco::Data::SQLite::Connector::registerConnector();\n\n\ttry\n\t{\n\t\t//連接到數據庫\n\t\tPoco::Data::Session  session(Poco::Data::SQLite::Connector::KEY\t//std::string 指明數據庫種類\n\t\t\t,\"test.db\"\t//連接字符串\n\t\t\t);\n\n\t\t//創建表\n\t\tsession\u0026lt;\u0026lt;\"create table if not exists test (id int,name varchar(20))\",Poco::Data::now;\n\n\t\t//刪除數據\n\t\tsession\u0026lt;\u0026lt;\"delete from test\",Poco::Data::now;\n\t\t\n\t\trole_t role;\n\t\trole.id(1);\n\t\trole.name(std::string(\"illusive man\"));\n\t\t\n\t\tsession\u0026lt;\u0026lt;\"insert into test values (?,?)\",Poco::Data::use(role),Poco::Data::now;\n\n\t\trole.id(0);\n\t\trole.name(std::string());\n\t\tsession\u0026lt;\u0026lt;\"select * from test\",Poco::Data::into(role),Poco::Data::now;\n\t\t\n\t\tstd::cout\u0026lt;\u0026lt;role.id()\u0026lt;\u0026lt;\"\t\"\u0026lt;\u0026lt;role.name()\u0026lt;\u0026lt;std::endl;\n\t}\n\tcatch(Poco::Data::DataException∓ e)\n\t{\n\t\tstd::cout\u0026lt;\u0026lt;e.displayText()\u0026lt;\u0026lt;std::endl;\n\t}\n\t\n\n\t//卸載SQLite連接器\n\tPoco::Data::SQLite::Connector::unregisterConnector();\n\n\tstd::system(\"pause\");\n\treturn 0;\n}\u003c/pre\u003e"