var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n\n#include \u0026lt;boost/asio.hpp\u0026gt;\n#include \u0026lt;boost/thread.hpp\u0026gt;\n#include \u0026lt;boost/bind.hpp\u0026gt;\n#include \u0026lt;boost/asio/deadline_timer.hpp\u0026gt;\n#include \u0026lt;boost/asio/spawn.hpp\u0026gt;\n#include \u0026lt;boost/smart_ptr.hpp\u0026gt;\n\n//使用boost的 定時器 模擬異步操作\ntypedef boost::asio::deadline_timer deadline_timer_t;\ntypedef boost::shared_ptr\u0026lt;deadline_timer_t\u0026gt; deadline_timer_spt;\n#define ACTION_DURATION boost::posix_time::seconds(1)\n\n\n//協程函數\nvoid coroutine(std::string name,deadline_timer_spt timer,boost::asio::yield_context ctx)\n{\n\tboost::system::error_code e;\n\tint x = 0;\n\t\t\n\t//step 0\n\tstd::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 0 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n\ttimer-\u0026gt;async_wait(ctx[e]); //yield_context 重載了 [] 用於返回 異步返回值\n\tif(e) //獲取返回值\n\t{\n\t\tstd::cout\u0026lt;\u0026lt;e\u0026lt;\u0026lt;\"\\n\";\n\t}\n\n\t//step 1\n\tstd::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 1 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n\ttimer-\u0026gt;expires_from_now(ACTION_DURATION);\n\ttimer-\u0026gt;async_wait(ctx[e]);\n\tif(e)\n\t{\n\t\tstd::cout\u0026lt;\u0026lt;e\u0026lt;\u0026lt;\"\\n\";\n\t}\n\t\n\t//step 2\n\tstd::cout\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\"step 2 value = \"\u0026lt;\u0026lt;x++\u0026lt;\u0026lt;\"\\n\";\n\ttimer-\u0026gt;expires_from_now(ACTION_DURATION);\n\ttimer-\u0026gt;async_wait(ctx[e]);\n\tif(e)\n\t{\n\t\tstd::cout\u0026lt;\u0026lt;e\u0026lt;\u0026lt;\"\\n\";\n\t}\n}\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\tboost::asio::io_service service;\n\n\t//啓動兩個協程 在其中模擬 異步操作\n\tdeadline_timer_spt timer0 = boost::make_shared\u0026lt;deadline_timer_t\u0026gt;(service,ACTION_DURATION);\n\tdeadline_timer_spt timer1 = boost::make_shared\u0026lt;deadline_timer_t\u0026gt;(service,ACTION_DURATION);\n\t\n\tboost::asio::spawn(service,boost::bind(coroutine,\"[one] \",timer0,_1));\n\tboost::asio::spawn(service,boost::bind(coroutine,\"[two] \",timer1,_1));\n\t\n\t//運行asio服務\n\tservice.run();\n\n\tstd::system(\"pause\");\n\treturn 0;\n}\n\n\u003c/pre\u003e"