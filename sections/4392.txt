var __v="\u003cpre class='k-pre'\u003e因為要 跳過 tls 驗證 所以 需要 自己 listen 並將 響應 路由到 handler\u003c/pre\u003e\n\u003cpre class='prettyprint linenums'\u003epackage main\n\nimport (\n\t\"fmt\"\n\t\"golang.org/x/net/http2\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc Handler(\n\tw http.ResponseWriter,\n\tr *http.Request,\n) {\n\tfmt.Println(\"do\", r.RequestURI)\n\tif r.RequestURI == \"/1\" {\n\t\ttime.Sleep(time.Second)\n\t\tfmt.Fprint(w, \"1 rs\")\n\t} else if r.RequestURI == \"/2\" {\n\t\tfmt.Fprint(w, \"2 rs\")\n\t} else {\n\t\tfmt.Fprint(w, \"other rs\")\n\t}\n\n}\n\nconst (\n\tLAddr = \":8080\"\n)\n\nfunc main() {\n\t//創建 監聽 socket\n\tl, e := net.Listen(\"tcp\", LAddr)\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\tlog.Println(\"work at :\", LAddr)\n\tdefer l.Close()\n\n\t//配置 h2c\n\tsrv := \u0026amp;http2.Server{}\n\tvar c net.Conn\n\topts := \u0026amp;http2.ServeConnOpts{\n\t\tHandler: http.HandlerFunc(Handler),\n\t}\n\tfor {\n\t\t//接收連接\n\t\tc, e = l.Accept()\n\t\tif e == nil {\n\t\t\t//執行響應\n\t\t\tgo srv.ServeConn(c, opts)\n\t\t} else {\n\t\t\tlog.Println(e)\n\t\t}\n\t}\n}\n\u003c/pre\u003e"