var __v="\u003cpre class=\"k-pre\"\u003elua 函數調用寫法 同c\n然 若函數 只有一個字符串參數 可 省略 ()\nprint [[\n不需要 ()]]\n\n在調用函數值 傳入參數 可不同於 定義 對於參數被忽略 少的使用 nil\nfunction test(n)\nn\t=\tn or 1\t\t--參數設置默認值方式\n...\nend\n\n//多重返回值\nlua的function中 可以返回多個值 此時需要使用 多重賦值獲取返回值\nfunction test()\n\treturn 1,2\nend\na,b\t=\ttest()\n\n//如果 返回值 不是 一系列表達式 最後一個 則 值返回 一個值\n(若 f2() 返回2個值)\nx,y,z\t=\tf2(),20\t\t--f2()返回一個值\nx,y,z\t=\t20,f2()\t\t--f2()返回兩個值\nx={1,f2(),3}\t--f2()返回一個值\nx={1,f2()}\t\t--f2()返回兩個值\nx=(f2())\t\t--f2()返回一個值  () 強制將返回值只取一個\n\n\n//unpack 接受一個 數組 從下標1開始 返回 所有元素\na\t=\tunpack{1,2,3,4}\n\n\n//不定長 參數以 ... 表示\nfunction add(...)\n\tlocal s=0\n\tfor i,v in ipairs{...} do    \n\t\ts = s + v\n\tend\n\treturn s\nend\n//另外一個 訪問參數 方式\nfunction add(...)\n\tlocal s=0\n\tfor i=1,select('#',...) do\n\t\ts = s + select(i,...)\n\tend\n\treturn s\nend\n\u003c/pre\u003e"