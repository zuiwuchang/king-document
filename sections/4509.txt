var __v="\u003cstrong\u003e定義 一個 qt 派生類\u003c/strong\u003e\n\u003cpre class='prettyprint linenums'\u003epackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/therecipe/qt/core\"\n)\n\n//定義 一個 未導出的 go struct qtmoc 會自動 爲其生成 必要的 go 和 c++ 代碼\n//會爲 go 提供一個 NewXXX 和 DestroyXXX 函數用於 new delete c++ 實例 本列的函數是 NewExampleStruct 和 DestroyExampleStruct\ntype exampleStruct struct {\n\t//在 開始 嵌入一個 qt 對應的 父類 以讓 qrmoc 知道 要從那個類 派生\n\t//可以是 任何 QObject 的子類 包括 自己創建的 類\n\t//qtmoc 會忽略此 定義\n\tcore.QObject\n\n\t//如果 聲明了 constructor\n\t//在使用 NewXXX 創建 實例時 會自動 調用 此處聲明的 函數\n\t_ func() `constructor:\"init\"`\n\n\t//signal 標籤 聲明一個 qt 信號\n\t//可以使用 Connect* Disconnect* 處理此信號 就和 普通 qt 信號一樣\n\t_ func() `signal:\"firstSignal\"`\n\n\t//信號亦可以有 參數 但是 不能有 返回值\n\t_ func(bool, int, string, []string, map[string]string) `signal:\"secondSignal\"`\n\n\t//信號 可以是*core.QObject 數組 map\n\t_ func(*core.QObject, []*core.QObject, map[string]*core.QObject) `signal:\"thirdSignal\"`\n\n\t//go的 error 亦可以使用在 signals/slots/properties 中\n\t_ func(error) `signal:\"fourthSignal\"`\n\n\t//slot 標籤 聲明一個 qt 插槽\n\t_ func() `slot:\"firstSlot\"`\n\n\t//插槽 創建方式 基本和 信號一樣 不過 可以有 返回值\n\t_ func(string) string               `slot:\"secondSlot\"`\n\t_ func(*core.QObject) *core.QObject `slot:\"thirdSlot\"`\n\t_ func() error                      `slot:\"fourthSlot\"`\n\n\t//property 聲明一個 qt 屬性\n\t//會自動 創建 getter + setter 函數 以及 changed 信號 名稱分別如下\n\t// FirstProperty (如果是 bool性別 則getter 名稱爲 IsFirstProperty) SetFirstProperty FirstProperyChanged\n\t_ string `property:\"firstProperty\"`\n}\n\n//constructor 聲明的 初始化函數\n//所以 會在 NewExampleStruct 中 自動調用 此函數\nfunc (s *exampleStruct) init() {\n\t//相當於 c++ 的 構造 函數\n\t//故 可以在此處 進行 初始化\n\tfmt.Println(\"NewExampleStruct\")\n\n\t//設置 屬性\n\ts.SetFirstProperty(\"defaultString\")\n\n\t//連接 信號\n\ts.ConnectFirstSignal(func() { println(\"do something here\") })\n\ts.ConnectSecondSignal(s.secondSignal)\n\n\t//連接 destroyed 信號 會在 DestroyExampleStruct 之後被調用\n\ts.ConnectDestroyExampleStruct(func() {\n\t\t//相當於 c++ 的 析構 函數\n\t\t//故可以在此處 進行 資源釋放\n\t\tfmt.Println(\"DestroyExampleStruct\")\n\t})\n}\n\nfunc (s *exampleStruct) secondSignal(v0 bool, v1 int, v2 string, v3 []string, v4 map[string]string) {\n\tprintln(\"do something here\")\n}\n\u003c/pre\u003e\n\n\u003cstrong\u003e使用 定義的 qt 類\u003c/strong\u003e\n\u003cpre class='prettyprint linenums'\u003epackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/therecipe/qt/core\"\n\t\"github.com/therecipe/qt/gui\"\n\t\"github.com/therecipe/qt/qml\"\n\t\"github.com/therecipe/qt/quickcontrols2\"\n\t\"os\"\n)\n\nfunc main() {\n\t//new c++ 實例\n\tobj := NewExampleStruct(nil)\n\t//訪問屬性\n\tobj.SetFirstProperty(\"set Property\")\n\tfmt.Println(obj.FirstProperty())\n\t//delete c++ 實例\n\tdefer obj.DestroyExampleStruct()\n\n\t// Create application\n\tapp := gui.NewQGuiApplication(len(os.Args), os.Args)\n\n\t// Enable high DPI scaling\n\tapp.SetAttribute(core.Qt__AA_EnableHighDpiScaling, true)\n\n\t// Use the material style for qml\n\tquickcontrols2.QQuickStyle_SetStyle(\"material\")\n\n\t// Create a QML application engine\n\tengine := qml.NewQQmlApplicationEngine(nil)\n\n\t// Load the main qml file\n\tengine.Load(core.NewQUrl3(\"qrc:/qml/main.qml\", 0))\n\n\t// Execute app\n\tgui.QGuiApplication_Exec()\n}\n\u003c/pre\u003e"