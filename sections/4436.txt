var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;cstdlib\u0026gt;\n#include \u0026lt;cstdio\u0026gt;\n\n#include \u0026lt;AL/al.h\u0026gt;\n#include \u0026lt;AL/alc.h\u0026gt;\n#include \u0026lt;AL/alut.h\u0026gt;\n\n//返回 alut 函數 錯誤\nconst char* get_alut_string()\n{\n    ALenum e = alutGetError();\n    if(e)\n    {\n        return alutGetErrorString(e);\n    }\n    return nullptr;\n}\n\nALboolean LoadFile(ALuint\u0026amp; bufferId,ALuint\u0026amp; sourceId)\n{\n    //創建 一個 播放 緩衝區 並將 wav 檔案 音頻copy到其中\n    bufferId = alutCreateBufferFromFile(\"anna.wav\");\n    const char* e = get_alut_string();\n    if(e != nullptr)\n    {\n        std::cout\u0026lt;\u0026lt;\"err : alutCreateBufferFromFile \"\u0026lt;\u0026lt;e\u0026lt;\u0026lt;\"\\n\";\n        return AL_FALSE;\n    }\n\n    //創建一個 音源\n    alGenSources(1, \u0026amp;sourceId);\n    int rs = alGetError();\n    if(rs != AL_NO_ERROR)\n    {\n        std::cout\u0026lt;\u0026lt;\"err : alGenSources \"\u0026lt;\u0026lt;rs\u0026lt;\u0026lt;\"\\n\";\n        return AL_FALSE;\n    }\n    /***\t設置 音源 屬性\t***/\n    // 音源 位置\n    ALfloat sourcePos[] = { 0.0, 0.0, 0.0 };\n    // 音源 速度\n    ALfloat sourceVel[] = { 0.0, 0.0, 0.0 };\n\n    alSourcei (sourceId, AL_BUFFER,bufferId);\t//設置 音頻 buffer\n    alSourcef (sourceId, AL_PITCH,1.0f);\n    alSourcef (sourceId, AL_GAIN,1.0f);\t//設置音量\n    alSourcefv(sourceId, AL_POSITION,sourcePos);\n    alSourcefv(sourceId, AL_VELOCITY,sourceVel);\n    alSourcei (sourceId, AL_LOOPING,AL_TRUE);\n\n    rs = alGetError();\n    if(rs != AL_NO_ERROR)\n    {\n        std::cout\u0026lt;\u0026lt;\"err : alGenSources \"\u0026lt;\u0026lt;rs\u0026lt;\u0026lt;\"\\n\";\n        return AL_FALSE;\n    }\n    return AL_TRUE;\n}\n\nint main()\n{\n    //初始化 alut 以及 一個默認的 openal 設備環境 ALCdevice ALCcontext\n    int argc = 0;\n    char* argv[] = {};\n    //alutInitWithoutContext 可以 只初始化 alut 不初始化 openal設備\n    if(!alutInit(\u0026amp;argc,argv))\n    {\n        std::cout\u0026lt;\u0026lt;get_alut_string()\u0026lt;\u0026lt;\"\\n\";\n        return -1;\n    }\n\n    int rs = 0;\n    std::string cmd;\n    // 播放 緩衝區\n    ALuint bufferId = 0;\n    // 播放源\n    ALuint sourceId = 0;\n    // 播放源 狀態\n    ALint status = 0;\n\n    /***\t定義聽眾\t***/\n    // 位置\n    ALfloat listenerPos[] = { 0.0, 0.0, 0.0 };\n    // 速度\n    ALfloat listenerVel[] = { 0.0, 0.0, 0.0 };\n    // 方向 (first 3 elements are \"at\", second 3 are \"up\")\n    ALfloat listenerOri[] = { 0.0, 0.0, -1.0,  0.0, 1.0, 0.0 };\n\n\n    //加載 音頻檔案\n    if(!LoadFile(bufferId,sourceId))\n    {\n        rs = -1;\n        goto exitMain;\n    }\n\n    /***\t設置 聽眾\t***/\n    alListenerfv(AL_POSITION,listenerPos);\n    alListenerfv(AL_VELOCITY,listenerVel);\n    alListenerfv(AL_ORIENTATION, listenerOri);\n\n    //loop command\n    while(true)\n    {\n        std::cout\u0026lt;\u0026lt;\"test-al$\u0026gt;\";\n        std::cin\u0026gt;\u0026gt;cmd;\n        if(\"e\" == cmd)\n        {\n            alSourceStop(sourceId);\n            break;\n        }\n        else if (\"play\" == cmd)\n        {\n            alSourcePlay(sourceId);\n        }\n        else if (\"stop\" == cmd)\n        {\n            alSourceStop(sourceId);\n        }\n        else if (\"pause\" == cmd)\n        {\n            alSourcePause(sourceId);\n        }\n        else if (\"status\" == cmd)\n        {\n            //返回 播放 狀態\n            alGetSourcei(sourceId, AL_SOURCE_STATE,\u0026amp;status);\n            switch(status)\n            {\n            case AL_INITIAL:\n                puts(\"initial\");\n                break;\n            case AL_PLAYING:\n                puts(\"playing\");\n                break;\n            case AL_PAUSED:\n                puts(\"paused\");\n                break;\n            case AL_STOPPED:\n                puts(\"stoped\");\n                break;\n            default:\n                std::cout\u0026lt;\u0026lt;\"unknow \"\u0026lt;\u0026lt;status\u0026lt;\u0026lt;\"\\n\";\n                break;\n            }\n        }\n        else\n        {\n            std::cout\u0026lt;\u0026lt;\"unknow cmd\\n\";\n        }\n    }\n\nexitMain:\n    if(bufferId)\n    {\n        //將 播放 緩存 清空\n        alSourcei (sourceId, AL_BUFFER,0);\n        //釋放 播放 緩衝區\n        alDeleteBuffers(1,\u0026amp;bufferId);\n    }\n    if(sourceId)\n    {\n        //釋放 播放源\n        alDeleteSources(1,\u0026amp;sourceId);\n    }\n\n    //釋放 alut 以及其 ALCdevice ALCcontext\n    alutExit();\n\n    return rs;\n}\n\u003c/pre\u003e"