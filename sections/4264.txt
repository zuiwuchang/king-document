var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;cassert\u0026gt;\n#include \u0026lt;libplatform/libplatform.h\u0026gt;\n#include \u0026lt;v8.h\u0026gt;\nvoid test_isolate();\nvoid test_hellow(v8::Isolate* isolate);\nint main(int argc, char* argv[])\n{\n    std::cout\u0026lt;\u0026lt;\"v8 version : \"\u0026lt;\u0026lt;v8::V8::GetVersion()\u0026lt;\u0026lt;\"\\n\";\n\n    //初始化 V8 綁定數據\n    assert(v8::V8::InitializeICUDefaultLocation(argv[0]));\n    v8::V8::InitializeExternalStartupData(argv[0]);\n\n    //初始化 platform\n    std::unique_ptr\u0026lt;v8::Platform\u0026gt;  platform(v8::platform::CreateDefaultPlatform());\n    assert(platform);\n    v8::V8::InitializePlatform(platform.get());\n    {\n        //初始化 v8\n        assert(v8::V8::Initialize());\n        {\n            test_isolate();\n        }\n        //停止 釋放 v8 資源\n        //一旦釋放 v8 v8 將不能再被重新 初始化\n        assert(v8::V8::Dispose());\n    }\n    //釋放 platform 資源\n    v8::V8::ShutdownPlatform();\n\n    return 0;\n}\nvoid test_isolate()\n{\n    //創建 一個 隔離的 js 環境\n    v8::Isolate::CreateParams create_params;\n    std::unique_ptr\u0026lt;v8::ArrayBuffer::Allocator\u0026gt; allocator(v8::ArrayBuffer::Allocator::NewDefaultAllocator());\n    create_params.array_buffer_allocator = allocator.get();\n    v8::Isolate* isolate = v8::Isolate::New(create_params);\n    assert(isolate);\n    {\n        test_hellow(isolate);\n    }\n    //釋放 隔離環境\n    //注意 不能使用 delete\n    //Dispose 函數 會在 釋放資源後 自動 delete\n    isolate-\u0026gt;Dispose();\n}\n\nvoid test_hellow(v8::Isolate* isolate)\n{\n    //創建一個 本地 執行 的 隔離環境\n    v8::Isolate::Scope isolate_scope(isolate);\n    //創建一個 本地 句柄 管理 環境\n    v8::HandleScope handle_scope(isolate);\n    {\n        //創建 js 執行上下文\n        v8::Local\u0026lt;v8::Context\u0026gt; context = v8::Context::New(isolate);\n        //Context::Enter()\n        v8::Context::Scope context_scope(context);\n        {\n            //加載 js 源碼\n            v8::Local\u0026lt;v8::String\u0026gt; source = v8::String::NewFromUtf8(isolate,\n                                           \"'Hello' + ', World!'\",\n                                           v8::NewStringType::kNormal\n                                                                  ).ToLocalChecked();\n            //編譯 js 源碼\n            v8::Local\u0026lt;v8::Script\u0026gt; script = v8::Script::Compile(context, source).ToLocalChecked();\n            //運行 js\n            v8::Local\u0026lt;v8::Value\u0026gt; result = script-\u0026gt;Run(context).ToLocalChecked();\n            //獲取 返回值\n            v8::String::Utf8Value utf8(result);\n\n            std::cout\u0026lt;\u0026lt;*utf8\u0026lt;\u0026lt;\"\\n\";\n        }//Context::Exit()\n    }\n}\n\u003c/pre\u003e"