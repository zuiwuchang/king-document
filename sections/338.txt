var __v="\u003cpre class=\"prettyprint linenums\"\u003epackage main\n\nimport (\n\t\"archive/tar\"\n\t\"compress/gzip\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\nfunc main() {\n\t//創建 tar包\n\tf, e := os.Create(\"test.tar.gz\")\n\tif e != nil {\n\t\tfmt.Println(e)\n\t\treturn\n\t}\n\tdefer f.Close()\n\n\t//使用 gzip壓縮\n\tgf := gzip.NewWriter(f)\n\tdefer gf.Close()\n\n\t//返回 *Writer\n\tw := tar.NewWriter(gf)\n\tdefer w.Close()\n\n\tnames := []string{\"1\", \"2\", \"3\"}\n\tfor _, name := range names {\n\t\tif e = AddFile(w, name); e != nil {\n\t\t\tfmt.Println(e)\n\t\t\treturn\n\t\t}\n\t}\n\n}\nfunc AddFile(w *tar.Writer, name string) (e error) {\n\tf, e := os.Open(name)\n\tif e != nil {\n\t\treturn\n\t}\n\tdefer f.Close()\n\n\tinfo, e := f.Stat()\n\tif e != nil {\n\t\treturn\n\t}\n\n\theader := \u0026amp;tar.Header{\n\t\tName:    info.Name(),\n\t\tMode:    int64(info.Mode()),\n\t\tUid:     os.Getuid(),\n\t\tGid:     os.Getgid(),\n\t\tSize:    info.Size(),\n\t\tModTime: info.ModTime(),\n\t}\n\tif e = w.WriteHeader(header); e != nil {\n\t\treturn\n\t}\n\n\t_, e = io.Copy(w, f)\n\n\treturn\n}\u003c/pre\u003e"