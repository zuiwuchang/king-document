var __v="\u003cpre class=\"prettyprint linenums\"\u003epackage main\n\nimport (\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n\t\"github.com/go-xorm/core\"\n\t\"github.com/go-xorm/xorm\"\n\t\"time\"\n)\n\ntype User struct {\n\tId   int64\n\tName string `xorm:\"varchar(25) notnull unique 'uname'\"`\n\t//將 Name 映射到表達 uname 字段\n\n\tCreatedAt time.Time `xorm:\"created\"` //自動 insert 時間\n}\n\nfunc main() {\n\tengine, err := xorm.NewEngine(\"mysql\", \"dark:jayjolin@/dark?charset=utf8\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\t//設置表名 前綴 後綴\n\tvar mapper core.IMapper\n\tmapper = core.NewPrefixMapper(core.SnakeMapper{}, \"dark_\")\n\tmapper = core.NewSuffixMapper(mapper, \"_test\")\n\tengine.SetTableMapper(mapper)\n\n\t//Get\n\tfmt.Println(\"*******\tGET\t*******\")\n\tvar user User\n\t//select * from dark_user_test where id = 1\n\tengine.Id(1).Get(\u0026amp;user)\n\tfmt.Println(user)\n\t//對於存在多個 pk 時\n\t//engine.Id(core.PK{1, \"name\"}).Get(\u0026amp;user)\n\t// SELECT * FROM dark_user_test Where id =1 AND name= 'name'\n\n\t//Find\n\tfmt.Println(\"*******\tFind\t*******\")\n\tusers := make([]User, 0)\n\tengine.Where(\"id \u0026gt; ?\", 1).Limit(3).Find(\u0026amp;users)\n\tfmt.Println(users)\n\n\t//Count\n\tfmt.Println(\"*******\tCount\t*******\")\n\tcount, err := engine.Count(\u0026amp;User{})\n\tfmt.Println(\"count =\", count)\n\n\t//Iterate\n\tfmt.Println(\"*******\tIterate\t*******\")\n\terr = engine.Cols(\"id\", \"uname\").Iterate(\u0026amp;User{}, func(i int,\n\t\tbean interface{}) (err error) {\n\t\tuser := bean.(*User)\n\t\t//do somthing use i and user\n\t\tfmt.Println(user)\n\t\treturn\n\t})\n\n\t//Rows\n\tfmt.Println(\"*******\tRows\t*******\")\n\trows, err := engine.Rows(\u0026amp;User{})\n\tdefer rows.Close()\n\tfor rows.Next() {\n\t\terr = rows.Scan(\u0026amp;user)\n\t\t//...\n\t\tfmt.Println(user)\n\t}\n}\u003c/pre\u003e"