var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;json/json.h\u0026gt;\n\nvoid test_write(std::string\u0026amp; str)\n{\n    std::cout\u0026lt;\u0026lt;\"***\ttest write\t***\"\u0026lt;\u0026lt;std::endl;\n    Json::Value root;\n    //基本 屬性\n    root[\"name\"] = \"kate\";\n    root[\"lv\"] = 10;\n    root[\"my love\"] = true;\n    root[\"val\"] = 99.99;\n\n    //array\n    Json::Value arrs;\n    for(std::size_t i=0; i\u0026lt;10; ++i)\n    {\n        arrs.append(i);\n    }\n    root[\"arrs\"] = arrs;\n\n    //obj\n    Json::Value obj;\n    obj[\"work\"] = \"Cerberus\";\n    obj[\"idea\"] = \"Cerberus is an idea 中文測試\";\n    root[\"obj\"] = obj;\n\n    std::cout\u0026lt;\u0026lt;root\u0026lt;\u0026lt;std::endl;\n    //std::cout\u0026lt;\u0026lt;root.toStyledString()\u0026lt;\u0026lt;std::endl;\n\n    //緊湊的 json 更加快速 少的字符\n    Json::FastWriter writer;\n    str = writer.write(root);\n}\nvoid test_read(const std::string\u0026amp; str)\n{\n    std::cout\u0026lt;\u0026lt;\"***\ttest read\t***\"\u0026lt;\u0026lt;std::endl;\n    Json::Value root;\n    Json::Reader reader;\n\n    //reader.parse(str.data(),str.data() + str.size(),root)\n    //reader.parse(istream);\n    if(!reader.parse(str,root))\n    {\n        std::cout\u0026lt;\u0026lt;\"bad json format\"\u0026lt;\u0026lt;std::endl;\n        return;\n    }\n\n    //基本屬性\n    std::cout\u0026lt;\u0026lt;root[\"name\"].asString()\u0026lt;\u0026lt;\" \"\n             \u0026lt;\u0026lt;root[\"lv\"].asInt()\u0026lt;\u0026lt;\" \"\n             \u0026lt;\u0026lt;root[\"my love\"].asBool()\u0026lt;\u0026lt;\" \"\n             \u0026lt;\u0026lt;root[\"val\"].asDouble()\u0026lt;\u0026lt;\"\\n\";\n\n    //數組\n    Json::Value arrs = root[\"arrs\"];\n    //if(arrs.isArray())\n    if(arrs.type() == Json::ValueType::arrayValue)\n    {\n        std::cout\u0026lt;\u0026lt;\"[\";\n        for(Json::Value::ArrayIndex i=0; i\u0026lt;arrs.size(); ++i)\n        {\n            if(i)\n            {\n                std::cout\u0026lt;\u0026lt;\",\";\n            }\n            std::cout\u0026lt;\u0026lt;arrs[i].asInt();\n        }\n        std::cout\u0026lt;\u0026lt;\"]\\n\";\n\n        for(Json::Value\u0026amp; v:arrs)\n        {\n            v = Json::Value(v.asInt() + 100);\n        }\n\n        std::cout\u0026lt;\u0026lt;\"[\";\n        for(Json::ValueIterator iter=arrs.begin(); iter!=arrs.end(); ++iter)\n        {\n            if(iter.index())\n            {\n                std::cout\u0026lt;\u0026lt;\",\";\n            }\n            std::cout\u0026lt;\u0026lt;iter-\u0026gt;asInt();\n        }\n        std::cout\u0026lt;\u0026lt;\"]\\n\";\n    }\n\n    //object\n    Json::Value obj = root[\"obj\"];\n    std::cout\u0026lt;\u0026lt;obj[\"work\"].asString()\u0026lt;\u0026lt;\"\\n\";\n    std::cout\u0026lt;\u0026lt;obj[\"idea\"].asString()\u0026lt;\u0026lt;\"\\n\";\n\n    for(Json::ValueIterator iter=obj.begin(); iter!=obj.end(); ++iter)\n    {\n        std::cout\u0026lt;\u0026lt;\"key:\"\u0026lt;\u0026lt;iter.key().asString()\u0026lt;\u0026lt;\" value:\"\u0026lt;\u0026lt;iter-\u0026gt;asString()\u0026lt;\u0026lt;\"\\n\";\n    }\n    for(Json::Value\u0026amp; v:obj)\n    {\n        std::cout\u0026lt;\u0026lt;\" value:\"\u0026lt;\u0026lt;v.asString()\u0026lt;\u0026lt;\"\\n\";\n    }\n}\nint main()\n{\n    std::string str;\n    test_write(str);\n    test_read(str);\n    return 0;\n}\n\n\u003c/pre\u003e"