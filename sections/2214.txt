var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;fstream\u0026gt;\n#include \u0026lt;boost/log/trivial.hpp\u0026gt;\n#include \u0026lt;boost/log/sinks.hpp\u0026gt;\n\nusing namespace std;\nusing namespace boost::log;\nint main()\n{\n    typedef sinks::synchronous_sink\u0026lt; sinks::text_ostream_backend \u0026gt; text_sink;\n    boost::shared_ptr\u0026lt; text_sink \u0026gt; sink = boost::make_shared\u0026lt; text_sink \u0026gt;();\n\n    // Add a stream to write log to\n    sink-\u0026gt;locked_backend()-\u0026gt;add_stream(\n        boost::make_shared\u0026lt; std::ofstream \u0026gt;(\"sample.log\"));\n\n    // Register the sink in the logging core\n    core::get()-\u0026gt;add_sink(sink);\n\n\n    BOOST_LOG_TRIVIAL(trace) \u0026lt;\u0026lt; \"A trace severity message\";\n    BOOST_LOG_TRIVIAL(debug) \u0026lt;\u0026lt; \"A debug severity message\";\n    BOOST_LOG_TRIVIAL(info) \u0026lt;\u0026lt; \"An informational severity message\";\n    BOOST_LOG_TRIVIAL(warning) \u0026lt;\u0026lt; \"A warning severity message\";\n    BOOST_LOG_TRIVIAL(error) \u0026lt;\u0026lt; \"An error severity message\";\n    BOOST_LOG_TRIVIAL(fatal) \u0026lt;\u0026lt; \"A fatal severity message\";\n\n    return 0;\n}\u003c/pre\u003e"