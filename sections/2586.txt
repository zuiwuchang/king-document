var __v="\n\u003cpre class='prettyprint linenums'\u003e//c++\n#include\u0026lt;lua.hpp\u0026gt;\n#include\u0026lt;iostream\u0026gt;\nextern \"C\"\n{\n    class Test\n    {\n    public:\n        void Create()\n        {\n            std::cout\u0026lt;\u0026lt;\"create\\n\";\n        }\n        void Destory()\n        {\n            std::cout\u0026lt;\u0026lt;\"destory\\n\";\n        }\n        void Show()\n        {\n            std::cout\u0026lt;\u0026lt;\"show\\n\";\n        }\n    };\n\n\n    static int create(lua_State* L)\n    {\n        //申請 用戶 數據\n        Test* p = (Test*)lua_newuserdata(L,sizeof(Test));\n        p-\u0026gt;Create();    //調用構造函數\n\n        //為新對象 設置元表\n        luaL_getmetatable(L, \"dark.image\");\n        lua_setmetatable(L, -2);\n        return 1;\n    }\n\n    static int test_destory(lua_State* L)\n    {\n        Test* p = (Test*)lua_touserdata(L,1);\n        p-\u0026gt;Destory();\n        return 0;\n    }\n    static int test_show(lua_State* L)\n    {\n        Test* p = (Test*)lua_touserdata(L,1);\n        p-\u0026gt;Show();\n        return 0;\n    }\n    __declspec(dllexport) int  luaopen_libimage(lua_State *L)\n    {\n        //創建 元表\n        luaL_newmetatable(L, \"dark.image\");\n\n        //將 __index 指向元表 本身\n        lua_pushvalue(L, -1);\n        lua_setfield(L,-2,\"__index\");\n\n        //註冊 show 函數\n        lua_pushcfunction(L, test_show);\n        lua_setfield(L,-2,\"show\");\n\n        //註冊析構 函數\n        lua_pushcfunction(L, test_destory);\n        lua_setfield(L,-2,\"__gc\");\n\n\n\n        lua_newtable(L);\n        lua_pushstring(L,\"create\");\n        lua_pushcfunction(L,create);\n        lua_settable(L,-3);\n\n        //lua_setglobal(L,\"libmylib\");\n        //return 0\n\n        return 1;\n    }\n}\n\n\n\n--lua\nmy = require  \"libimage\"\nprint(\"create a0\")\ndo\n\tlocal a0 = my.create()\n\tdo\n\t\tlocal a1 = a0\n\t\ta1:show()\n\tend\nend\nprint(\"end\")\u003c/pre\u003e"