var __v="\u003cpre class=\"k-pre\"\u003efs.open 提供了類似 c語言的 檔案 操作方式\n\n//打開檔案\nfs.open(path, flags[, mode], callback)\nfs.openSync(path, flags[, mode])\n\t\u003cstrong\u003eflags\u003c/strong\u003e\n\t\tr\t讀\n\t\tr+\t讀寫\n\t\tw\t寫 檔案不存在則創建\n\t\tw+\t讀寫 檔案不存在則創建\n\t\ta\t追加模式 檔案不存在則創建\n\t\ta+\t讀取追加模式 檔案不存在則創建\n\t\u003cstrong\u003emode\u003c/strong\u003e\n\t\t八進制的 檔案權限 如 0644\n\n\n//讀取數據\nfs.read(fd, buffer, offset, length, position, callback)\nfs.readSync(fd, buffer, offset, length, position)\n\t\u003cstrong\u003efd\u003c/strong\u003e\tfs.open 打開的 檔案句柄\n\t\u003cstrong\u003ebuffer\u003c/strong\u003e\tBuffer 實例\n\t\u003cstrong\u003eoffset\u003c/strong\u003e\tbuffer 寫入偏移\n\t\u003cstrong\u003elength\u003c/strong\u003e\t要讀取的 字節數\n\t\u003cstrong\u003eposition\u003c/strong\u003e\t檔案偏移 如果爲 null 從當前位置讀取\n\n\n//寫入檔案\nfs.write(fd, buffer, offset, length[, position], callback)\nfs.write(fd, data[, position[, encoding]], callback)\nfs.writeSync(fd, buffer, offset, length[, position])\nfs.writeSync(fd, data[, position[, encoding]])\n\u003c/pre\u003e\n\u003cpre class='prettyprint linenums'\u003e\"use strict\"\nglobal.alert = console.log\nvar ControllerAsync={\n\tNew:function(){\n\t\t//輔助函數 進入下個 流程\n\t\tvar next = function(g,callback,err, data){\n\t\t\tif(err) {\n\t\t\t\tg.throw(err);\n\t\t\t\tif(callback){\n\t\t\t\t\tcallback(err);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} \n \n\t\t\t//執行 next\n\t\t\tvar res = g.next(data);\n\t\t\t\n\t\t\tif(res.done){\n\t\t\t\t//通知 所有流程 執行完\n\t\t\t\tif(callback){\n\t\t\t\t\tcallback(null,res.value);\n\t\t\t\t}\n\t\t\t} \n\t\t};\n \n\t\treturn {\n\t\t\t//設置 流程 函數\n\t\t\t//參數 gen 是一個 Generator 函數\n\t\t\tSync:function(gen){\n\t\t\t\t//存儲 Generator 實例\n\t\t\t\tthis._gen = gen();\n\t\t\t},\n\t\t\t//通知 異步操作已完成 等待的 \n\t\t\t//yield 可以返回繼續執行\n\t\t\t//參數 data 為 yield 的返回值\n\t\t\t//參數 err 為 null 繼續下個流程\n\t\t\t//參數 err 不為 null 停止流程 並使 yield 拋出 err 異常\n\t\t\tNotify:function(err,data){\n\t\t\t\tnext(this._gen,this._callback,err,data);\n\t\t\t},\n \n\t\t\t//執行 流程\n\t\t\t//參數 callback 為流程結束 回調\n\t\t\t//\tcallback 存儲兩個參數 err,data\n\t\t\t//\t如果 流程 出現任何錯誤導致 流程結束 則err為 Notify 中指定的錯誤\n\t\t\t//\t如果 流程 正常結束 err為null data為 Generator函數返回值\n\t\t\t//參數 userdata 為 傳給 Generator 函數的 參數\n\t\t\tDo:function(callback,userdata){\n\t\t\t\t//流程 結束 回調\n\t\t\t\tthis._callback = callback;\n \n\t\t\t\t//執行 首個流程\n\t\t\t\tnext(this._gen,callback,null,userdata);\n\t\t\t},\n\t\t};\n\t}\n};\n//創建 流程管理 器\nvar co = ControllerAsync.New();\n\n//設置 流程 函數\nco.Sync(function*(){\n\tvar fs = require(\"fs\")\n\ttry{\n\t\t//打開 檔案\n\t\tvar fd = yield fs.open(\"main.js\", \"r\", function(err,fd){\n\t\t\tif(err){\n\t\t\t\tco.Notify(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tco.Notify(null,fd);\n\t\t});\n\t\talert(\"open success\")\n\n\t\t//read\n\t\tvar arrs = [];\n\t\tvar sum = 0;\n\t\twhile(true){\n\t\t\tvar buffer = Buffer.allocUnsafe(20);\n\t\t\tvar n = yield fs.read(fd, buffer, 0, buffer.length, null, function(err, n){\n\t\t\t\tif(err){\n\t\t\t\t\tco.Notify(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tco.Notify(null,n);\n\t\t\t})\n\t\t\t//讀取結束\n\t\t\tif(n \u0026lt; 1){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tarrs.push(buffer.slice(0, n));\n\t\t\tsum+=n;\n\t\t}\n\t\tvar buffer = Buffer.concat(arrs, sum)\n\t\talert(buffer.toString(\"utf8\"))\n\n\n\t\t//關閉檔案\n\t\tyield fs.close(fd,function(err){\n\t\t\tif(err){\n\t\t\t\tco.Notify(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\talert(\"close success\")\n\t\t\tco.Notify(null);\n\t\t});\n\t}catch(e){\n\t\talert(\"error :\",e)\n\t}\n});\n \n//執行流程\nco.Do();\u003c/pre\u003e"