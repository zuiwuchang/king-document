var __v="\n\u003cpre class='prettyprint linenums'\u003e/*\nsublime-imfix.c\nUse LD_PRELOAD to interpose some function to fix sublime input method support for linux.\nBy Cjacker Huang \u0026lt;jianzhong.huang at i-soft.com.cn\u0026gt;\nBy whitequark@whitequark.org\nHow to compile:\ngcc -shared -o libsublime-imfix.so sublime-imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC\nHow to use:\nLD_PRELOAD=./libsublime-imfix.so sublime_text\nChanges:\n2014 06-09\n1, Fix cursor position update for sublime text 3.\n2, Combine the codes from whitequark(fix for xim immodule) and add cursor update support for XIM immodule.\n*/\n/*for RTLD_NEXT*/\n#define _GNU_SOURCE\n#include \u0026lt;gtk/gtk.h\u0026gt;\n#include \u0026lt;gdk/gdkx.h\u0026gt;\n#include \u0026lt;assert.h\u0026gt;\n#include \u0026lt;dlfcn.h\u0026gt;\n#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;stdlib.h\u0026gt;\n#include \u0026lt;string.h\u0026gt;\n#include \u0026lt;gtk/gtk.h\u0026gt;\n#include \u0026lt;X11/Xlib.h\u0026gt;\n#include \u0026lt;X11/Xutil.h\u0026gt;\n#ifdef VERBOSE\n#define DEBUG(fmt, ...) do { \\\n    FILE* err = fopen(\"/tmp/libsublime-immethod-fix.log\", \"a\"); \\\n    if (err) { \\\n      fprintf(err, fmt, __VA_ARGS__); \\\n      fclose(err); \\\n    } \\\n  } while(0)\n#else\n#define DEBUG(fmt, ...)\n#endif\ntypedef GdkSegment GdkRegionBox;\nstruct _GdkRegion\n{\n  long size;\n  long numRects;\n  GdkRegionBox *rects;\n  GdkRegionBox extents;\n};\nGtkIMContext *local_context;\n\n// This function is added to prevent some bugs caused by subprocess inheriting `LD_PRELOAD` settings\n// For example, without it, `Preferences - Browse Packages` function won't work.\nvoid __attribute__ ((constructor)) on_load(void)\n{\n  // Clear `LD_PRELOAD` environment variable\n  putenv(\"LD_PRELOAD=\");\n}\n\n//this func is interposed to support cursor position update.\nvoid\ngdk_region_get_clipbox (const GdkRegion *region,\n            GdkRectangle    *rectangle)\n{\n  g_return_if_fail (region != NULL);\n  g_return_if_fail (rectangle != NULL);\n  rectangle-\u0026gt;x = region-\u0026gt;extents.x1;\n  rectangle-\u0026gt;y = region-\u0026gt;extents.y1;\n  rectangle-\u0026gt;width = region-\u0026gt;extents.x2 - region-\u0026gt;extents.x1;\n  rectangle-\u0026gt;height = region-\u0026gt;extents.y2 - region-\u0026gt;extents.y1;\n  GdkRectangle rect;\n  rect.x = rectangle-\u0026gt;x;\n  rect.y = rectangle-\u0026gt;y;\n  rect.width = 0;\n  rect.height = rectangle-\u0026gt;height;\n  //The caret width is 2 in sublime text 2\n  //And is 1 in sublime text 3.\n  //Maybe sometimes we will make a mistake, but for most of the time, it should be the caret.\n  if((rectangle-\u0026gt;width == 2 || rectangle-\u0026gt;width == 1)  \u0026amp;\u0026amp; GTK_IS_IM_CONTEXT(local_context)) {\n        gtk_im_context_set_cursor_location(local_context, rectangle);\n  }\n}\n//this is needed, for example, if you input something in file dialog and return back the edit area\n//context will lost, so here we set it again.\nstatic GdkFilterReturn event_filter (GdkXEvent *xevent, GdkEvent *event, gpointer im_context)\n{\n    XEvent *xev = (XEvent *)xevent;\n    if(xev-\u0026gt;type == KeyRelease \u0026amp;\u0026amp; GTK_IS_IM_CONTEXT(im_context)) {\n       GdkWindow * win = g_object_get_data(G_OBJECT(im_context),\"window\");\n       if(GDK_IS_WINDOW(win))\n         gtk_im_context_set_client_window(im_context, win);\n    }\n    return GDK_FILTER_CONTINUE;\n}\nvoid gtk_im_context_set_client_window (GtkIMContext *context,\n          GdkWindow    *window)\n{\n    GtkIMContextClass *klass;\n    g_return_if_fail (GTK_IS_IM_CONTEXT (context));\n    klass = GTK_IM_CONTEXT_GET_CLASS (context);\n    if (klass-\u0026gt;set_client_window)\n        klass-\u0026gt;set_client_window (context, window);\n    //below is our interposed codes to save the context to local_context.\nif(!GDK_IS_WINDOW (window))\n    return;\ng_object_set_data(G_OBJECT(context),\"window\",window);\nint width = gdk_window_get_width(window);\nint height = gdk_window_get_height(window);\nif(width != 0 \u0026amp;\u0026amp; height !=0) {\n    gtk_im_context_focus_in(context);\n    local_context = context;\n}\n//only add this event_filter when using 'fcitx' immodule.\n//for xim immodule, this function is as same as original from gtk2.\nconst gchar * immodule = g_getenv(\"GTK_IM_MODULE\");\nif(immodule \u0026amp;\u0026amp; !strcmp(immodule, \"fcitx\")) {\n    gdk_window_add_filter (window, event_filter, context);\n}\n}\n/*below codes is from whitequark, fix for xim immodule*/\n/* See gtkimcontextxim.c */\nGType gtk_type_im_context_xim = 0;\n#define GTK_TYPE_IM_CONTEXT_XIM            (gtk_type_im_context_xim)\n#define GTK_IM_CONTEXT_XIM(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIM))\n#define GTK_IM_CONTEXT_XIM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIMClass))\n#define GTK_IS_IM_CONTEXT_XIM(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_IM_CONTEXT_XIM))\n#define GTK_IS_IM_CONTEXT_XIM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IM_CONTEXT_XIM))\n#define GTK_IM_CONTEXT_XIM_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIMClass))\ntypedef struct _GtkIMContextXIM       GtkIMContextXIM;\ntypedef struct _GtkIMContextXIMClass  GtkIMContextXIMClass;\nstruct _GtkIMContextXIMClass\n{\n  GtkIMContextClass parent_class;\n};\ntypedef struct _StatusWindow StatusWindow;\ntypedef struct _GtkXIMInfo GtkXIMInfo;\nstruct _GtkIMContextXIM\n{\n  GtkIMContext object;\n  GtkXIMInfo *im_info;\n  gchar *locale;\n  gchar *mb_charset;\n  GdkWindow *client_window;\n  GtkWidget *client_widget;\n  /* The status window for this input context; we claim the\n *    * status window when we are focused and have created an XIC\n *       */\n  StatusWindow *status_window;\n  gint preedit_size;\n  gint preedit_length;\n  gunichar *preedit_chars;\n  XIMFeedback *feedbacks;\n  gint preedit_cursor;\n  XIMCallback preedit_start_callback;\n  XIMCallback preedit_done_callback;\n  XIMCallback preedit_draw_callback;\n  XIMCallback preedit_caret_callback;\n  XIMCallback status_start_callback;\n  XIMCallback status_done_callback;\n  XIMCallback status_draw_callback;\n  XIMCallback string_conversion_callback;\n  XIC ic;\n  guint filter_key_release : 1;\n  guint use_preedit : 1;\n  guint finalizing : 1;\n  guint in_toplevel : 1;\n  guint has_focus : 1;\n};\nstatic GClassInitFunc orig_gtk_im_context_xim_class_init;\nstatic GType (*orig_g_type_module_register_type)(GTypeModule *,\n                                                 GType, const gchar *,\n                                                 const GTypeInfo *, GTypeFlags);\nstatic gboolean (*orig_gtk_im_context_xim_filter_keypress)(GtkIMContext *context,\n                                                           GdkEventKey *event);\nstatic gboolean\nhook_gtk_im_context_xim_filter_keypress(GtkIMContext *context, GdkEventKey *event) {\n  GtkIMContextXIM *im_context_xim = GTK_IM_CONTEXT_XIM(context);\n  if (!im_context_xim-\u0026gt;client_window) {\n    DEBUG(\"im_context_xim == %p\\n\", im_context_xim);\n    DEBUG(\"event-\u0026gt;window == %p\\n\", event-\u0026gt;window);\n    gtk_im_context_set_client_window(context, event-\u0026gt;window);\n  }\n  return orig_gtk_im_context_xim_filter_keypress(context, event);\n}\nstatic void\nhook_gtk_im_context_xim_class_init (GtkIMContextXIMClass *class) {\n  orig_gtk_im_context_xim_class_init(class, NULL); /* wat? */\n  GtkIMContextClass *im_context_class = GTK_IM_CONTEXT_CLASS (class);\n  assert(!orig_gtk_im_context_xim_filter_keypress);\n  orig_gtk_im_context_xim_filter_keypress = im_context_class-\u0026gt;filter_keypress;\n  im_context_class-\u0026gt;filter_keypress = hook_gtk_im_context_xim_filter_keypress;\n  DEBUG(\"orig_gtk_im_context_xim_filter_keypress: %p\\n\",\n        orig_gtk_im_context_xim_filter_keypress);\n}\nGType\ng_type_module_register_type (GTypeModule *module,\n                             GType parent_type,\n                             const gchar *type_name,\n                             const GTypeInfo *type_info,\n                             GTypeFlags flags) {\n  if (!orig_g_type_module_register_type) {\n    orig_g_type_module_register_type = dlsym(RTLD_NEXT, \"g_type_module_register_type\");\n    assert(orig_g_type_module_register_type);\n  }\n  if (type_name \u0026amp;\u0026amp; !strcmp(type_name, \"GtkIMContextXIM\")) {\n    assert(!orig_gtk_im_context_xim_class_init);\n    orig_gtk_im_context_xim_class_init = type_info-\u0026gt;class_init;\n    assert(sizeof(GtkIMContextXIM) == type_info-\u0026gt;instance_size);\n\nconst GTypeInfo hook_im_context_xim_info =\n{\n  type_info-\u0026gt;class_size,\n  type_info-\u0026gt;base_init,\n  type_info-\u0026gt;base_finalize,\n  (GClassInitFunc) hook_gtk_im_context_xim_class_init,\n  type_info-\u0026gt;class_finalize,\n  type_info-\u0026gt;class_data,\n  type_info-\u0026gt;instance_size,\n  type_info-\u0026gt;n_preallocs,\n  type_info-\u0026gt;instance_init,\n};\n\nDEBUG(\"orig_gtk_im_context_xim_class_init: %p\\n\", orig_gtk_im_context_xim_class_init);\n\ngtk_type_im_context_xim =\n  orig_g_type_module_register_type(module, parent_type, type_name,\n                                   \u0026amp;hook_im_context_xim_info, flags);\n\nreturn gtk_type_im_context_xim;\n  }\n  return orig_g_type_module_register_type(module, parent_type, type_name, type_info, flags);\n}\u003c/pre\u003e"