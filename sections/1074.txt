var __v="\u003cpre class=\"k-pre\"\u003eWhat is a body parser?\nAn HTTP request (at least for those using the POST and PUT operations) contains a body. This body can be formatted with any format specified in the Content-Type header. A body parser transforms this request body into a Java value.\n\nNote: You can’t write BodyParser implementation directly using Java. Because a Play BodyParser must handle the body content incrementally using an Iteratee[Array[Byte], A] it must be implemented in Scala.\n\nHowever Play provides default BodyParsers that should fit most use cases (parsing Json, Xml, Text, uploading files). And you can reuse these default parsers to create your own directly in Java; for example you can provide an RDF parsers based on the Text one.\n\n\n\nThe BodyParser Java API\nWhen working with request bodies, ensure that have the following imports in your controller:\n\nimport play.mvc.*;\nimport play.mvc.Http.*;\nIn the Java API, all body parsers must generate a play.mvc.Http.RequestBody value. This value computed by the body parser can then be retrieved via request().body():\n\npublic static Result index() {\n    RequestBody body = request().body();\n    return ok(\"Got body: \" + body);\n}\nYou can specify the BodyParser to use for a particular action using the @BodyParser.Of annotation:\n\n@BodyParser.Of(BodyParser.Json.class)\npublic static Result index() {\n    RequestBody body = request().body();\n    return ok(\"Got json: \" + body.asJson());\n}\n\n\n\nThe Http.RequestBody API\nAs we just said all body parsers in the Java API will give you a play.mvc.Http.RequestBody value. From this body object you can retrieve the request body content in the most appropriate Java type.\n\nNote: The RequestBody methods like asText() or asJson() will return null if the parser used to compute this request body doesn’t support this content type. For example in an action method annotated with @BodyParser.Of(BodyParser.Json.class), calling asXml() on the generated body will return null.\n\n\n\nDefault body parser: AnyContent\nIf you don’t specify your own body parser, Play will use the default one guessing the most appropriate content type from the Content-Type header:\n\ntext/plain: String, accessible via asText()\napplication/json: JsonNode, accessible via asJson()\napplication/xml, text/xml or application/XXX+xml: org.w3c.Document, accessible via asXml()\napplication/form-url-encoded: Map, accessible via asFormUrlEncoded()\nmultipart/form-data: Http.MultipartFormData, accessible via asMultipartFormData()\nAny other content type: Http.RawBuffer, accessible via asRaw()\nFor example:\n\npublic static Result save() {\n    RequestBody body = request().body();\n    String textBody = body.asText();\n\n    if(textBody != null) {\n        return ok(\"Got: \" + textBody);\n    } else {\n        return badRequest(\"Expecting text/plain request body\");\n    }\n}\n\n\n\nMax content length\nText based body parsers (such as text, json, xml or formUrlEncoded) use a max content length because they have to load all the content into memory.\n\nThere is a default maximum content length of 100KB. It can be overridden by specifying the parsers.text.maxLength property in application.conf:\n\nparsers.text.maxLength=128K\nYou can also specify a maximum content length via the @BodyParser.Of annotation:\n\n// Accept only 10KB of data.\n@BodyParser.Of(value = BodyParser.Text.class, maxLength = 10 * 1024)\npublic static Result index() {\n    if(request().body().isMaxSizeExceeded()) {\n        return badRequest(\"Too much data!\");\n    } else {\n        return ok(\"Got body: \" + request().body().asText());\n    }\n}\u003c/pre\u003e"