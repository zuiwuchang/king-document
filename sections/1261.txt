var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;algorithm\u0026gt;\n#include \u0026lt;iterator\u0026gt;\n#include \u0026lt;vector\u0026gt;\n#include \u0026lt;string\u0026gt;\n#include \u0026lt;list\u0026gt;\n#include \u0026lt;set\u0026gt;\n\ntemplate\u0026lt;typename T\u0026gt;\nvoid show_container(const T\u0026amp; container)\n{\n    for(const auto\u0026amp; v:container)\n    {\n        std::cout\u0026lt;\u0026lt;v\u0026lt;\u0026lt;\" \";\n    }\n    std::cout\u0026lt;\u0026lt;\"\\n\";\n}\n\nclass array_t\n{\nprivate:\n    std::vector\u0026lt;int\u0026gt; _container;\npublic:\n    array_t(std::initializer_list\u0026lt;int\u0026gt; list)\n    {\n        std::back_insert_iterator\u0026lt;std::vector\u0026lt;int\u0026gt;\u0026gt; back_insert(_container);\n        std::copy(list.begin(),list.end(),back_insert);\n    }\n    void show()\n    {\n        show_container(_container);\n    }\n};\nint main()\n{\n    std::list\u0026lt;int\u0026gt; l{0,1,2,3,4};\n    show_container(l);\n\n    std::set\u0026lt;int\u0026gt; s{0,1,2,3,3};\n    show_container(s); //0 1 2 3\n\n    array_t arrs{0,1,2,3,4};\n    arrs.show();\n\n    return 0;\n}\u003c/pre\u003e"