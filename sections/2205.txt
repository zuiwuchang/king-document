var __v="\n\u003cpre class='prettyprint linenums'\u003e#include\u0026lt;boost\\thread.hpp\u0026gt;\n#include\u0026lt;boost\\asio.hpp\u0026gt;\n#include\u0026lt;boost\\smart_ptr.hpp\u0026gt;\n#include\u0026lt;boost\\bind.hpp\u0026gt;\n\ntypedef boost::shared_ptr\u0026lt;std::vector\u0026lt;char\u0026gt;\u0026gt; net_data_ptr_t;\ntypedef boost::shared_ptr\u0026lt;boost::asio::ip::udp::endpoint\u0026gt;\tendpoint_ptr_t;\n\n//前攝器\nboost::asio::io_service ios;\n//服務器地址\nboost::asio::ip::udp::endpoint endpoint(boost::asio::ip::address::from_string(\"127.0.0.1\"),53);\n//recv 地址\nboost::asio::ip::udp::endpoint recv_endpoint;\n//socket\nboost::asio::ip::udp::socket sock(ios);\n\n\n//函數聲明\nvoid send_handler(const boost::system::error_code\u0026amp; e,net_data_ptr_t net_data_ptr,int count/*記錄發送次數*/);\nvoid read_handler(const boost::system::error_code\u0026amp; e,std::size_t size,net_data_ptr_t net_data_ptr);\nvoid post_read();\n\nvoid send_handler(const boost::system::error_code\u0026amp; e,net_data_ptr_t net_data_ptr,int count/*記錄發送次數*/)\n{\n\tif(e\n\t\t\u0026amp;\u0026amp; count \u0026lt; 5\n\t\t)\n\t{\n\t\t//如果發送失敗 且重發次數小於5 重發\n\t\tsock.async_send_to(boost::asio::buffer(*net_data_ptr)\n\t\t\t,endpoint\n\t\t\t,boost::bind(\u0026amp;send_handler\n\t\t\t\t,boost::asio::placeholders::error\n\t\t\t\t,net_data_ptr\n\t\t\t\t,count + 1\n\t\t\t\t)\n\t\t\t);\n\t}\n}\n\nvoid read_handler(const boost::system::error_code\u0026amp; e,std::size_t size,net_data_ptr_t net_data_ptr)\n{\n\tif(!e)\n\t{\n\t\t//沒有錯誤 讀出數據 \n\t\tprintf(\"server:%s\\n\",net_data_ptr-\u0026gt;data());\n\t}\n\t//讀取新內容\n\tpost_read();\n}\n\nvoid post_read()\n{\n\tnet_data_ptr_t net_data_ptr\t=\tboost::make_shared\u0026lt;std::vector\u0026lt;char\u0026gt;\u0026gt;(1024,0);\n\tsock.async_receive_from(boost::asio::buffer(*net_data_ptr)\n\t\t,endpoint\n\t\t,boost::bind(read_handler\n\t\t\t,boost::asio::placeholders::error\n\t\t\t,boost::asio::placeholders::bytes_transferred\n\t\t\t,net_data_ptr\n\t\t\t)\n\t\t);\n}\n\nvoid work_thread()\n{\n\tstd::string str;\n\twhile(true)\n\t{\n\t\tstd::cin\u0026gt;\u0026gt;str;\n\t\tif(str\t==\t\"exit\")\n\t\t{\n\t\t\tbreak;\n\t\t}\n\n\t\t//封包發送\n\t\tnet_data_ptr_t send_data\t=\tboost::make_shared\u0026lt;std::vector\u0026lt;char\u0026gt;\u0026gt;(str.size() + 1,0);\n\t\tmemcpy(send_data-\u0026gt;data(),str.data(),str.size());\n\t\tsock.async_send_to(boost::asio::buffer(*send_data)\n\t\t\t,endpoint\n\t\t\t,boost::bind(\u0026amp;send_handler\n\t\t\t\t,boost::asio::placeholders::error\n\t\t\t\t,send_data\n\t\t\t\t,0\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\tios.stop();\n}\nint _tmain(int argc, _TCHAR* argv[])\n{\n\t//使用ipv4協議\t必須指定ip協議之後才能 進行通信\n\tsock.open(boost::asio::ip::udp::v4());\n\n\tpost_read();\n\t\n\tnew boost::thread(work_thread);\n\n\tios.run();\n\n\treturn 0;\n}\u003c/pre\u003e"