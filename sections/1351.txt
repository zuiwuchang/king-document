var __v="\u003cpre class=\"k-pre\"\u003e所有容器都包含一个default构造和 copy构造 和 析构 函数\n\n\n\nbegin()\n返回一个迭代器，指向起点（第一个元素）\nend()\n返回一个迭代器，指向结束点（最后一个元素的后面）\n++\n!=\n\ncontype c\t产生一个空容器\ncontype c(c1)\t产生一个同型容器\ncontype\tc(beg,end)\t产生容器初始值为[beg,end)区间元素\nc.~contype()\t删除所有元素释放内存\nc.size()\t返回容器元素数量\nc.empty()\t判断容器是否为空\nc.max_size()\t返回元素最大可能数量\nc1==c2\nc1!=c2\nc1\u0026lt;c2\nc1\u0026gt;c2\nc1\u0026lt;=c2\nc1\u0026gt;=c2\nc1=c2\t将c2所有元素赋值给c1\nc1.swap(c2)\t交换c1 c2\nswap(c1,c2)\t交换c1 c2\nc.begin()\t返回迭代器 指向第一个元素\nc.end()\t返回迭代器 指向最后一个元素的下一个位置\nc.rbegin()\nc.rend()\nc.insert(pos,elem)\t将elem的副本安插于pos处\ne.erase(beg,end)\t移除区间内元素[beg,end)\nc.clear()\t移除所有元素\nc.get_allocator()\t返回容器内存模型\n\u003c/pre\u003e"