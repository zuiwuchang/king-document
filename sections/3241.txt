var __v="\n\u003cpre class='prettyprint linenums'\u003e#pragma PAGE_MEMORY\nNTSTATUS WriteDirectNettherIn(IN PIRP pIrp,ULONG inSize,ULONG outSize)\n{\n\tKdPrint((\"WriteDirectNettherIn begin\\n\"));\n\tNTSTATUS status = STATUS_SUCCESS;\n\t\n\t//从irp堆栈结构中 获取设备对象的 irp 结构\n\tPIO_STACK_LOCATION lpIoStack=IoGetCurrentIrpStackLocation(pIrp);\n\n\t__try\n\t{\n\t\t//获取输入缓冲区\n\t\tPVOID lp_input_buffer=lpIoStack-\u0026gt;Parameters.DeviceIoControl.Type3InputBuffer;\n\t\t//判断缓冲区是否可读 不可读 抛出异常\n\t\tProbeForRead(lp_input_buffer,inSize,\n\t\t\t1);//内存对齐\n\n\t\t//获取输出缓冲区\n\t\tPVOID lp_output_buffer=pIrp-\u0026gt;UserBuffer;\n\t\tProbeForWrite(lp_output_buffer,outSize,1);\n\n\t\tUNICODE_STRING unicode_string;\n\t\tRtlInitUnicodeString(\u0026amp;unicode_string,L\"写入数据成功\");\n\t\tRtlCopyMemory(lp_output_buffer,unicode_string.Buffer,unicode_string.Length);\n\t\t\n\t\tpIrp-\u0026gt;IoStatus.Information=unicode_string.Length;\n\n\t}\n\t__except(EXCEPTION_EXECUTE_HANDLER)\n\t{\n\t\tKdPrint((\"缓冲区不可访问\"));\n\t}\n\t\n\t\n\tKdPrint((\"WriteDirectNettherIn begin\\n\"));\n\treturn status;\n}\n#pragma PAGE_MEMORY\nNTSTATUS ReadDirectNettherOut(IN PIRP pIrp,ULONG inSize,ULONG outSize)\n{\n\tKdPrint((\"ReadDirectNettherOut begin\\n\"));\n\tNTSTATUS status = STATUS_SUCCESS;\n\t\n\t//从irp堆栈结构中 获取设备对象的 irp 结构\n\tPIO_STACK_LOCATION lpIoStack=IoGetCurrentIrpStackLocation(pIrp);\n\t__try\n\t{\n\t\t//获取输出缓冲区\n\t\tPVOID lp_output_buffer=pIrp-\u0026gt;UserBuffer;\n\t\tProbeForWrite(lp_output_buffer,outSize,1);\n\n\t\tUNICODE_STRING unicode_string;\n\t\tRtlInitUnicodeString(\u0026amp;unicode_string,L\"写入数据成功\");\n\t\tRtlCopyMemory(lp_output_buffer,unicode_string.Buffer,unicode_string.Length);\n\t\t\n\t\tpIrp-\u0026gt;IoStatus.Information=unicode_string.Length;\n\n\t}\n\t__except(EXCEPTION_EXECUTE_HANDLER)\n\t{\n\t\tKdPrint((\"缓冲区不可访问\"));\n\t}\n\tKdPrint((\"ReadDirectNettherOut begin\\n\"));\n\treturn status;\n}\u003c/pre\u003e"