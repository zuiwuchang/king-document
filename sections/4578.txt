var __v="\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;boost/asio.hpp\u0026gt;\n#include \u0026lt;boost/asio/spawn.hpp\u0026gt;\n#include \u0026lt;boost/bind.hpp\u0026gt;\n#include \u0026lt;boost/asio/ssl.hpp\u0026gt;\nnamespace ssl = boost::asio::ssl;\nnamespace asio = boost::asio;\ntypedef ssl::stream\u0026lt;asio::ip::tcp::socket\u0026gt; ssl_socket_t;\nvoid coroutine(asio::io_service\u0026amp; service,asio::yield_context ctx);\nvoid coroutineRequest(ssl_socket_t\u0026amp; sock,asio::yield_context ctx);\nint main()\n{\n    //創建 asio 服務\n    try\n    {\n        asio::io_service service;\n        \n        //啓動 請求協程\n        asio::spawn(service,boost::bind(coroutine,boost::ref(service),_1));\n\n        service.run();\n    }\n    catch(const boost::system::system_error\u0026amp; e)\n    {\n        std::cout\u0026lt;\u0026lt;e.what()\u0026lt;\u0026lt;\"\\n\";\n    }\n    return 0;\n}\nvoid coroutine(asio::io_service\u0026amp; service,asio::yield_context ctx)\n{\n    try\n    {\n        //創建 ssl 環境\n        ssl::context sslCtx(ssl::context::sslv23);\n        //創建 客戶端\n        ssl_socket_t sock(service,sslCtx);\n\n        //連接 服務器\n        asio::ip::tcp::resolver resolver(service);\n        asio::ip::tcp::resolver::query query(\"127.0.0.1\", \"1102\");\n        asio::async_connect(sock.lowest_layer(), resolver.resolve(query),ctx);\n        \n        //不驗證 ssl 證書\n        sslCtx.set_verify_mode(ssl::verify_none);\n        //建立 ssl 鏈接\n        sock.handshake(ssl_socket_t::client);\n\n        //和 普通 asio 一樣 進行通信\n        coroutineRequest(sock,ctx);\n\n        //關閉 socket\n        boost::system::error_code ec;\n        sock.lowest_layer().shutdown(asio::ip::tcp::socket::shutdown_both,ec);\n        sock.lowest_layer().close(ec);\n    }\n    catch(const boost::system::system_error\u0026amp; e)\n    {\n        std::cout\u0026lt;\u0026lt;e.what()\u0026lt;\u0026lt;\"\\n\";\n    }\n}\nvoid coroutineRequest(ssl_socket_t\u0026amp; sock,asio::yield_context ctx)\n{\n    try\n    {\n        std::string sendMsg = \"kate is beauty\";\n        sock.async_write_some(asio::buffer(sendMsg),ctx);\n\n        char buffer[1024] = {0};\n        std::size_t n = sock.async_read_some(asio::buffer(buffer,1024),ctx);\n        buffer[n] = 0;\n        if(sendMsg == buffer)\n        {\n            std::cout\u0026lt;\u0026lt;\"yes recv : \"\u0026lt;\u0026lt;n\u0026lt;\u0026lt;\"\\n\"\u0026lt;\u0026lt;buffer\u0026lt;\u0026lt;\"\\n\";            \n        }\n        else\n        {\n            std::cout\u0026lt;\u0026lt;\"bad recv\\n\";\n        }\n    }\n    catch(const boost::system::system_error\u0026amp; e)\n    {\n        std::cout\u0026lt;\u0026lt;e.what()\u0026lt;\u0026lt;\"\\n\";\n    }\n}\u003c/pre\u003e"