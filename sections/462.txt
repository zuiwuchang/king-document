var __v="\u003cpre class=\"prettyprint linenums\"\u003epackage main\n\nimport (\n\tlua \"github.com/yuin/gopher-lua\"\n\t\"log\"\n)\n\nconst (\n\tMETATABLE_PERSON = \"Person\"\n)\n\n//userdata go st\ntype Person struct {\n\tName string\n}\n\n//userdata go func\nfunc personGetSetName(ctx *lua.LState) int {\n\tp := func(ctx *lua.LState) *Person {\n\t\tud := ctx.CheckUserData(1)\n\t\tif v, ok := ud.Value.(*Person); ok {\n\t\t\treturn v\n\t\t}\n\t\tctx.ArgError(1, \"person expected\")\n\t\treturn nil\n\t}(ctx)\n\n\tif ctx.GetTop() == 2 {\n\t\tp.Name = ctx.CheckString(2)\n\t\treturn 0\n\t}\n\tctx.Push(lua.LString(p.Name))\n\treturn 1\n}\n\n//Constructor 創建 userdata\nfunc newPerson(ctx *lua.LState) int {\n\tperson := \u0026amp;Person{ctx.CheckString(1)}\n\n\tud := ctx.NewUserData()\n\tud.Value = person\n\n\t//設置 元表 以獲取到 Person 方法\n\tctx.SetMetatable(ud, ctx.GetTypeMetatable(METATABLE_PERSON))\n\n\tctx.Push(ud)\n\treturn 1\n}\nfunc main() {\n\tctx := lua.NewState(lua.Options{IncludeGoStackTrace: true})\n\tdefer ctx.Close()\n\n\t//註冊一個 userdata\n\tfunc(ctx *lua.LState) {\n\t\t//爲 userdata 創建一個 元表\n\t\tmt := ctx.NewTypeMetatable(METATABLE_PERSON)\n\n\t\t//將 元表 設置到 全局變量\n\t\tctx.SetGlobal(METATABLE_PERSON, mt)\n\n\t\t//將 創建 userdata 的 構造方法 設置到元表的 new\n\t\tctx.SetField(mt, \"New\", ctx.NewFunction(newPerson))\n\n\t\t//將 userdata 的方法 註冊到 元表中\n\t\tctx.SetField(mt, \"__index\", ctx.SetFuncs(ctx.NewTable(), map[string]lua.LGFunction{\n\t\t\t\"Name\": personGetSetName,\n\t\t}))\n\t}(ctx)\n\n\t//lua\n\tif err := ctx.DoString(`\nlocal p0 = Person.New(\"king\")\nlocal p1 = Person.New(\"dark\")\nprint(p0:Name())\nprint(p1:Name())\n\np0:Name(\"kate\")\nprint(p0:Name())\nprint(p1:Name())\n`,\n\t); err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\n\u003c/pre\u003e"