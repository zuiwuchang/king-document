var __v="\n\u003cpre class='prettyprint linenums'\u003emy.lua\n--[[\nlocal modname = ...\t--require 會將模塊名 傳入(文件名)\nlocal M = {}\t--定義模塊table\n\n--將模塊 配置到全局 \n_G[modname] = M\t\npackage.loaded[modname] = M\n\n--為了在下面的新環境中 可以調用 全局函數 重定義 元表\nsetmetatable(M,{__index = _G})\n--為 當前模塊設置 新環境 以免污染全局環境\n--setfenv(1,M) 5.2 開始取消了setfenv 而使用 _ENV(但不知道為何 setmetatable之後要用 _EVN 而非 _ENV) 作為環境\nlocal _EVN = M\n\nlua 提供了 module(...)  函數簡化上述操作 \n為module 傳入 package.seeall 會執行 --setmetatable(M,{__index = _G})\nmodule(...,package.seeall)\t--setmetatable(M,{__index = _G})\n]]\n\nmodule(...,package.seeall)\n\nfunction Add( ... )\n\tlocal s=0\n\tfor i,v in ipairs{...} do    \n\t\ts = s + v\n\tend\n\treturn s\nend\n\ntest.lua\nrequire \"my\"\nprint(Add(1,2))\u003c/pre\u003e"