var __v="\n\u003cpre class='prettyprint linenums'\u003e//以子樹 v 替換 子樹 u 並返回新的 root\nfunc Transplant(root, u, v *Element) *Element {\n\tif u.P == ElementNil { //u爲root節點\n\t\troot = v\n\t} else if u == u.P.L { //u是 左孩子\n\t\tu.P.L = v\n\t} else /*if u==u.P.R*/ { //u是 右孩子\n\t\tu.P.R = v\n\t}\n \n\t//更新 v的 父節點\n\tv.P = u.P\n \n\treturn root\n}\n \n//返回 最小 節點\nfunc Min(x *Element) *Element {\n\tfor x != ElementNil \u0026amp;\u0026amp; x.L != ElementNil {\n\t\tx = x.L\n\t}\n\treturn x\n}\n \n//刪除指定節點 並返回新的 root\nfunc Erase(root, z *Element) *Element {\n\tif z == ElementNil {\n\t\treturn root\n\t}\n \n\tvar x *Element\n\ty := z\n\tred := y.Red\n\tif z.L == ElementNil {\n\t\tx = z.R\n\t\troot = Transplant(root, z, z.R)\n\t} else if z.R == ElementNil {\n\t\tx = z.L\n\t\troot = Transplant(root, z, z.L)\n\t} else {\n\t\ty = Min(z.R)\n\t\tred = y.Red\n\t\tx = y.R\n\t\tif y.P == z {\n\t\t\tx.P = y\n\t\t} else {\n\t\t\troot = Transplant(root, y, y.R)\n\t\t\ty.R = z.R\n\t\t\ty.R.P = y\n\t\t}\n\t\troot = Transplant(root, z, y)\n\t\ty.L = z.L\n\t\ty.L.P = y\n\t\ty.Red = z.Red\n\t}\n \n\tif !red {\n\t\troot = EraseFixup(root, x)\n\t}\n \n\treturn root\n}\nfunc EraseFixup(root, x *Element) *Element {\n\tfor x != root \u0026amp;\u0026amp; !x.Red {\n\t\tif x == x.P.L {\n\t\t\tw := x.P.R\n\t\t\tif w.Red { //case 1\n\t\t\t\tw.Red = false\n\t\t\t\tx.P.Red = true\n\t\t\t\troot = LeftRotate(root, x.P)\n\t\t\t\tw = x.P.R\n \n\t\t\t}\n\t\t\tif !w.L.Red \u0026amp;\u0026amp; !w.R.Red { //case2\n\t\t\t\tw.Red = true\n\t\t\t\tx = x.P\n\t\t\t} else {\n\t\t\t\tif !w.R.Red {\n\t\t\t\t\tw.L.Red = false\n\t\t\t\t\tw.Red = true\n\t\t\t\t\troot = RightRotate(root, w)\n\t\t\t\t\tw = x.P.R\n\t\t\t\t}\n \n\t\t\t\tw.Red = x.P.Red\n\t\t\t\tx.P.Red = false\n\t\t\t\tw.R.Red = false\n\t\t\t\troot = LeftRotate(root, x.P)\n\t\t\t\tx = root\n\t\t\t}\n\t\t} else {\n \n\t\t\tw := x.P.L\n\t\t\tif w.Red { //case 1\n\t\t\t\tw.Red = false\n\t\t\t\tx.P.Red = true\n\t\t\t\troot = RightRotate(root, x.P)\n\t\t\t\tw = x.P.L\n \n\t\t\t}\n\t\t\tif !w.L.Red \u0026amp;\u0026amp; !w.R.Red { //case2\n\t\t\t\tw.Red = true\n\t\t\t\tx = x.P\n\t\t\t} else {\n\t\t\t\tif !w.L.Red {\n\t\t\t\t\tw.R.Red = false\n\t\t\t\t\tw.Red = true\n\t\t\t\t\troot = LeftRotate(root, w)\n\t\t\t\t\tw = x.P.L\n\t\t\t\t}\n \n\t\t\t\tw.Red = x.P.Red\n\t\t\t\tx.P.Red = false\n\t\t\t\tw.L.Red = false\n\t\t\t\troot = RightRotate(root, x.P)\n\t\t\t\tx = root\n\t\t\t}\n\t\t}\n\t}\n\tx.Red = false\n\treturn root\n}\u003c/pre\u003e"