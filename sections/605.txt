var __v="\u003cpre class=\"k-pre\"\u003eminimalist approach 由荷蘭 程序員 Gabor de Mooij 提出\n\n其通過為對象 定義一個 工廠方法 返回一個類的實例\n使用工廠方法 創建示例 模擬類\nvar animation\t=\t{\n\tcreate:function(){\n\t\tvar instance\t=\t{};\n\t\t\n\t\tinstance.name\t=\t\"animation\";\n\t\tinstance.action\t=\tfunction(){\n\t\t\t\talert(\"i'm \" + this.name + \"\\naction\");\n\t\t\t};\n\t\t\n\t\treturn instance;\n\t}\n};\n\n\n\n若要派生 只需要 在派生類 的工廠函數中 調用 父類工廠即可\n//派生子類\nvar cat\t=\t{\n\tcreate:function(){\n\t\tvar instance\t=\tanimation.create();\n\t\t\n\t\t//覆蓋父類方法 相當於 c++ virtual function\n\t\tinstance.action\t=\tfunction(){\n\t\t\t\talert(\"i'm \" + instance.name + \"\\ncat action\");\n\t\t\t};\n\t\t\n\t\treturn instance;\n\t}\n};\n\n//定義private 方法屬性 只要定義在 工廠函數類 而非 instance 外部自然就無法訪問\n\n//static 方法\n只要 同 方案1一樣 定義到 對象中 而非 instance 上 自然 所有實例都訪問同一數據\n(注意 這樣定義的 static 方法 子類無法 繼承)\n\u003c/pre\u003e"