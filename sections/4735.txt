var __v="\n\u003cpre class='prettyprint linenums'\u003e// 布爾 true/false\nconsole.log(\"***    boolean test    ***\")\nlet ok: boolean = true\nconsole.log(ok)\n\n\n\n// 數字\nconsole.log(\"***    number test    ***\")\nlet decLiteral: number = 19111010   // 10 進制寫法 1911-10-10 (19111010)\nlet hexLiteral: number = 0x1239C62  // 16 進制寫法 1911-10-10\nlet binaryLiteral: number = 0b1001000111001110001100010  // 2 進制寫法 1911-10-10\nlet octalLiteral: number = 0o110716142  // 8 進制寫法 1911-10-10\nconsole.log(decLiteral, hexLiteral, binaryLiteral, octalLiteral)\n\n\n\n// 字符串\nconsole.log(\"***    string test    ***\")\nlet str: string = \"cerberus is an idea\"\nconsole.log(str)\n\n\n\n// 數組 \nconsole.log(\"***    array test    ***\")\nlet list0: number[] = [1, 2, 3]\nconsole.log(list0)\n\n// 另外一種寫法\nlet list1: Array\u0026lt;string\u0026gt; = [\"kate\", \"anna\", \"anita\"]\nconsole.log(list1)\n\nlet list2: (number | string)[] = [1, 2, \"ok\"]\nconsole.log(list2)\n\nlet list3: Array\u0026lt;string | number\u0026gt; = [\"kate\", \"anna\", 10]\nconsole.log(list3)\n\n\n\n// 元組 類似 c++ boost::tuple\nconsole.log(\"***    tuple test    ***\")\nlet person: [string, number] = [\"king\", 1]\nconsole.log(person[\"0\"], person[\"1\"])\nperson[1] = 10\nconsole.log(person[0], person[1])\n\n\n\n// 枚舉\nconsole.log(\"***    enum test    ***\")\n//enum Color { Red, Green, Blue } // 默認 從 0 開始自增加\n//enum Color {Red = 1, Green, Blue}\nenum Color { Red = 1, Green = 2, Blue = 4, Yellow }\nlet c: Color = Color.Red\nconsole.log(c, c == Color.Red)\nconsole.log(Color.Yellow == 5, Color[Color.Yellow] == \"Yellow\") // Color[Color.Yellow] 返回 枚舉值 名稱 字符串\n\n\n\n// any 會移除 型別驗證\nconsole.log(\"***    any test    ***\")\nlet blackHole: any = 123\nblackHole = \"ok\"\nblackHole = {}\nblackHole = null\nblackHole = undefined\n\n\n// void 只能 賦予 null/undefined 或表示 函數沒有返回值\nconsole.log(\"***    void null undefined test    ***\")\nlet empty: void = null\nempty = undefined\nfunction getEmpty(): void {\n}\nconsole.log(empty, getEmpty())\n\n// null 只能存儲 null\nlet empty0: null = null\n// undefined 只能存儲 undefined\nlet empty1: undefined = undefined\n// (\n//     默認 null undefined 是所有型別的 子類 故可將 null undefined 賦值給 其它基本型別\n//     如果 設置了 --strictNullChecks 選項 則 只可 賦值給 自身/void\n// )\n\n\n\n\n// never 通常 用來 表示一個 函數 永遠不會 返回\nconsole.log(\"***    never test    ***\")\nfunction NewError(str): never {\n    throw new Error(str)\n}\nfunction Busy(): never {\n    while (true) {\n\n    }\n}\u003c/pre\u003e"