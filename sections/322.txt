var __v="\u003cpre class=\"k-pre\"\u003e//改變工作目錄\nfunc (f *File) Chdir() error\n\n//同 linux 命令\nfunc (f *File) Chmod(mode FileMode) error\nfunc (f *File) Chown(uid, gid int) error\nfunc (f *File) Sync() (err error)\n\nconst (\n    // The single letters are the abbreviations\n    // used by the String method's formatting.\n    ModeDir        FileMode = 1 \u003c\u003c (32 - 1 - iota) // d: is a directory\n    ModeAppend                                     // a: append-only\n    ModeExclusive                                  // l: exclusive use\n    ModeTemporary                                  // T: temporary file (not backed up)\n    ModeSymlink                                    // L: symbolic link\n    ModeDevice                                     // D: device file\n    ModeNamedPipe                                  // p: named pipe (FIFO)\n    ModeSocket                                     // S: Unix domain socket\n    ModeSetuid                                     // u: setuid\n    ModeSetgid                                     // g: setgid\n    ModeCharDevice                                 // c: Unix character device, when ModeDevice is set\n    ModeSticky                                     // t: sticky\n\n    // Mask for the type bits. For regular files, none will be set.\n    ModeType = ModeDir | ModeSymlink | ModeNamedPipe | ModeSocket | ModeDevice\n\n    ModePerm FileMode = 0777 // permission bits\n)\n\n\n\n//關閉文件\nfunc (f *File) Close() error\n\n\n\n\n//讀/寫byte\nfunc (f *File) Read(b []byte) (n int, err error)\nfunc (f *File) ReadAt(b []byte, off int64) (n int, err error)\n\nfunc (f *File) Write(b []byte) (n int, err error) 写入内容\nfunc (f *File) WriteAt(b []byte, off int64) (n int, err error) 在offset位置写入内容\n//寫字符串\nfunc (f *File) WriteString(s string) (ret int, err error)\n\n\n\n//改變讀寫位置\nfunc (f *File) Seek(offset int64, whence int) (ret int64, err error)\nconst (\n    SEEK_SET int = 0 // seek relative to the origin of the file\n    SEEK_CUR int = 1 // seek relative to the current offset\n    SEEK_END int = 2 // seek relative to the end\n)\n\n\n\n//返回文件信息\nfunc (f *File) Stat() (fi FileInfo, err error)\n\ntype FileInfo interface {\n    Name() string       // base name of the file\n    Size() int64        // length in bytes for regular files; system-dependent for others\n    Mode() FileMode     // file mode bits\n    ModTime() time.Time // modification time\n    IsDir() bool        // abbreviation for Mode().IsDir()\n    Sys() interface{}   // underlying data source (can return nil)\n}\n\n//列出文件夾下 的文件  (不會返回. 和 ..)\n//n大於0 一次列出n個 出錯返回err = io.EOF\n//n小於等於0 一次返回所有 文件 \nfunc (f *File) Readdir(n int) (fi []FileInfo, err error)\nfunc (f *File) Readdirnames(n int) (names []string, err error)\n\u003c/pre\u003e"