var __v="\u003col\u003e\n\t\u003cli\u003e定義一個實現了 IDispatch 接口的 子類\n\t\u003cpre class='prettyprint linenums'\u003e#pragma once\n\t#include \"oaidl.h\"\n\tclass MyExternal :\n\t\tpublic IDispatch\n\t{\n\t\tlong _refNum;\n\tpublic:\n\t\tMyExternal(void)\n\t\t{\n\t\t\t_refNum = 1;\n\t\t}\n\t\t~MyExternal(void)\n\t\t{\n\t\t}\n\n\t\t // IUnknown Methods\n\n\t    STDMETHODIMP QueryInterface(REFIID iid,void**ppvObject)\n\t    {\n\t        *ppvObject = NULL;\n\t        if (iid == IID_IUnknown)    *ppvObject = this;\n\t        else if (iid == IID_IDispatch)    *ppvObject = (IDispatch*)this;\n\t        if(*ppvObject)\n\t        {\n\t            AddRef();\n\t            return S_OK;\n\t        }\n\t        return E_NOINTERFACE;\n\t    }\n\n\t    STDMETHODIMP_(ULONG) AddRef()\n\t    {\n\t        return InterlockedIncrement(\u0026amp;_refNum);\n\t    }\n\n\t    STDMETHODIMP_(ULONG) Release()\n\t    {\n\t        InterlockedDecrement(\u0026amp;_refNum);\n\t        if(_refNum != 0)\n\t        {\n\t\t\t\treturn _refNum;\n\t        }\n\t        \n\t        delete this;\n\t\t\treturn 0;\n\t    }\n\n\t    // IDispatch Methods\n\t    HRESULT _stdcall GetTypeInfoCount(\n\t        unsigned int * pctinfo) \n\t    {\n\t        return E_NOTIMPL;\n\t    }\n\n\t    HRESULT _stdcall GetTypeInfo(\n\t        unsigned int iTInfo,\n\t        LCID lcid,\n\t        ITypeInfo FAR* FAR* ppTInfo) \n\t    {\n\t        return E_NOTIMPL;\n\t    }\n\n\t\t//關聯 函數名 id\n\t    HRESULT _stdcall GetIDsOfNames(\n\t        REFIID riid, \n\t        OLECHAR FAR* FAR* rgszNames, \n\t        unsigned int cNames, \n\t        LCID lcid, \n\t        DISPID FAR* rgDispId \n\t    )\n\t    {\n\t        if(lstrcmp(rgszNames[0], L\"sum\")==0)\n\t        {\n\t            //js 調用 window.external.sum 时 會獲取到此ID\n\t            *rgDispId = 1;\n\t        }\n\t\t\tif(lstrcmp(rgszNames[0], L\"show\")==0)\n\t        {\n\t            *rgDispId = 2;\n\t        }\n\t        return S_OK;\n\t    }\n\n\t\t//根據函數id 執行不同操作\n\t    HRESULT _stdcall Invoke(\n\t        DISPID dispIdMember,\n\t        REFIID riid,\n\t        LCID lcid,\n\t        WORD wFlags,\n\t        DISPPARAMS* pDispParams,\n\t        VARIANT* pVarResult,\n\t        EXCEPINFO* pExcepInfo,\n\t        unsigned int* puArgErr\n\t    )\n\t    {\n\t        if(dispIdMember == 1)\n\t        {\n\t            //网页调用CppCall时，或根据获取到的ID调用Invoke方法\n\t\t\t\tINT sum = 0;\n\t\t\t\tfor(UINT i=0;i\u0026lt;pDispParams-\u0026gt;cArgs;++i)\n\t\t\t\t{\n\t\t\t\t\tsum += pDispParams-\u0026gt;rgvarg[i].intVal;\n\t\t\t\t}\n\t\t\t\tCComVariant rs = sum;\n\t\t\t\t*pVarResult = rs;\n\t\t\t\t\n\t        }\n\t\t\telse if(dispIdMember == 2)\n\t\t\t{\n\t\t\t\tCString str = pDispParams-\u0026gt;rgvarg[0].bstrVal;\n\t\t\t\t::AfxMessageBox(str);\n\t\t\t}\n\t        return S_OK;\n\t    }\n\t};\u003c/pre\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003e重寫 webbrowser 的 GetExternal 方法 返回 IDispatch子類 實例\u003cbr\u003e\n\t\u003cstrong\u003eIDispatch子類實例 必須 new 必須不能delete 由com自動釋放\u003c/strong\u003e\n\t\u003cpre class='prettyprint linenums'\u003eMyExternal* m_external;\n\n\tCmywebView::CmywebView()\n\t{\n\t\t// TODO: 在此处添加构造代码\n\t\t//mp_external = new MyExternal();\n\t\tm_external = new MyExternal();\n\t}\n\n\tCmywebView::~CmywebView()\n\t{\n\t\tm_p-\u0026gt;Release();\n\t}\n\n\tHRESULT CmywebView::OnGetExternal( LPDISPATCH *lppDispatch)\n\t{\n\t\tm_external-\u0026gt;AddRef();\n\t\t*lppDispatch = m_external;\n\n\t\treturn S_OK;\n\t}\u003c/pre\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003e在js中 通過 window.external.XXX 調用擴展函數\u003c/li\u003e\n\u003c/ol\u003e"