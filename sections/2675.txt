var __v="\u003cpre class=\"prettyprint linenums\"\u003epackage main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n)\n\nconst (\n\tAddr       = \"127.0.0.1:8080\"\n\tBufferSize = 1024\n\tTimeout    = time.Second * 2\n\n\tStatueOk        = 0\n\tStatueTimeout   = 1\n\tStatueNoConnect = 2\n\tStatueError     = 3\n)\n\nfunc main() {\n\tvar addr string\n\tflag.StringVar(\u0026amp;addr, \"addr\", Addr, \"remote address\")\n\tflag.StringVar(\u0026amp;addr, \"a\", Addr, \"remote address\")\n\tvar h bool\n\tflag.BoolVar(\u0026amp;h, \"h\", false, \"show help\")\n\tflag.BoolVar(\u0026amp;h, \"help\", false, \"show help\")\n\tvar count int\n\tflag.IntVar(\u0026amp;count, \"count\", 1024, \"number for connect\")\n\tflag.IntVar(\u0026amp;count, \"c\", 1024, \"number for connect\")\n\n\tflag.Parse()\n\n\tif h {\n\t\tflag.PrintDefaults()\n\t\treturn\n\t}\n\n\tnow := time.Now()\n\tch := make(chan int)\n\tfor i := 0; i \u0026lt; count; i++ {\n\t\tgo doConnect(ch)\n\t}\n\n\tsumOk := 0\n\tsumTime := 0\n\tsumConnect := 0\n\tsumError := 0\n\tfor count \u0026gt; 0 {\n\t\tswitch \u0026lt;-ch {\n\t\tcase StatueOk:\n\t\t\tsumOk++\n\t\tcase StatueTimeout:\n\t\t\tsumTime++\n\t\tcase StatueNoConnect:\n\t\t\tsumConnect++\n\t\tcase StatueError:\n\t\t\tsumError++\n\t\t}\n\t\tcount--\n\t}\n\n\tlog.Println(\"ok\t\t:\", sumOk)\n\t//log.Println(\"timeout\t:\", sumTime)\n\tlog.Println(\"noconnect\t:\", sumConnect)\n\tlog.Println(\"error\t:\", sumError)\n\tlog.Println(\"time\t:\", time.Now().Sub(now))\n}\nfunc doConnect(ch chan int) {\n\t/*chStatue := make(chan int, 2)\n\tgo func() {\n\t\ttime.Sleep(Timeout)\n\t\tchStatue \u0026lt;- StatueTimeout\n\t}()\n\tgo func() {\n\t\tchStatue \u0026lt;- goConnect()\n\t}()\n\tstatue := \u0026lt;-chStatue\n\tch \u0026lt;- statue\n\t*/\n\tch \u0026lt;- goConnect()\n}\nfunc goConnect() int {\n\tc, e := net.Dial(\"tcp\", Addr)\n\tif e != nil {\n\n\t\treturn StatueNoConnect\n\t}\n\tdefer c.Close()\n\n\tstr := \"i'm king\\n\"\n\t_, e = c.Write([]byte(str))\n\tif e != nil {\n\t\treturn StatueError\n\t}\n\n\tb := make([]byte, BufferSize)\n\tpos := 0\n\tfor {\n\t\tn, e := c.Read(b[pos:])\n\t\tif e != nil {\n\t\t\tbreak\n\t\t}\n\t\tpos += n\n\t\tif b[pos-1] == '\\n' {\n\t\t\t//check echo\n\t\t\tif string(b[:pos]) == str {\n\t\t\t\treturn StatueOk\n\t\t\t}\n\t\t}\n\t\t//large than max msg\n\t\tif pos == BufferSize {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn StatueError\n}\n\u003c/pre\u003e"