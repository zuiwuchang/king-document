var __v="\n\u003cpre class='prettyprint linenums'\u003e#ifndef MYEMPTYVALIDATOR_H\n#define MYEMPTYVALIDATOR_H\n\n#ifndef WX_PRECOMP\n    #include \u0026lt;wx/wx.h\u0026gt;\n#endif\n\n#include \u0026lt;wx/textentry.h\u0026gt;\n\nclass myEmptyValidator\n    :public wxValidator\n{\n    public:\n        myEmptyValidator(wxString* val,\n        \tconst wxString\u0026amp; emsg = wxString(_(\"Required information entry is empty.\")),\n        \tconst wxString\u0026amp; title = wxString(_(\"Validation conflict\")));\n        virtual ~myEmptyValidator();\n\n        //實現 copy 構造\n        myEmptyValidator(const myEmptyValidator\u0026amp; copy);\n\n        //實現 clone\n        virtual wxObject * \tClone () const\n        {\n            return new myEmptyValidator(*this);\n        }\n        //實現 copy\n        bool Copy(const myEmptyValidator\u0026amp; copy)\n        {\n            wxValidator::Copy(copy);\n\n            _val = copy._val;\n            _emsg = copy._emsg;\n            _title = copy._title;\n\n            return true;\n        }\n    protected:\n        //保存的 關聯變量 指針\n        wxString* _val;\n\n        //驗證失敗時 顯示的 錯誤信息\n        wxString _emsg;\n\n        //驗證失敗時 顯示的 錯誤標題\n        wxString _title;\n    public:\n        //重新驗證函數\n        virtual bool Validate(wxWindow *parent);\n        //重寫 val to window\n        virtual bool TransferToWindow();\n\n        //重寫 window to val\n        virtual bool TransferFromWindow();\n\n    protected:\n        //返回可以支持此 驗證器的 控件指針\n        wxTextEntry* GetTextEntry();\n\n    private:\n        //增加 wx 類型識別\n        DECLARE_CLASS(myEmptyValidator)\n        wxDECLARE_NO_ASSIGN_CLASS(myEmptyValidator);\n};\n\n#endif // MYEMPTYVALIDATOR_H\u003c/pre\u003e"