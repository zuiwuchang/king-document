var __v="\u003cpre class=\"k-pre\"\u003e//將字符串 s以字符分隔符 sep 分隔\nfunc Split(s, sep string) []string\n//同上 不過 n 指定了 分隔次數\nfunc SplitN(s, sep string, n int) []string\n\n//同上 不過 分隔字符串 將包含分隔符\nfunc SplitAfter(s, sep string, n int) []string\nfunc SplitAfterN(s, sep string) []string\n\n//同上 不過分隔符 為傳入的 判別式函數(返回true 分隔)\nfunc FieldsFunc(s string, f func(rune) bool) []string\n//使用 空白字符 分隔字符串\nfunc Fields(s string) []string\n\n\n//返回是否存在子串\nfunc Contains(s, substr string) bool\n//返回子串出現次數\nfunc Count(s, sep string) int\n//返回字符串是否相等\nfunc EqualFold(s, t string) bool\n\n//返回字符串是否相等\nfunc EqualFold(s, t string) bool\n\n\n\n//返回s是否以指定字符串開頭\nfunc HasPrefix(s, prefix string) bool\n//...結尾\nfunc HasSuffix(s, suffix string) bool\n//返回指定 * 第一次出現的位置\nfunc Index(s, sep string) int\nfunc IndexAny(s, chars string) int\nfunc IndexByte(s string, c byte) int\nfunc IndexFunc(s string, f func(rune) bool) int\nfunc IndexRune(s string, r rune) int\n\n//將字符串 以sep分隔符 合併\nfunc Join(a []string, sep string) string\n\n//返回 * 最後一次出現位置\nfunc LastIndex(s, sep string) int\nfunc LastIndexAny(s, chars string) int\nfunc LastIndexFunc(s string, f func(rune) bool) int\n\n\n\n//根據 mapping 規則 替換 是中所有字符\nfunc Map(mapping func(rune) rune, s string) string\n\n//創建一個字符串s的對象 使其子串 Read() ReadByte() ReadRune()\nfunc NewReader(s string) *Reader\n\n//創建一個替換器 以處理字符串替換\nfunc NewReplacer(oldnew ...string) *Replacer\n\t\u003cstrong\u003er := strings.NewReplacer(\"\u0026lt;\", \"\u0026amp;lt;\", \"\u0026gt;\", \"\u0026amp;gt;\")\n\tfmt.Println(r.Replace(\"This is \u0026lt;b\u0026gt;HTML\u0026lt;/b\u0026gt;!\"))\n\t//This is \u0026amp;lt;b\u0026amp;gt;HTML\u0026amp;lt;/b\u0026amp;gt;!\u003c/strong\u003e\n\n//重複s count次\nfunc Repeat(s string, count int) string\n\n//將s中的old替換為new n是替換次數\nfunc Replace(s, old, new string, n int) string\n\n//對s中每個單詞 首字母大寫\nfunc Title(s string) string\n\n\n\n//轉小寫\nfunc ToLower(s string) string\n\n//oLowerSpecial returns a copy of the string s with all Unicode letters mapped to their lower case, giving priority to the special casing rules.\nfunc ToLowerSpecial(_case unicode.SpecialCase, s string) string\n\n//ToTitle returns a copy of the string s with all Unicode letters mapped to their title case.\nfunc ToTitle(s string) string\n\n//ToTitleSpecial returns a copy of the string s with all Unicode letters mapped to their title case, giving priority to the special casing rules.\nfunc ToTitleSpecial(_case unicode.SpecialCase, s string) string\n\n//轉大寫\nfunc ToUpper(s string) string\n\n//ToUpperSpecial returns a copy of the string s with all Unicode letters mapped to their upper case, giving priority to the special casing rules.\nfunc ToUpperSpecial(_case unicode.SpecialCase, s string) string\n\n\n\n//去掉兩端的cutset\nfunc Trim(s string, cutset string) string\n\n//從兩端開始過濾指定非字符\nfunc TrimFunc(s string, f func(rune) bool) string\n\n//同上 不過只過了 左/右\nfunc TrimLeft(s string, cutset string) string\nfunc TrimLeftFunc(s string, f func(rune) bool) string\nfunc TrimRight(s string, cutset string) string\nfunc TrimRightFunc(s string, f func(rune) bool) string\n\n//去掉指定前綴\nfunc TrimPrefix(s, prefix string) string\n\n//去掉空格\nfunc TrimSpace(s string) string\u003c/pre\u003e"