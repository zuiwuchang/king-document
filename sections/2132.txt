var __v="\n\u003cpre class='prettyprint linenums'\u003e#include\u0026lt;boost\\bind.hpp\u0026gt;\n\nclass Test\n{\npublic:\n\tTest()\n\t{\n\t\tvalue\t=\t0;\n\t}\n\tint value;\n\tvoid add(const int a,const int b)\n\t{\n\t\tstd::cout\u0026lt;\u0026lt;a+b\u0026lt;\u0026lt;std::endl;\n\t}\n\n\ttypedef int result_type;\n\tresult_type\toperator()(const int a,const int b)\n\t{\n\t\treturn a + b;\n\t}\n};\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\t//綁定普通函數 函數指針\n\tboost::bind(puts,\"bind\")\n\t\t();\t//operator () 引發真實的 調用\n\n\t//使用佔位符\n\tboost::bind(puts,_1)\n\t\t(\"bind _1\");\t//佔位符 以便再 () 時才傳入參數\n\tboost::bind(puts,_2)\n\t\t(\"第一個參數被忽略\",\"bind _2\");\n\n\t//綁定成員函數\n\tTest t;\n\tboost::bind(\u0026amp;Test::add,t,_1,_2)\n\t\t(10,20);\n\n\t//綁定成員變量\n\tt.value\t=\t1;\n\tstd::cout\u0026lt;\u0026lt;boost::bind(\u0026amp;Test::value,\u0026amp;t)()\u0026lt;\u0026lt;\"\\n\";\n\n\t//綁定函數對象\n\t//若未定義 result_type 需要 再模板傳入 返回值型別 bind\u0026lt;int\u0026lt;(Test(),1,2)\n\tstd::cout\u0026lt;\u0026lt;boost::bind(Test(),1,2)()\u0026lt;\u0026lt;\"\\n\";\n\t\n\tstd::system(\"pause\");\n\treturn 0;\n}\u003c/pre\u003e"