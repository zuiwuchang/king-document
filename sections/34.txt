var __v="\u003cpre class=\"prettyprint linenums\"\u003epackage main\n\nimport (\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n\t\"github.com/go-xorm/xorm\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc main() {\n\t//創建 xorm 引擎 傳入參數 同 sql.Open\n\t//var engine *xorm.Engine\n\t//engine 是 線程 安全的\n\tengine, err := xorm.NewEngine(\"mysql\", \"dark:*********@/dark?charset=utf8\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\t//設置 連接池 最大 空閒數\n\t//engine.SetMaxIdleConns(10)\n\t//設置 最大 打開 連接數\n\t//engine.SetMaxOpenConns(10)\n\n\t//打開 日誌 默認為 false\n\tengine.ShowSQL = true   //在控制台打印生成的 sql\n\tengine.ShowDebug = true //...調試信息\n\tengine.ShowErr = true   //...錯誤信息\n\tengine.ShowWarn = true  //...警告信息\n\n\t//將 日誌 寫入到 文件\n\tf, err := os.Create(\"sql.log\")\n\tif err != nil {\n\t\tprintln(err.Error())\n\t\treturn\n\t}\n\tdefer f.Close()\n\tengine.Logger = xorm.NewSimpleLogger(f)\n\n\t//測試到數據庫的 連接\n\terr = engine.Ping()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\t//啟動一個 線程 保證到數據庫的連接鮮活 (避免數據庫的 超時 斷開連接)\n\tgo func() {\n\t\tfor true {\n\t\t\t//每 6 小時 ping 數據庫\n\t\t\ttime.Sleep(6 * time.Hour)\n\t\t\tengine.Ping()\n\t\t}\n\t}()\n\n\tfmt.Println(\"ok\")\n\n\t//此函數可手動關閉 xorm 引擎 一般不需要調用\n\t//而是由程序退出時 自動關閉\n\t//engine.Close()\n}\u003c/pre\u003e"