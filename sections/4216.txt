var __v="\u003cstrong\u003eprotoc -I pb/ pb/pb.proto --cpp_out=pb\u003c/strong\u003e\n\u003cpre class='prettyprint linenums'\u003esyntax = \"proto3\";\npackage pb;\n\nmessage Cat{\n\trepeated string name = 1;\n\tint64 id = 2;\n\tint32 lv = 3;\n}\nmessage Dog{\n\tint64 id = 1;\n\tstring name = 2;\n\tstring Food = 3;\n}\u003c/pre\u003e\n\n\u003cstrong\u003emain.cpp\u003c/strong\u003e\n\u003cpre class='prettyprint linenums'\u003e#include \"pb/pb.pb.h\"\n\nbool test_write(std::string\u0026amp; bCat,std::string\u0026amp; bDog)\n{\n    /***\tcat\t***/\n    pb::Cat cat;\n    cat.set_id(1);\n    cat.add_name(\"cat\");\n    cat.add_name(\"cat\");\n    cat.set_name(1,\"Cat\");\n    cat.set_lv(10);\n\n    //cat.SerializeToOstream(\u0026amp;std::cout);\n    //boost::scoped_array\u0026lt;char\u0026gt; data(new char[cat.ByteSizeLong()]);\n    //cat.SerializeToArray(data.get(),cat.ByteSizeLong());\n    if(!cat.SerializeToString(\u0026amp;bCat))\n    {\n        std::cout\u0026lt;\u0026lt;\"bad write cat\"\u0026lt;\u0026lt;std::endl;\n        return false;\n    }\n\n    /***\tdog\t***/\n    pb::Dog dog;\n    dog.set_id(100);\n    dog.set_name(\"Dog\");\n    dog.set_food(\"meat 蛋糕\");\n    if(!dog.SerializeToString(\u0026amp;bDog))\n    {\n        std::cout\u0026lt;\u0026lt;\"bad write dog\"\u0026lt;\u0026lt;std::endl;\n        return false;\n    }\n\n    return true;\n}\nbool test_read(std::string\u0026amp; bCat,std::string\u0026amp; bDog)\n{\n    pb::Cat cat;\n    pb::Dog dog;\n    //cat.Clear();\n    //dog.Clear();\n    /***\tcat\t***/\n    if(!cat.ParseFromString(bCat))\n    {\n        std::cout\u0026lt;\u0026lt;\"bad read cat\"\u0026lt;\u0026lt;std::endl;\n        return false;\n    }\n    std::cout\u0026lt;\u0026lt;\"id = \"\u0026lt;\u0026lt;cat.id()\u0026lt;\u0026lt;\"\\nname = [\";\n    for(int i=0; i\u0026lt;cat.name_size(); ++i)\n    {\n        if(i)\n        {\n            std::cout\u0026lt;\u0026lt;\",\";\n        }\n        std::cout\u0026lt;\u0026lt;cat.name(i);\n    }\n    std::cout\u0026lt;\u0026lt;\"]\\nlv = \"\u0026lt;\u0026lt;cat.lv()\u0026lt;\u0026lt;\"\\n\";\n\n    /***\tdog\t***/\n    if(!dog.ParseFromString(bDog))\n    {\n        std::cout\u0026lt;\u0026lt;\"bad read dog\"\u0026lt;\u0026lt;std::endl;\n        return false;\n    }\n    std::cout\u0026lt;\u0026lt;\"id = \"\u0026lt;\u0026lt;dog.id()\n             \u0026lt;\u0026lt;\"\\nname = \"\u0026lt;\u0026lt;dog.name()\n             \u0026lt;\u0026lt;\"\\nfood = \"\u0026lt;\u0026lt;dog.food()\u0026lt;\u0026lt;\"\\n\";\n    return true;\n}\nint main()\n{\n    //驗證 庫 是否和當前 兼容\n    GOOGLE_PROTOBUF_VERIFY_VERSION;\n\n    std::string bCat,bDog;\n    test_write(bCat,bDog) \u0026amp;\u0026amp; test_read(bCat,bDog);\n\n    return 0;\n}\n\u003c/pre\u003e"