var __v="\u003cpre class=\"prettyprint linenums\"\u003epackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"log\"\n)\n\ntype Header struct {\n\tFlag uint32\n\tId   uint32\n\tSize uint32\n}\n\nfunc main() {\n\ttestStruct()\n\ttestUint()\n}\nfunc testUint() {\n\n\tb16 := make([]byte, 2)\n\tbinary.BigEndian.PutUint16(b16, uint16(16))\n\tlog.Println(b16)\n\tlog.Println(binary.BigEndian.Uint16(b16))\n\n\tb32 := make([]byte, 4)\n\tbinary.BigEndian.PutUint32(b32, uint32(32))\n\tlog.Println(binary.BigEndian.Uint32(b32))\n\n\tb64 := make([]byte, 8)\n\tbinary.BigEndian.PutUint64(b64, uint64(64))\n\tlog.Println(b64)\n\tlog.Println(binary.BigEndian.Uint64(b64))\n}\nfunc testStruct() {\n\tbuf := \u0026amp;bytes.Buffer{}\n\th := \u0026amp;Header{Flag: 1, Id: 2, Size: 3}\n\t//轉 二進制 小端 序列\n\te := binary.Write(buf, binary.LittleEndian, h)\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\tlog.Println(buf.Bytes())\n\n\t//二進制 小端 序列 轉 結構\n\th = \u0026amp;Header{}\n\te = binary.Read(buf, binary.LittleEndian, h)\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\tlog.Println(h)\n}\u003c/pre\u003e"