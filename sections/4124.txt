var __v="\n\u003cpre class='prettyprint linenums'\u003epackage main\n\nimport (\n\t\"image\"\n\t\"image/draw\"\n\t_ \"image/gif\"\n\t_ \"image/jpeg\"\n\t\"image/png\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\t//加載圖像\n\tr, e := os.Open(\"background.jpg\")\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\tdefer r.Close()\n\n\t//解碼 返回 Image接口 格式字符串 錯誤\n\timg, _, e := image.Decode(r)\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\n\t//創建新圖像\n\timg, e = newImage(img)\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\n\t//保存圖像\n\tw, e := os.Create(\"background.png\")\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n\tdefer w.Close()\n\t//編碼\n\te = png.Encode(w, img)\n\tif e != nil {\n\t\tlog.Fatalln(e)\n\t}\n}\nfunc newImage(src image.Image) (image.Image, error) {\n\t//創建新圖像\n\tbounds := src.Bounds()\n\tdist := image.NewRGBA(src.Bounds())\n\n\t//覆蓋像素\n\tdraw.Draw(dist,\n\t\tbounds,\n\t\tsrc,\n\t\tbounds.Min,\n\t\tdraw.Over,\n\t)\n\n\t//返回 Image 接口\n\treturn dist.SubImage(bounds), nil\n}\n\u003c/pre\u003e"