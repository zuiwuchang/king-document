var __v="\n\u003cpre class='prettyprint linenums'\u003eclass convert\n{\nprivate:\n\tconvert(){}\n\npublic:\n\n#ifdef WIN32\n\tstatic void delete_convert_gbitmap(Gdiplus::Bitmap* ptr)\n\t{\n\t\t::delete ptr;\n\t}\n\n\tstatic boost::shared_ptr\u0026lt;Gdiplus::Bitmap\u0026gt; mat_to_gbitmap(const cv::Mat\u0026amp; mat,bool alpha = true)\n\t{\n\t\tif(alpha)\n\t\t{\n\t\t\treturn boost::shared_ptr\u0026lt;Gdiplus::Bitmap\u0026gt;(::new Gdiplus::Bitmap(mat.cols\n\t\t\t\t,mat.rows\n\t\t\t\t,mat.cols * mat.channels()\n\t\t\t\t,PixelFormat32bppARGB\n\t\t\t\t,mat.data\n\t\t\t\t)\n\t\t\t\t,delete_convert_gbitmap\t//指定刪除器\n\t\t\t\t)\n\t\t\t\t;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn boost::shared_ptr\u0026lt;Gdiplus::Bitmap\u0026gt;(::new Gdiplus::Bitmap(mat.cols\n\t\t\t\t,mat.rows\n\t\t\t\t,mat.cols * mat.channels()\n\t\t\t\t,PixelFormat24bppRGB\n\t\t\t\t,mat.data\n\t\t\t\t)\n\t\t\t\t,delete_convert_gbitmap\t//指定刪除器\n\t\t\t\t)\n\t\t\t\t;\n\t\t}\n\t}\n\t\n\tstatic cv::Mat gbitmap_to_mat(Gdiplus::Bitmap\u0026amp; bitmap,bool alpha = true)\n\t{\n\t\tif(alpha)\n\t\t{\n\t\t\tGdiplus::BitmapData source;\n\t\t\tif(Gdiplus::Ok\t==\tbitmap.LockBits(\u0026amp;Gdiplus::Rect(0,0,bitmap.GetWidth(),bitmap.GetHeight())\n\t\t\t\t,Gdiplus::ImageLockModeRead\n\t\t\t\t,PixelFormat32bppARGB\n\t\t\t\t,\u0026amp;source \n\t\t\t\t)\n\t\t\t\t)\n\t\t\t{\n\t\t\t\tcv::Mat mat(bitmap.GetHeight(),bitmap.GetWidth(),CV_8UC4,source.Scan0);\n\n\t\t\t\tbitmap.UnlockBits(\u0026amp;source);\n\t\t\t\treturn mat;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tGdiplus::BitmapData source;\n\t\t\tif(Gdiplus::Ok\t==\tbitmap.LockBits(\u0026amp;Gdiplus::Rect(0,0,bitmap.GetWidth(),bitmap.GetHeight())\n\t\t\t\t,Gdiplus::ImageLockModeRead\n\t\t\t\t,PixelFormat24bppRGB\n\t\t\t\t,\u0026amp;source \n\t\t\t\t)\n\t\t\t\t)\n\t\t\t{\n\t\t\t\tcv::Mat mat(bitmap.GetHeight(),bitmap.GetWidth(),CV_8UC3,source.Scan0);\n\t\t\t\t\n\t\t\t\tbitmap.UnlockBits(\u0026amp;source);\n\t\t\t\treturn mat;\n\t\t\t}\n\t\t}\n\t\treturn cv::Mat();\n\t}\n\n#endif\n\n};\u003c/pre\u003e"