var __v="\u003cpre class=\"k-pre\"\u003e\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;string\u0026gt;\n#include \u0026lt;cstring\u0026gt;\n\n\nclass Animal\n{\nprivate:\n    char* _name = NULL;\npublic:\n    Animal(const char* name)\n    {\n        _name = new char[strlen(name)+1];\n        strcpy(_name,name);\n        std::cout\u0026lt;\u0026lt;_name\u0026lt;\u0026lt;\" create  \"\u0026lt;\u0026lt;this\u0026lt;\u0026lt;\"\\n\";\n    }\n    Animal(const Animal\u0026amp; copy)\n    {\n        const char* name = copy._name;\n\n        _name = new char[strlen(name)+1];\n        strcpy(_name,name);\n\n        std::cout\u0026lt;\u0026lt;_name\u0026lt;\u0026lt;\" copy    \"\u0026lt;\u0026lt;this\u0026lt;\u0026lt;\"\\n\";\n    }\n\n    ~Animal()\n    {\n        std::cout\u0026lt;\u0026lt;_name\u0026lt;\u0026lt;\" die \"\u0026lt;\u0026lt;this\u0026lt;\u0026lt;\"\\n\";\n        if(_name)\n        {\n            delete _name;\n        }\n    }\n\n    void Speak()const\n    {\n        std::cout\u0026lt;\u0026lt;\"i'm \"\u0026lt;\u0026lt;_name\u0026lt;\u0026lt;\"\\n\";\n    }\n\n};\n\nAnimal make_animal(const char* name)\n{\n    return Animal(name);\n}\n\nint main()\n{\n    {\n        puts(\"********  one ********\");\n        Animal cat(make_animal(\"cat\"));\n        cat.Speak();\n    }\n\n    {\n        puts(\"********  two ********\");\n        Animal dog = make_animal(\"dog\");\n        dog.Speak();\n    }\n\n\n    return 0;\n}\u003c/pre\u003e\n\n\n\u003cstrong\u003e輸出\u003c/strong\u003e\n********  one ********\ncat create  0x22fdb0\ncat copy    0x22fe20\ncat die 0x22fdb0\ncat copy    0x22fe10\ncat die 0x22fe20\ni'm cat\ncat die 0x22fe10\n********  two ********\ndog create  0x22fdb0\ndog copy    0x22fe30\ndog die 0x22fdb0\ndog copy    0x22fe00\ndog die 0x22fe30\ni'm dog\ndog die 0x22fe00\n\n\u003cstrong\u003e分析\u003c/strong\u003e\nAnimal cat(make_animal(\"cat\"));\nAnimal dog = make_animal(\"dog\");\n將 引發多次 創建 歷時對象 每個臨時對象 創建 都是 不必要的 開銷\n\u003c/pre\u003e"