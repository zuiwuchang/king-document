var __v="\u003cpre class=\"k-pre\"\u003ebool unique()\t\t//返回shared_ptr是否是指針對唯一所有者\nlong use_count()\t\t//返回指針的引用計數 但不推薦使用 其效率低下 且極少情況下可能不可用\n==\t\t\t\t\t//比較內部保存的指針是否相等\n\u0026lt;\t\t\t\t//比較...大小(用於將shared_ptr 保存到關聯容器中)\nT* get()\t\t\t//返回內部保存的指針\n\n//不能使用std中的轉化 轉化指針類型 需要使用boost中的方法\nboost::shared_ptr\u0026lt;std::exception\u0026gt; sp1(new std::bad_exception(\"test\"));\n//向子類指針轉換\nboost::shared_ptr\u0026lt;std::bad_exception\u0026gt; sp2=boost::dynamic_pointer_cast\u0026lt;std::bad_exception\u0026gt;(sp1);\n//向父類指針轉換\nboost::shared_ptr\u0026lt;std::exception\u0026gt; sp3=boost::static_pointer_cast\u0026lt;std::exception\u0026gt;(sp2);\n\nboost::shared_ptr\u0026lt;T\u0026gt;  p(t);\nassert(p);\t\t\t\t\t//隱式轉換為bool p是否保存有效的指針\n\nmake_shared工廠函數 返回一個shared_ptr\nmake_shared最多接收10個函數 比直接使用new快\n\u003c/pre\u003e"