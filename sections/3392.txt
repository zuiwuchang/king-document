var __v="\u003cpre class=\"k-pre\"\u003eDirect3D 使用\ntypedef DWORD D3DCOLOR;\n表示顏色\n其為一個32位數據 以8位分別表示一個 alpha r g b 分量\n\n宏 D3DCOLOR_ARGB(a,r,g,b) 構造一個 D3DCOLOR\n宏 D3DCOLOR_XRGB(r,g,b) 構造一個 alpha=0xff 的D3DCOLOR\n\n\nstruct D3DCOLORVALUE {\n  FLOAT r;\t\t//[0.0,1.0]\n  FLOAT g;\n  FLOAT b;\n  FLOAT a;\n};\n和\ntypedef struct D3DXCOLOR\n{\n#ifdef __cplusplus\npublic:\n    D3DXCOLOR() {}\n    D3DXCOLOR( DWORD argb );\n    D3DXCOLOR( CONST FLOAT * );\n    D3DXCOLOR( CONST D3DXFLOAT16 * );\n    D3DXCOLOR( CONST D3DCOLORVALUE\u0026amp; );\n    D3DXCOLOR( FLOAT r, FLOAT g, FLOAT b, FLOAT a );\n\n    // casting\n    operator DWORD () const;\n\n    operator FLOAT* ();\n    operator CONST FLOAT* () const;\n\n    operator D3DCOLORVALUE* ();\n    operator CONST D3DCOLORVALUE* () const;\n\n    operator D3DCOLORVALUE\u0026amp; ();\n    operator CONST D3DCOLORVALUE\u0026amp; () const;\n\n    // assignment operators\n    D3DXCOLOR\u0026amp; operator += ( CONST D3DXCOLOR\u0026amp; );\n    D3DXCOLOR\u0026amp; operator -= ( CONST D3DXCOLOR\u0026amp; );\n    D3DXCOLOR\u0026amp; operator *= ( FLOAT );\n    D3DXCOLOR\u0026amp; operator /= ( FLOAT );\n\n    // unary operators\n    D3DXCOLOR operator + () const;\n    D3DXCOLOR operator - () const;\n\n    // binary operators\n    D3DXCOLOR operator + ( CONST D3DXCOLOR\u0026amp; ) const;\n    D3DXCOLOR operator - ( CONST D3DXCOLOR\u0026amp; ) const;\n    D3DXCOLOR operator * ( FLOAT ) const;\n    D3DXCOLOR operator / ( FLOAT ) const;\n\n    friend D3DXCOLOR operator * ( FLOAT, CONST D3DXCOLOR\u0026amp; );\n\n    BOOL operator == ( CONST D3DXCOLOR\u0026amp; ) const;\n    BOOL operator != ( CONST D3DXCOLOR\u0026amp; ) const;\n\n#endif //__cplusplus\n    FLOAT r, g, b, a;\n} D3DXCOLOR, *LPD3DXCOLOR;\n是一樣的 亦可用於 表示顏色 \n不過D3DXCOLOR 重載了多種 運算操作符\n\nD3DXCOLOR 的operator* 將每個分量進行 *\n\u003c/pre\u003e"