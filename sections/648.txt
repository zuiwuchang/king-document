var __v="\u003cpre class=\"prettyprint linenums\"\u003e#include \"duktape.h\"\n#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;cassert\u0026gt;\n\n//c扩展 js 函数\nduk_ret_t my_native_func(duk_context *ctx) {\n    double arg = duk_require_number(ctx, 0 /*index*/);\n    duk_push_number(ctx, arg * arg);\n    return 1;\n}\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n\t//初始化一個默認的 js 執行環境\n\tduk_context* ctx = duk_create_heap_default();\n\t//duk_context* ctx = duk_create_heap(NULL, NULL, NULL, NULL, NULL);\n\tassert(ctx);\n\t{\n\t\t//入栈 js 全局对象\n\t\tduk_push_global_object(ctx);\n\n\t\t//入栈 函数\n\t\tduk_push_c_function(ctx, my_native_func, 1 /*函数参数数量*/);\n\t\t//为函数 设置 名字 (其实是设置 全局对象 设置属性名 被设置的是栈顶位置的 属性名)\n\t\t//设置之后 此元素 出栈\n\t\tduk_put_prop_string(ctx, -2, \"my_native_func\");\n\t\t\n\t\t//打印当前栈情况\n\t\tduk_dump_context_stdout(ctx);\n\t\tduk_pop(ctx);\n\n\t\tassert(!duk_peval_string(ctx, \"my_native_func(2)\"));\n\t\tprintf(\"value = %d\\n\",duk_get_int(ctx,-1));\n\t\tduk_pop(ctx);\n\t}\n\t//釋放 js 環境\n\tduk_destroy_heap(ctx);\n\n\tstd::system(\"pause\");\n\treturn 0;\n}\u003c/pre\u003e"