var __v="\u003cpre class=\"k-pre\"\u003ecocos 的事件是 冒泡式的(由子節點 不斷 發送到父節點 除非調用了 event.stopPropagation() 停止冒泡)\n\nnode 的 dispatchEvent 函數 提供了 冒泡的事件派送\n\u003cstrong\u003edispatchEvent 創建的事件 需要 new EventCustom 而非 Event 因爲 Event是 純抽象接口\u003c/strong\u003e\n\n\u003cpre class='prettyprint linenums'\u003ecc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        var node = this.node;\n        \n        node.on(\"mousedown\",function(){\n            //創建 事件\n            var evt = new cc.Event.EventCustom('speak',//事件名\n                true //事件是否要冒泡\n            );\n            evt.detail = {msg:\"Cerberus is an idea\"};\n            //派送事件\n            node.dispatchEvent(evt);\n        });\n        \n        //響應 事件\n        this.node.on('speak', function (evt) {\n            //獲取 自定義 參數\n            console.log(evt.detail.msg);\n            \n            //停止冒泡\n            evt.stopPropagation();\n        });\n        \n    },\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\u003c/pre\u003e\u003c/pre\u003e"