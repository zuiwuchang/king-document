var __v="\n\u003cpre class='prettyprint linenums'\u003e//hook 代码\nvoid iatHook();\n//替换的自定义函数\nVOID WINAPI hookSleep(__in DWORD dwMilliseconds);\nint _tmain(int argc, _TCHAR* argv[])\n{\n\tiatHook();\n\tSleep(100);\n\tsystem(\"pause\");\n\treturn 0;\n}\n\nvoid iatHook()\n{\n\t//取得DOS头 既基址 \n\tDWORD image_base=(DWORD)GetModuleHandle(NULL);\n\tPIMAGE_DOS_HEADER dos_header=(PIMAGE_DOS_HEADER)image_base;\n\n\t//取得PE头\n\tPIMAGE_NT_HEADERS pe_header=(PIMAGE_NT_HEADERS)(image_base+dos_header-\u0026gt;e_lfanew);\n\n\t//取得导入表信息 IMAGE_DIRECTORY_ENTRY_IMPORT值为1 表示import tabale\n\tPIMAGE_IMPORT_DESCRIPTOR import_descriptor=(PIMAGE_IMPORT_DESCRIPTOR)(image_base+pe_header-\u0026gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);\n\t\n\t//定义用于保存函数信息的局部变量\n\tPIMAGE_THUNK_DATA thunk_name,thunk_addr;   \n\t//遍历整个 输入表 \n\tfor (PIMAGE_IMPORT_DESCRIPTOR iterator=import_descriptor; iterator-\u0026gt;FirstThunk; iterator++)   \n\t{      \n\t\tstd::cout\u0026lt;\u0026lt;\"导入模块:\"\u0026lt;\u0026lt;(char*)(image_base+iterator-\u0026gt;Name)\u0026lt;\u0026lt;std::endl;\n\t\t   \n\t\t//遍历IAT信息  PIMAGE_THUNK_DATA基址\t\n\t\tfor (thunk_name = (PIMAGE_THUNK_DATA) (image_base + iterator-\u0026gt;OriginalFirstThunk),thunk_addr=(PIMAGE_THUNK_DATA) (image_base + iterator-\u0026gt;FirstThunk); \n\t\t\tthunk_addr-\u0026gt;u1.Function;++thunk_name,\n\t\t\t++thunk_addr)\n\t\t\n\t\t{  \n\t\t\t//取得函数名称。hint/name表前两个字节是函数的序号，后4个字节是函数名称字符串的地址\n\t\t\tDWORD address_data=image_base+thunk_name-\u0026gt;u1.AddressOfData;\n            char* function_name = (char*)(address_data+2);\n\n\t\t\t//取得存放函数地址的指针\n\t\t\tDWORD function_addr = thunk_addr-\u0026gt;u1.Function;\n\t\t\t\n\t\t\tstd::cout\u0026lt;\u0026lt;std::hex\u0026lt;\u0026lt;function_addr\u0026lt;\u0026lt;\"   \"\u0026lt;\u0026lt;function_name\u0026lt;\u0026lt;std::endl;\n\t\t\t\n\t\t\tif((DWORD)Sleep==function_addr)\n\t\t\t{   \n\t\t\t\tDWORD pSleep=(DWORD)\u0026amp;thunk_addr-\u0026gt;u1.Function; \n\t\t\t\t\n\t\t\t\tMEMORY_BASIC_INFORMATION mbi_thunk;  \n\t\t\t\t //查询页信息。  \n\t\t\t\tVirtualQuery((PVOID)pSleep, \u0026amp;mbi_thunk, sizeof(MEMORY_BASIC_INFORMATION));\n\t\t\t\t//改动页保护属性为读写执行\n\t\t\t\tVirtualProtect(mbi_thunk.BaseAddress,mbi_thunk.RegionSize,PAGE_EXECUTE_READWRITE, \u0026amp;mbi_thunk.Protect);\n\t\t\t\t__asm\n\t\t\t\t{\n\t\t\t\t\t\tmov ebx,pSleep \n\t\t\t\t\t\tlea eax,hookSleep;\n\t\t\t\t\t\tmov [ebx],eax\n\t\t\t\t}\n\t\t\t\t//恢复页面保护\n\t\t\t\tVirtualProtect(mbi_thunk.BaseAddress,mbi_thunk.RegionSize, mbi_thunk.Protect, NULL);\n\n\t\t\t}\n\t\t\t\n\t\t}   \n\t}   \n}\n\nVOID WINAPI hookSleep(__in DWORD dwMilliseconds)\n{\n\tMessageBox(NULL,L\"hook 成功\",L\"test\",MB_OK);\n}\u003c/pre\u003e"