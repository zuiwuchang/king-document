var __v="\u003cpre class='k-pre'\u003e創建 c/main.cpp\u003c/pre\u003e\n\u003cpre class='prettyprint linenums'\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;boost/algorithm/string.hpp\u0026gt;\n\n#include \u0026lt;grpc/grpc.h\u0026gt;\n#include \u0026lt;grpc++/channel.h\u0026gt;\n#include \u0026lt;grpc++/client_context.h\u0026gt;\n#include \u0026lt;grpc++/create_channel.h\u0026gt;\n#include \u0026lt;grpc++/security/credentials.h\u0026gt;\n\n#include \"../pb/pb/pb.grpc.pb.h\"\n\n#define LAddr \"localhost:1102\"\n\nint main()\n{\n    //創建 客戶端\n    std::unique_ptr\u0026lt;pb::TestServer::Stub\u0026gt; stub = pb::TestServer::NewStub(\n                grpc::CreateChannel(\n                    LAddr,\n                    grpc::InsecureChannelCredentials()\n                )\n            );\n\n    std::string cmd;\n    pb::SayRequest req;\n    pb::SayReply repl;\n    while(true)\n    {\n        std::cout\u0026lt;\u0026lt;\"#\u0026gt;\";\n        std::cin\u0026gt;\u0026gt;cmd;\n\n        if (cmd == \"e\")\n        {\n            break;\n        }\n        else if(boost::algorithm::starts_with(cmd, \"name=\"))\n        {\n            req.set_name(cmd.substr(std::string(\"name=\").size()));\n        }\n        else if(boost::algorithm::starts_with(cmd, \"say=\"))\n        {\n            req.set_text(cmd.substr(std::string(\"say=\").size()));\n\n            //rpc 請求\n            grpc::ClientContext     context;\n            grpc::Status status = stub-\u0026gt;Say(\u0026amp;context,req,\u0026amp;repl);\n            if(!status.ok())\n            {\n                std::cout\u0026lt;\u0026lt;status.error_code()\u0026lt;\u0026lt;\" \"\u0026lt;\u0026lt;status.error_message()\u0026lt;\u0026lt;\"\\n\";\n                continue;\n            }\n            std::cout\u0026lt;\u0026lt;repl.text()\u0026lt;\u0026lt;\"\\n\";\n        }\n    }\n\n    return 0;\n}\n\u003c/pre\u003e"