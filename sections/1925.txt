var __v="\u003cpre class=\"k-pre\"\u003e編輯 Poco::Data::MySql 項目下的 poco-1.4.6p2-all\\Data\\MySQL\\src\\SessionImpl.cpp\n找到 SessionImpl 的構造實現 如下(紅色為 應該增加的 代碼)(所有連接操作 最終都只是 轉發到了此處)\n\nSessionImpl::SessionImpl(const std::string\u0026amp; connectionString) : _mysql(0), _connected(false), _inTransaction(0)\n{\n\taddProperty(\"insertId\", \n\t\t\u0026amp;SessionImpl::setInsertId, \n\t\t\u0026amp;SessionImpl::getInsertId);\n\n\tstd::map\u0026lt;std::string, std::string\u0026gt; options;\n\n// Default values\n\toptions[\"host\"] = \"localhost\";\n\toptions[\"port\"] = \"3306\";\n\toptions[\"user\"] = \"\";\n\toptions[\"password\"] = \"\";\n\toptions[\"db\"] = \"\";\n\toptions[\"compress\"] = \"\";\n\toptions[\"auto-reconnect\"] = \"\";\n\t\u003cstrong\u003eoptions[\"default-character-set\"]\t=\t\"\";\u003c/strong\u003e\n\n\t//\n\t// Parse string\n\t//\n...\n//\n\t// Real connect\n\t//\n\u003cstrong\u003e\n\tif(options[\"default-character-set\"] != \"\")\n\t{\n\t\tif(mysql_options(_mysql,MYSQL_SET_CHARSET_NAME,options[\"default-character-set\"].c_str()))\n\t\t{\n\t\t\tthrow MySQLException(\"default-character-set error\");\n\t\t}\n\t}\n\u003c/strong\u003e\n\t_mysql.connect(\n\t\t\toptions[\"host\"].c_str(), \n\t\t\toptions[\"user\"].c_str(), \n\t\t\toptions[\"password\"].c_str(), \n\t\t\toptions[\"db\"].c_str(), \n\t\t\tport);\n\n\t_connected = true;\n}\n\n\n說明\n此函數首先 定義了一個map 然後將 連接字符串中的 選項 解析到map (上文 ...省略掉代碼 詳見 Poco源碼)\n增加的 第一處 代碼 便是 增加了 對選項default-character-set 的解析\n\n之後 更具 選項 設置 mysql_real_connect 的參數 通過 _mysql.connect 將引發mysql_real_connect的調用\n增加的 第二處代碼 便是 在 mysql_real_connect 之前 使用 mysql_options 設置 使用的字符串編碼\n\n_mysql 是一個SessionHandle 其重載了 operator MYSQL* 故 可直接傳遞給 mysql_options\n\u003c/pre\u003e"